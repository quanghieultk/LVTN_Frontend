{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { loadDracoDecoderModule } from './lib/draco-module-loader';\nimport DracoParser from './lib/draco-parser';\nvar VERSION = typeof \"2.3.13\" !== 'undefined' ? \"2.3.13\" : 'latest';\nexport var DracoWorkerLoader = {\n  id: 'draco',\n  name: 'Draco',\n  version: VERSION,\n  extensions: ['drc'],\n  mimeTypes: ['application/octet-stream'],\n  binary: true,\n  tests: ['DRACO'],\n  options: {\n    draco: {\n      decoderType: (typeof WebAssembly === \"undefined\" ? \"undefined\" : _typeof(WebAssembly)) === 'object' ? 'wasm' : 'js',\n      libraryPath: \"libs/\",\n      workerUrl: \"https://unpkg.com/@loaders.gl/draco@\".concat(VERSION, \"/dist/draco-loader.worker.js\"),\n      localWorkerUrl: \"modules/draco/dist/draco-loader.worker.dev.js\",\n      extraAttributes: {}\n    }\n  }\n};\nexport var DracoLoader = _objectSpread(_objectSpread({}, DracoWorkerLoader), {}, {\n  parse: parse\n});\n\nfunction parse(_x, _x2, _x3, _x4) {\n  return _parse.apply(this, arguments);\n}\n\nfunction _parse() {\n  _parse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(arrayBuffer, options, context, loader) {\n    var _yield$loadDracoDecod, draco, dracoParser;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return loadDracoDecoderModule(options);\n\n          case 2:\n            _yield$loadDracoDecod = _context.sent;\n            draco = _yield$loadDracoDecod.draco;\n            dracoParser = new DracoParser(draco);\n            _context.prev = 5;\n            return _context.abrupt(\"return\", dracoParser.parseSync(arrayBuffer, _objectSpread({\n              extraAttributes: options.draco && options.draco.extraAttributes || null\n            }, options.parseOptions || {})));\n\n          case 7:\n            _context.prev = 7;\n            dracoParser.destroy();\n            return _context.finish(7);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[5,, 7, 10]]);\n  }));\n  return _parse.apply(this, arguments);\n}","map":{"version":3,"sources":["../../src/draco-loader.js"],"names":["VERSION","DracoWorkerLoader","id","name","version","extensions","mimeTypes","binary","tests","options","draco","decoderType","libraryPath","workerUrl","localWorkerUrl","extraAttributes","DracoLoader","parse","loadDracoDecoderModule","dracoParser"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAAA,sBAAA,QAAA,2BAAA;AACA,OAAA,WAAA,MAAA,oBAAA;AAIA,IAAMA,OAAO,GAAG,OAAA,QAAA,KAAA,WAAA,GAAA,QAAA,GAAhB,QAAA;AAGA,OAAO,IAAMC,iBAAiB,GAAG;AAC/BC,EAAAA,EAAE,EAD6B,OAAA;AAE/BC,EAAAA,IAAI,EAF2B,OAAA;AAG/BC,EAAAA,OAAO,EAHwB,OAAA;AAI/BC,EAAAA,UAAU,EAAE,CAJmB,KAInB,CAJmB;AAK/BC,EAAAA,SAAS,EAAE,CALoB,0BAKpB,CALoB;AAM/BC,EAAAA,MAAM,EANyB,IAAA;AAO/BC,EAAAA,KAAK,EAAE,CAPwB,OAOxB,CAPwB;AAQ/BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,KAAK,EAAE;AACLC,MAAAA,WAAW,EAAE,CAAA,OAAA,WAAA,KAAA,WAAA,GAAA,WAAA,GAAA,OAAA,CAAA,WAAA,CAAA,MAAA,QAAA,GAAA,MAAA,GADR,IAAA;AAELC,MAAAA,WAAW,EAFN,OAAA;AAGLC,MAAAA,SAAS,EAAA,uCAAA,MAAA,CAAA,OAAA,EAHJ,8BAGI,CAHJ;AAILC,MAAAA,cAAc,EAJT,+CAAA;AAKLC,MAAAA,eAAe,EAAE;AALZ;AADA;AARsB,CAA1B;AAoBP,OAAO,IAAMC,WAAW,GAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,iBAAA,CAAA,EAAA,EAAA,EAAA;AAEtBC,EAAAA,KAAK,EAALA;AAFsB,CAAA,CAAjB;;SAKQA,K;;;;;sDAAf,SAAA,OAAA,CAAA,WAAA,EAAA,OAAA,EAAA,OAAA,EAAA,MAAA,EAAA;AAAA,QAAA,qBAAA,EAAA,KAAA,EAAA,WAAA;;AAAA,WAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBACwBC,sBAAsB,CAD9C,OAC8C,CAD9C;;AAAA,eAAA,CAAA;AAAA,YAAA,qBAAA,GAAA,QAAA,CAAA,IAAA;AACSR,YAAAA,KADT,GAAA,qBAAA,CAAA,KACSA;AACDS,YAAAA,WAFR,GAEsB,IAAA,WAAA,CAFtB,KAEsB,CAAdA;AAFR,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAMW,WAAW,CAAX,SAAA,CAAA,WAAA,EAAA,aAAA,CAAA;AACLJ,cAAAA,eAAe,EAAGN,OAAO,CAAPA,KAAAA,IAAiBA,OAAO,CAAPA,KAAAA,CAAlB,eAACA,IAAmD;AADhE,aAAA,EAEDA,OAAO,CAAPA,YAAAA,IARV,EAMW,CAAA,CANX,CAAA;;AAAA,eAAA,CAAA;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAWIU,YAAAA,WAAW,CAAXA,OAAAA;AAXJ,mBAAA,QAAA,CAAA,MAAA,CAAA,CAAA,CAAA;;AAAA,eAAA,EAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,OAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA","sourcesContent":["/** @typedef {import('@loaders.gl/loader-utils').LoaderObject} LoaderObject */\n/** @typedef {import('@loaders.gl/loader-utils').WorkerLoaderObject} WorkerLoaderObject */\nimport {loadDracoDecoderModule} from './lib/draco-module-loader';\nimport DracoParser from './lib/draco-parser';\n\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\n/** @type {WorkerLoaderObject} */\nexport const DracoWorkerLoader = {\n  id: 'draco',\n  name: 'Draco',\n  version: VERSION,\n  extensions: ['drc'],\n  mimeTypes: ['application/octet-stream'],\n  binary: true,\n  tests: ['DRACO'],\n  options: {\n    draco: {\n      decoderType: typeof WebAssembly === 'object' ? 'wasm' : 'js', // 'js' for IE11\n      libraryPath: `libs/`,\n      workerUrl: `https://unpkg.com/@loaders.gl/draco@${VERSION}/dist/draco-loader.worker.js`,\n      localWorkerUrl: `modules/draco/dist/draco-loader.worker.dev.js`,\n      extraAttributes: {}\n    }\n  }\n};\n\n/** @type {LoaderObject} */\nexport const DracoLoader = {\n  ...DracoWorkerLoader,\n  parse\n};\n\nasync function parse(arrayBuffer, options, context, loader) {\n  const {draco} = await loadDracoDecoderModule(options);\n  const dracoParser = new DracoParser(draco);\n  try {\n    // TODO passing in options causes CI failures...\n    // @ts-ignore\n    return dracoParser.parseSync(arrayBuffer, {\n      extraAttributes: (options.draco && options.draco.extraAttributes) || null,\n      ...(options.parseOptions || {})\n    });\n  } finally {\n    dracoParser.destroy();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}