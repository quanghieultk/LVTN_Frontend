{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nexport function geojsonToBinary(features) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var firstPassData = firstPass(features);\n  return secondPass(features, firstPassData, {\n    coordLength: options.coordLength || firstPassData.coordLength || 2,\n    numericPropKeys: options.numericPropKeys || firstPassData.numericPropKeys,\n    PositionDataType: options.PositionDataType || Float32Array\n  });\n}\nexport var TEST_EXPORTS = {\n  firstPass: firstPass,\n  secondPass: secondPass\n};\n\nfunction firstPass(features) {\n  var pointPositionsCount = 0;\n  var pointFeaturesCount = 0;\n  var linePositionsCount = 0;\n  var linePathsCount = 0;\n  var lineFeaturesCount = 0;\n  var polygonPositionsCount = 0;\n  var polygonObjectsCount = 0;\n  var polygonRingsCount = 0;\n  var polygonFeaturesCount = 0;\n  var coordLengths = new Set();\n  var numericPropKeys = {};\n\n  var _iterator = _createForOfIteratorHelper(features),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var feature = _step.value;\n      var geometry = feature.geometry;\n\n      switch (geometry.type) {\n        case 'Point':\n          pointFeaturesCount++;\n          pointPositionsCount++;\n          coordLengths.add(geometry.coordinates.length);\n          break;\n\n        case 'MultiPoint':\n          pointFeaturesCount++;\n          pointPositionsCount += geometry.coordinates.length;\n\n          var _iterator2 = _createForOfIteratorHelper(geometry.coordinates),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var point = _step2.value;\n              coordLengths.add(point.length);\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n\n          break;\n\n        case 'LineString':\n          lineFeaturesCount++;\n          linePositionsCount += geometry.coordinates.length;\n          linePathsCount++;\n\n          var _iterator3 = _createForOfIteratorHelper(geometry.coordinates),\n              _step3;\n\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var coord = _step3.value;\n              coordLengths.add(coord.length);\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n\n          break;\n\n        case 'MultiLineString':\n          lineFeaturesCount++;\n\n          var _iterator4 = _createForOfIteratorHelper(geometry.coordinates),\n              _step4;\n\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var line = _step4.value;\n              linePositionsCount += line.length;\n              linePathsCount++;\n\n              var _iterator5 = _createForOfIteratorHelper(line),\n                  _step5;\n\n              try {\n                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                  var _coord = _step5.value;\n                  coordLengths.add(_coord.length);\n                }\n              } catch (err) {\n                _iterator5.e(err);\n              } finally {\n                _iterator5.f();\n              }\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n\n          break;\n\n        case 'Polygon':\n          polygonFeaturesCount++;\n          polygonObjectsCount++;\n          polygonRingsCount += geometry.coordinates.length;\n          polygonPositionsCount += flatten(geometry.coordinates).length;\n\n          var _iterator6 = _createForOfIteratorHelper(flatten(geometry.coordinates)),\n              _step6;\n\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var _coord2 = _step6.value;\n              coordLengths.add(_coord2.length);\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n\n          break;\n\n        case 'MultiPolygon':\n          polygonFeaturesCount++;\n\n          var _iterator7 = _createForOfIteratorHelper(geometry.coordinates),\n              _step7;\n\n          try {\n            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n              var polygon = _step7.value;\n              polygonObjectsCount++;\n              polygonRingsCount += polygon.length;\n              polygonPositionsCount += flatten(polygon).length;\n\n              var _iterator8 = _createForOfIteratorHelper(flatten(polygon)),\n                  _step8;\n\n              try {\n                for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                  var _coord3 = _step8.value;\n                  coordLengths.add(_coord3.length);\n                }\n              } catch (err) {\n                _iterator8.e(err);\n              } finally {\n                _iterator8.f();\n              }\n            }\n          } catch (err) {\n            _iterator7.e(err);\n          } finally {\n            _iterator7.f();\n          }\n\n          break;\n\n        default:\n          throw new Error(\"Unsupported geometry type: \".concat(geometry.type));\n      }\n\n      if (feature.properties) {\n        for (var key in feature.properties) {\n          var val = feature.properties[key];\n          numericPropKeys[key] = numericPropKeys[key] || numericPropKeys[key] === undefined ? isNumeric(val) : numericPropKeys[key];\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return {\n    pointPositionsCount: pointPositionsCount,\n    pointFeaturesCount: pointFeaturesCount,\n    linePositionsCount: linePositionsCount,\n    linePathsCount: linePathsCount,\n    lineFeaturesCount: lineFeaturesCount,\n    coordLength: coordLengths.size > 0 && Math.max.apply(Math, _toConsumableArray(coordLengths)),\n    polygonPositionsCount: polygonPositionsCount,\n    polygonObjectsCount: polygonObjectsCount,\n    polygonRingsCount: polygonRingsCount,\n    polygonFeaturesCount: polygonFeaturesCount,\n    numericPropKeys: Object.keys(numericPropKeys).filter(function (k) {\n      return numericPropKeys[k];\n    })\n  };\n}\n\nfunction secondPass(features) {\n  var firstPassData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var pointPositionsCount = firstPassData.pointPositionsCount,\n      pointFeaturesCount = firstPassData.pointFeaturesCount,\n      linePositionsCount = firstPassData.linePositionsCount,\n      linePathsCount = firstPassData.linePathsCount,\n      lineFeaturesCount = firstPassData.lineFeaturesCount,\n      polygonPositionsCount = firstPassData.polygonPositionsCount,\n      polygonObjectsCount = firstPassData.polygonObjectsCount,\n      polygonRingsCount = firstPassData.polygonRingsCount,\n      polygonFeaturesCount = firstPassData.polygonFeaturesCount;\n  var coordLength = options.coordLength,\n      numericPropKeys = options.numericPropKeys,\n      _options$PositionData = options.PositionDataType,\n      PositionDataType = _options$PositionData === void 0 ? Float32Array : _options$PositionData;\n  var GlobalFeatureIdsDataType = features.length > 65535 ? Uint32Array : Uint16Array;\n  var points = {\n    positions: new PositionDataType(pointPositionsCount * coordLength),\n    globalFeatureIds: new GlobalFeatureIdsDataType(pointPositionsCount),\n    featureIds: pointFeaturesCount > 65535 ? new Uint32Array(pointPositionsCount) : new Uint16Array(pointPositionsCount),\n    numericProps: {},\n    properties: []\n  };\n  var lines = {\n    pathIndices: linePositionsCount > 65535 ? new Uint32Array(linePathsCount + 1) : new Uint16Array(linePathsCount + 1),\n    positions: new PositionDataType(linePositionsCount * coordLength),\n    globalFeatureIds: new GlobalFeatureIdsDataType(linePositionsCount),\n    featureIds: lineFeaturesCount > 65535 ? new Uint32Array(linePositionsCount) : new Uint16Array(linePositionsCount),\n    numericProps: {},\n    properties: []\n  };\n  var polygons = {\n    polygonIndices: polygonPositionsCount > 65535 ? new Uint32Array(polygonObjectsCount + 1) : new Uint16Array(polygonObjectsCount + 1),\n    primitivePolygonIndices: polygonPositionsCount > 65535 ? new Uint32Array(polygonRingsCount + 1) : new Uint16Array(polygonRingsCount + 1),\n    positions: new PositionDataType(polygonPositionsCount * coordLength),\n    globalFeatureIds: new GlobalFeatureIdsDataType(polygonPositionsCount),\n    featureIds: polygonFeaturesCount > 65535 ? new Uint32Array(polygonPositionsCount) : new Uint16Array(polygonPositionsCount),\n    numericProps: {},\n    properties: []\n  };\n\n  for (var _i = 0, _arr = [points, lines, polygons]; _i < _arr.length; _i++) {\n    var object = _arr[_i];\n\n    var _iterator9 = _createForOfIteratorHelper(numericPropKeys),\n        _step9;\n\n    try {\n      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n        var propName = _step9.value;\n        object.numericProps[propName] = new Float32Array(object.positions.length / coordLength);\n      }\n    } catch (err) {\n      _iterator9.e(err);\n    } finally {\n      _iterator9.f();\n    }\n  }\n\n  lines.pathIndices[linePathsCount] = linePositionsCount;\n  polygons.polygonIndices[polygonObjectsCount] = polygonPositionsCount;\n  polygons.primitivePolygonIndices[polygonRingsCount] = polygonPositionsCount;\n  var indexMap = {\n    pointPosition: 0,\n    pointFeature: 0,\n    linePosition: 0,\n    linePath: 0,\n    lineFeature: 0,\n    polygonPosition: 0,\n    polygonObject: 0,\n    polygonRing: 0,\n    polygonFeature: 0,\n    feature: 0\n  };\n\n  var _iterator10 = _createForOfIteratorHelper(features),\n      _step10;\n\n  try {\n    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n      var feature = _step10.value;\n      var geometry = feature.geometry;\n      var properties = feature.properties || {};\n\n      switch (geometry.type) {\n        case 'Point':\n          handlePoint(geometry.coordinates, points, indexMap, coordLength, properties);\n          points.properties.push(keepStringProperties(properties, numericPropKeys));\n          indexMap.pointFeature++;\n          break;\n\n        case 'MultiPoint':\n          handleMultiPoint(geometry.coordinates, points, indexMap, coordLength, properties);\n          points.properties.push(keepStringProperties(properties, numericPropKeys));\n          indexMap.pointFeature++;\n          break;\n\n        case 'LineString':\n          handleLineString(geometry.coordinates, lines, indexMap, coordLength, properties);\n          lines.properties.push(keepStringProperties(properties, numericPropKeys));\n          indexMap.lineFeature++;\n          break;\n\n        case 'MultiLineString':\n          handleMultiLineString(geometry.coordinates, lines, indexMap, coordLength, properties);\n          lines.properties.push(keepStringProperties(properties, numericPropKeys));\n          indexMap.lineFeature++;\n          break;\n\n        case 'Polygon':\n          handlePolygon(geometry.coordinates, polygons, indexMap, coordLength, properties);\n          polygons.properties.push(keepStringProperties(properties, numericPropKeys));\n          indexMap.polygonFeature++;\n          break;\n\n        case 'MultiPolygon':\n          handleMultiPolygon(geometry.coordinates, polygons, indexMap, coordLength, properties);\n          polygons.properties.push(keepStringProperties(properties, numericPropKeys));\n          indexMap.polygonFeature++;\n          break;\n\n        default:\n          throw new Error('Invalid geometry type');\n      }\n\n      indexMap.feature++;\n    }\n  } catch (err) {\n    _iterator10.e(err);\n  } finally {\n    _iterator10.f();\n  }\n\n  return makeAccessorObjects(points, lines, polygons, coordLength);\n}\n\nfunction handlePoint(coords, points, indexMap, coordLength, properties) {\n  points.positions.set(coords, indexMap.pointPosition * coordLength);\n  points.globalFeatureIds[indexMap.pointPosition] = indexMap.feature;\n  points.featureIds[indexMap.pointPosition] = indexMap.pointFeature;\n  fillNumericProperties(points, properties, indexMap.pointPosition, 1);\n  indexMap.pointPosition++;\n}\n\nfunction handleMultiPoint(coords, points, indexMap, coordLength, properties) {\n  var _iterator11 = _createForOfIteratorHelper(coords),\n      _step11;\n\n  try {\n    for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n      var point = _step11.value;\n      handlePoint(point, points, indexMap, coordLength, properties);\n    }\n  } catch (err) {\n    _iterator11.e(err);\n  } finally {\n    _iterator11.f();\n  }\n}\n\nfunction handleLineString(coords, lines, indexMap, coordLength, properties) {\n  lines.pathIndices[indexMap.linePath] = indexMap.linePosition;\n  indexMap.linePath++;\n  fillCoords(lines.positions, coords, indexMap.linePosition, coordLength);\n  var nPositions = coords.length;\n  fillNumericProperties(lines, properties, indexMap.linePosition, nPositions);\n  lines.globalFeatureIds.set(new Uint32Array(nPositions).fill(indexMap.feature), indexMap.linePosition);\n  lines.featureIds.set(new Uint32Array(nPositions).fill(indexMap.lineFeature), indexMap.linePosition);\n  indexMap.linePosition += nPositions;\n}\n\nfunction handleMultiLineString(coords, lines, indexMap, coordLength, properties) {\n  var _iterator12 = _createForOfIteratorHelper(coords),\n      _step12;\n\n  try {\n    for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n      var line = _step12.value;\n      handleLineString(line, lines, indexMap, coordLength, properties);\n    }\n  } catch (err) {\n    _iterator12.e(err);\n  } finally {\n    _iterator12.f();\n  }\n}\n\nfunction handlePolygon(coords, polygons, indexMap, coordLength, properties) {\n  polygons.polygonIndices[indexMap.polygonObject] = indexMap.polygonPosition;\n  indexMap.polygonObject++;\n\n  var _iterator13 = _createForOfIteratorHelper(coords),\n      _step13;\n\n  try {\n    for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n      var ring = _step13.value;\n      polygons.primitivePolygonIndices[indexMap.polygonRing] = indexMap.polygonPosition;\n      indexMap.polygonRing++;\n      fillCoords(polygons.positions, ring, indexMap.polygonPosition, coordLength);\n      var nPositions = ring.length;\n      fillNumericProperties(polygons, properties, indexMap.polygonPosition, nPositions);\n      polygons.globalFeatureIds.set(new Uint32Array(nPositions).fill(indexMap.feature), indexMap.polygonPosition);\n      polygons.featureIds.set(new Uint32Array(nPositions).fill(indexMap.polygonFeature), indexMap.polygonPosition);\n      indexMap.polygonPosition += nPositions;\n    }\n  } catch (err) {\n    _iterator13.e(err);\n  } finally {\n    _iterator13.f();\n  }\n}\n\nfunction handleMultiPolygon(coords, polygons, indexMap, coordLength, properties) {\n  var _iterator14 = _createForOfIteratorHelper(coords),\n      _step14;\n\n  try {\n    for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n      var polygon = _step14.value;\n      handlePolygon(polygon, polygons, indexMap, coordLength, properties);\n    }\n  } catch (err) {\n    _iterator14.e(err);\n  } finally {\n    _iterator14.f();\n  }\n}\n\nfunction makeAccessorObjects(points, lines, polygons, coordLength) {\n  var returnObj = {\n    points: {\n      positions: {\n        value: points.positions,\n        size: coordLength\n      },\n      globalFeatureIds: {\n        value: points.globalFeatureIds,\n        size: 1\n      },\n      featureIds: {\n        value: points.featureIds,\n        size: 1\n      },\n      numericProps: points.numericProps,\n      properties: points.properties\n    },\n    lines: {\n      pathIndices: {\n        value: lines.pathIndices,\n        size: 1\n      },\n      positions: {\n        value: lines.positions,\n        size: coordLength\n      },\n      globalFeatureIds: {\n        value: lines.globalFeatureIds,\n        size: 1\n      },\n      featureIds: {\n        value: lines.featureIds,\n        size: 1\n      },\n      numericProps: lines.numericProps,\n      properties: lines.properties\n    },\n    polygons: {\n      polygonIndices: {\n        value: polygons.polygonIndices,\n        size: 1\n      },\n      primitivePolygonIndices: {\n        value: polygons.primitivePolygonIndices,\n        size: 1\n      },\n      positions: {\n        value: polygons.positions,\n        size: coordLength\n      },\n      globalFeatureIds: {\n        value: polygons.globalFeatureIds,\n        size: 1\n      },\n      featureIds: {\n        value: polygons.featureIds,\n        size: 1\n      },\n      numericProps: polygons.numericProps,\n      properties: polygons.properties\n    }\n  };\n\n  for (var geomType in returnObj) {\n    for (var numericProp in returnObj[geomType].numericProps) {\n      returnObj[geomType].numericProps[numericProp] = {\n        value: returnObj[geomType].numericProps[numericProp],\n        size: 1\n      };\n    }\n  }\n\n  return returnObj;\n}\n\nfunction fillNumericProperties(object, properties, index, length) {\n  for (var numericPropName in object.numericProps) {\n    if (numericPropName in properties) {\n      object.numericProps[numericPropName].set(new Array(length).fill(properties[numericPropName]), index);\n    }\n  }\n}\n\nfunction keepStringProperties(properties, numericKeys) {\n  var props = {};\n\n  for (var key in properties) {\n    if (!numericKeys.includes(key)) {\n      props[key] = properties[key];\n    }\n  }\n\n  return props;\n}\n\nfunction fillCoords(array, coords, startVertex, coordLength) {\n  var index = startVertex * coordLength;\n\n  var _iterator15 = _createForOfIteratorHelper(coords),\n      _step15;\n\n  try {\n    for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n      var coord = _step15.value;\n      array.set(coord, index);\n      index += coordLength;\n    }\n  } catch (err) {\n    _iterator15.e(err);\n  } finally {\n    _iterator15.f();\n  }\n}\n\nfunction flatten(arrays) {\n  var _ref;\n\n  return (_ref = []).concat.apply(_ref, _toConsumableArray(arrays));\n}\n\nfunction isNumeric(x) {\n  return Number.isFinite(x);\n}","map":{"version":3,"sources":["../../../src/lib/geojson-to-binary.js"],"names":["options","firstPassData","firstPass","secondPass","coordLength","numericPropKeys","PositionDataType","Float32Array","TEST_EXPORTS","pointPositionsCount","pointFeaturesCount","linePositionsCount","linePathsCount","lineFeaturesCount","polygonPositionsCount","polygonObjectsCount","polygonRingsCount","polygonFeaturesCount","coordLengths","feature","geometry","point","coord","line","flatten","polygon","val","isNumeric","Math","GlobalFeatureIdsDataType","features","points","positions","globalFeatureIds","featureIds","numericProps","properties","lines","pathIndices","polygons","polygonIndices","primitivePolygonIndices","object","propName","indexMap","pointPosition","pointFeature","linePosition","linePath","lineFeature","polygonPosition","polygonObject","polygonRing","polygonFeature","handlePoint","keepStringProperties","handleMultiPoint","handleLineString","handleMultiLineString","handlePolygon","handleMultiPolygon","makeAccessorObjects","fillNumericProperties","fillCoords","nPositions","coords","ring","returnObj","value","size","numericPropName","props","numericKeys","index","startVertex","array","Number"],"mappings":"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","sourcesContent":["// Convert GeoJSON features to flat binary arrays\n// @ts-nocheck\n\nexport function geojsonToBinary(features, options = {}) {\n  const firstPassData = firstPass(features);\n  return secondPass(features, firstPassData, {\n    coordLength: options.coordLength || firstPassData.coordLength || 2,\n    numericPropKeys: options.numericPropKeys || firstPassData.numericPropKeys,\n    PositionDataType: options.PositionDataType || Float32Array\n  });\n}\n\nexport const TEST_EXPORTS = {\n  firstPass,\n  secondPass\n};\n\n// Initial scan over GeoJSON features\n// Counts number of coordinates of each geometry type and keeps track of the max coordinate\n// dimensions\n// eslint-disable-next-line complexity, max-statements\nfunction firstPass(features) {\n  // Counts the number of _positions_, so [x, y, z] counts as one\n  let pointPositionsCount = 0;\n  let pointFeaturesCount = 0;\n  let linePositionsCount = 0;\n  let linePathsCount = 0;\n  let lineFeaturesCount = 0;\n  let polygonPositionsCount = 0;\n  let polygonObjectsCount = 0;\n  let polygonRingsCount = 0;\n  let polygonFeaturesCount = 0;\n  const coordLengths = new Set();\n  const numericPropKeys = {};\n\n  for (const feature of features) {\n    const geometry = feature.geometry;\n    switch (geometry.type) {\n      case 'Point':\n        pointFeaturesCount++;\n        pointPositionsCount++;\n        coordLengths.add(geometry.coordinates.length);\n        break;\n      case 'MultiPoint':\n        pointFeaturesCount++;\n        pointPositionsCount += geometry.coordinates.length;\n        for (const point of geometry.coordinates) {\n          coordLengths.add(point.length);\n        }\n        break;\n      case 'LineString':\n        lineFeaturesCount++;\n        linePositionsCount += geometry.coordinates.length;\n        linePathsCount++;\n\n        for (const coord of geometry.coordinates) {\n          coordLengths.add(coord.length);\n        }\n        break;\n      case 'MultiLineString':\n        lineFeaturesCount++;\n        for (const line of geometry.coordinates) {\n          linePositionsCount += line.length;\n          linePathsCount++;\n\n          // eslint-disable-next-line max-depth\n          for (const coord of line) {\n            coordLengths.add(coord.length);\n          }\n        }\n        break;\n      case 'Polygon':\n        polygonFeaturesCount++;\n        polygonObjectsCount++;\n        polygonRingsCount += geometry.coordinates.length;\n        polygonPositionsCount += flatten(geometry.coordinates).length;\n\n        for (const coord of flatten(geometry.coordinates)) {\n          coordLengths.add(coord.length);\n        }\n        break;\n      case 'MultiPolygon':\n        polygonFeaturesCount++;\n        for (const polygon of geometry.coordinates) {\n          polygonObjectsCount++;\n          polygonRingsCount += polygon.length;\n          polygonPositionsCount += flatten(polygon).length;\n\n          // eslint-disable-next-line max-depth\n          for (const coord of flatten(polygon)) {\n            coordLengths.add(coord.length);\n          }\n        }\n        break;\n      default:\n        throw new Error(`Unsupported geometry type: ${geometry.type}`);\n    }\n\n    if (feature.properties) {\n      for (const key in feature.properties) {\n        const val = feature.properties[key];\n\n        // If property has not been seen before, or if property has been numeric\n        // in all previous features, check if numeric in this feature\n        // If not numeric, false is stored to prevent rechecking in the future\n        numericPropKeys[key] =\n          numericPropKeys[key] || numericPropKeys[key] === undefined\n            ? isNumeric(val)\n            : numericPropKeys[key];\n      }\n    }\n  }\n\n  return {\n    pointPositionsCount,\n    pointFeaturesCount,\n    linePositionsCount,\n    linePathsCount,\n    lineFeaturesCount,\n    coordLength: coordLengths.size > 0 && Math.max(...coordLengths),\n    polygonPositionsCount,\n    polygonObjectsCount,\n    polygonRingsCount,\n    polygonFeaturesCount,\n    // Array of keys whose values are always numeric\n    numericPropKeys: Object.keys(numericPropKeys).filter(k => numericPropKeys[k])\n  };\n}\n\n// Second scan over GeoJSON features\n// Fills coordinates into pre-allocated typed arrays\n// eslint-disable-next-line complexity\nfunction secondPass(features, firstPassData = {}, options = {}) {\n  const {\n    pointPositionsCount,\n    pointFeaturesCount,\n    linePositionsCount,\n    linePathsCount,\n    lineFeaturesCount,\n    polygonPositionsCount,\n    polygonObjectsCount,\n    polygonRingsCount,\n    polygonFeaturesCount\n  } = firstPassData;\n  const {coordLength, numericPropKeys, PositionDataType = Float32Array} = options;\n  const GlobalFeatureIdsDataType = features.length > 65535 ? Uint32Array : Uint16Array;\n  const points = {\n    positions: new PositionDataType(pointPositionsCount * coordLength),\n    globalFeatureIds: new GlobalFeatureIdsDataType(pointPositionsCount),\n    featureIds:\n      pointFeaturesCount > 65535\n        ? new Uint32Array(pointPositionsCount)\n        : new Uint16Array(pointPositionsCount),\n    numericProps: {},\n    properties: []\n  };\n  const lines = {\n    pathIndices:\n      linePositionsCount > 65535\n        ? new Uint32Array(linePathsCount + 1)\n        : new Uint16Array(linePathsCount + 1),\n    positions: new PositionDataType(linePositionsCount * coordLength),\n    globalFeatureIds: new GlobalFeatureIdsDataType(linePositionsCount),\n    featureIds:\n      lineFeaturesCount > 65535\n        ? new Uint32Array(linePositionsCount)\n        : new Uint16Array(linePositionsCount),\n    numericProps: {},\n    properties: []\n  };\n  const polygons = {\n    polygonIndices:\n      polygonPositionsCount > 65535\n        ? new Uint32Array(polygonObjectsCount + 1)\n        : new Uint16Array(polygonObjectsCount + 1),\n    primitivePolygonIndices:\n      polygonPositionsCount > 65535\n        ? new Uint32Array(polygonRingsCount + 1)\n        : new Uint16Array(polygonRingsCount + 1),\n    positions: new PositionDataType(polygonPositionsCount * coordLength),\n    globalFeatureIds: new GlobalFeatureIdsDataType(polygonPositionsCount),\n    featureIds:\n      polygonFeaturesCount > 65535\n        ? new Uint32Array(polygonPositionsCount)\n        : new Uint16Array(polygonPositionsCount),\n    numericProps: {},\n    properties: []\n  };\n\n  // Instantiate numeric properties arrays; one value per vertex\n  for (const object of [points, lines, polygons]) {\n    for (const propName of numericPropKeys) {\n      // If property has been numeric in all previous features in which the property existed, check\n      // if numeric in this feature\n      object.numericProps[propName] = new Float32Array(object.positions.length / coordLength);\n    }\n  }\n\n  // Set last element of path/polygon indices as positions length\n  lines.pathIndices[linePathsCount] = linePositionsCount;\n  polygons.polygonIndices[polygonObjectsCount] = polygonPositionsCount;\n  polygons.primitivePolygonIndices[polygonRingsCount] = polygonPositionsCount;\n\n  const indexMap = {\n    pointPosition: 0,\n    pointFeature: 0,\n    linePosition: 0,\n    linePath: 0,\n    lineFeature: 0,\n    polygonPosition: 0,\n    polygonObject: 0,\n    polygonRing: 0,\n    polygonFeature: 0,\n    feature: 0\n  };\n\n  for (const feature of features) {\n    const geometry = feature.geometry;\n    const properties = feature.properties || {};\n\n    switch (geometry.type) {\n      case 'Point':\n        handlePoint(geometry.coordinates, points, indexMap, coordLength, properties);\n        points.properties.push(keepStringProperties(properties, numericPropKeys));\n        indexMap.pointFeature++;\n        break;\n      case 'MultiPoint':\n        handleMultiPoint(geometry.coordinates, points, indexMap, coordLength, properties);\n        points.properties.push(keepStringProperties(properties, numericPropKeys));\n        indexMap.pointFeature++;\n        break;\n      case 'LineString':\n        handleLineString(geometry.coordinates, lines, indexMap, coordLength, properties);\n        lines.properties.push(keepStringProperties(properties, numericPropKeys));\n        indexMap.lineFeature++;\n        break;\n      case 'MultiLineString':\n        handleMultiLineString(geometry.coordinates, lines, indexMap, coordLength, properties);\n        lines.properties.push(keepStringProperties(properties, numericPropKeys));\n        indexMap.lineFeature++;\n        break;\n      case 'Polygon':\n        handlePolygon(geometry.coordinates, polygons, indexMap, coordLength, properties);\n        polygons.properties.push(keepStringProperties(properties, numericPropKeys));\n        indexMap.polygonFeature++;\n        break;\n      case 'MultiPolygon':\n        handleMultiPolygon(geometry.coordinates, polygons, indexMap, coordLength, properties);\n        polygons.properties.push(keepStringProperties(properties, numericPropKeys));\n        indexMap.polygonFeature++;\n        break;\n      default:\n        throw new Error('Invalid geometry type');\n    }\n\n    indexMap.feature++;\n  }\n\n  // Wrap each array in an accessor object with value and size keys\n  return makeAccessorObjects(points, lines, polygons, coordLength);\n}\n\n// Fills Point coordinates into points object of arrays\nfunction handlePoint(coords, points, indexMap, coordLength, properties) {\n  points.positions.set(coords, indexMap.pointPosition * coordLength);\n  points.globalFeatureIds[indexMap.pointPosition] = indexMap.feature;\n  points.featureIds[indexMap.pointPosition] = indexMap.pointFeature;\n\n  fillNumericProperties(points, properties, indexMap.pointPosition, 1);\n  indexMap.pointPosition++;\n}\n\n// Fills MultiPoint coordinates into points object of arrays\nfunction handleMultiPoint(coords, points, indexMap, coordLength, properties) {\n  for (const point of coords) {\n    handlePoint(point, points, indexMap, coordLength, properties);\n  }\n}\n\n// Fills LineString coordinates into lines object of arrays\nfunction handleLineString(coords, lines, indexMap, coordLength, properties) {\n  lines.pathIndices[indexMap.linePath] = indexMap.linePosition;\n  indexMap.linePath++;\n\n  fillCoords(lines.positions, coords, indexMap.linePosition, coordLength);\n\n  const nPositions = coords.length;\n  fillNumericProperties(lines, properties, indexMap.linePosition, nPositions);\n\n  lines.globalFeatureIds.set(\n    new Uint32Array(nPositions).fill(indexMap.feature),\n    indexMap.linePosition\n  );\n  lines.featureIds.set(\n    new Uint32Array(nPositions).fill(indexMap.lineFeature),\n    indexMap.linePosition\n  );\n  indexMap.linePosition += nPositions;\n}\n\n// Fills MultiLineString coordinates into lines object of arrays\nfunction handleMultiLineString(coords, lines, indexMap, coordLength, properties) {\n  for (const line of coords) {\n    handleLineString(line, lines, indexMap, coordLength, properties);\n  }\n}\n\n// Fills Polygon coordinates into polygons object of arrays\nfunction handlePolygon(coords, polygons, indexMap, coordLength, properties) {\n  polygons.polygonIndices[indexMap.polygonObject] = indexMap.polygonPosition;\n  indexMap.polygonObject++;\n\n  for (const ring of coords) {\n    polygons.primitivePolygonIndices[indexMap.polygonRing] = indexMap.polygonPosition;\n    indexMap.polygonRing++;\n\n    fillCoords(polygons.positions, ring, indexMap.polygonPosition, coordLength);\n\n    const nPositions = ring.length;\n    fillNumericProperties(polygons, properties, indexMap.polygonPosition, nPositions);\n\n    polygons.globalFeatureIds.set(\n      new Uint32Array(nPositions).fill(indexMap.feature),\n      indexMap.polygonPosition\n    );\n    polygons.featureIds.set(\n      new Uint32Array(nPositions).fill(indexMap.polygonFeature),\n      indexMap.polygonPosition\n    );\n    indexMap.polygonPosition += nPositions;\n  }\n}\n\n// Fills MultiPolygon coordinates into polygons object of arrays\nfunction handleMultiPolygon(coords, polygons, indexMap, coordLength, properties) {\n  for (const polygon of coords) {\n    handlePolygon(polygon, polygons, indexMap, coordLength, properties);\n  }\n}\n\n// Wrap each array in an accessor object with value and size keys\nfunction makeAccessorObjects(points, lines, polygons, coordLength) {\n  const returnObj = {\n    points: {\n      positions: {value: points.positions, size: coordLength},\n      globalFeatureIds: {value: points.globalFeatureIds, size: 1},\n      featureIds: {value: points.featureIds, size: 1},\n      numericProps: points.numericProps,\n      properties: points.properties\n    },\n    lines: {\n      pathIndices: {value: lines.pathIndices, size: 1},\n      positions: {value: lines.positions, size: coordLength},\n      globalFeatureIds: {value: lines.globalFeatureIds, size: 1},\n      featureIds: {value: lines.featureIds, size: 1},\n      numericProps: lines.numericProps,\n      properties: lines.properties\n    },\n    polygons: {\n      polygonIndices: {value: polygons.polygonIndices, size: 1},\n      primitivePolygonIndices: {value: polygons.primitivePolygonIndices, size: 1},\n      positions: {value: polygons.positions, size: coordLength},\n      globalFeatureIds: {value: polygons.globalFeatureIds, size: 1},\n      featureIds: {value: polygons.featureIds, size: 1},\n      numericProps: polygons.numericProps,\n      properties: polygons.properties\n    }\n  };\n\n  for (const geomType in returnObj) {\n    for (const numericProp in returnObj[geomType].numericProps) {\n      returnObj[geomType].numericProps[numericProp] = {\n        value: returnObj[geomType].numericProps[numericProp],\n        size: 1\n      };\n    }\n  }\n  return returnObj;\n}\n\n// Add numeric properties to object\nfunction fillNumericProperties(object, properties, index, length) {\n  for (const numericPropName in object.numericProps) {\n    if (numericPropName in properties) {\n      object.numericProps[numericPropName].set(\n        new Array(length).fill(properties[numericPropName]),\n        index\n      );\n    }\n  }\n}\n\n// Keep string properties in object\nfunction keepStringProperties(properties, numericKeys) {\n  const props = {};\n  for (const key in properties) {\n    if (!numericKeys.includes(key)) {\n      props[key] = properties[key];\n    }\n  }\n  return props;\n}\n\n// coords is expected to be a list of arrays, each with length 2-3\nfunction fillCoords(array, coords, startVertex, coordLength) {\n  let index = startVertex * coordLength;\n  for (const coord of coords) {\n    array.set(coord, index);\n    index += coordLength;\n  }\n}\n\nfunction flatten(arrays) {\n  return [].concat(...arrays);\n}\n\nfunction isNumeric(x) {\n  return Number.isFinite(x);\n}\n"]},"metadata":{},"sourceType":"module"}