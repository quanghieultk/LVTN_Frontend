{"ast":null,"code":"var _jsxFileName = \"D:\\\\LVTN\\\\LVTN\\\\cuisine-net\\\\src\\\\services\\\\gmap.js\",\n    _s = $RefreshSig$();\n\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport \"react-map-gl-geocoder/dist/mapbox-gl-geocoder.css\";\nimport React, { useState, useRef, useCallback, useEffect, Component } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport MapGL, { Marker, NavigationControl, FullscreenControl } from \"react-map-gl\";\nimport Geocoder from \"react-map-gl-geocoder\";\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport { locationActions } from './../actions/location.actions'; // Please be a decent human and don't abuse my Mapbox API token.\n// If you fork this sandbox, replace my API token with your own.\n// Ways to set Mapbox token: https://uber.github.io/react-map-gl/#/Documentation/getting-started/about-mapbox-tokens\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoidG9hbmRvIiwiYSI6ImNrbThscTh4cjBrNnQycHF5MWJqd29jaDQifQ.LNubsbmqGfZhCCRymL-A2g';\nexport default function GMap() {\n  _s();\n\n  const locate = useSelector(state => state.location);\n  const dispatch = useDispatch();\n  const [viewport, setViewport] = useState({\n    width: \"100%\",\n    height: \"100%\",\n    latitude: 0,\n    longitude: 0,\n    zoom: 15\n  });\n  const [position, setPosition] = useState({\n    latitude: 0,\n    longitude: 0\n  });\n  const navStyle = {\n    position: \"absolute\",\n    top: 36,\n    left: 0,\n    padding: \"10px\"\n  };\n  const fullscreenControlStyle = {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    padding: \"10px\"\n  };\n  const mapRef = useRef();\n  const geocoderContainerRef = useRef();\n  const handleViewportChange = useCallback(newViewport => setViewport(newViewport), []);\n  const handleGeocoderViewportChange = useCallback(newViewport => {\n    const geocoderDefaultOverrides = {\n      transitionDuration: 1000\n    };\n    return handleViewportChange({ ...newViewport,\n      ...geocoderDefaultOverrides\n    });\n  }, [handleViewportChange]);\n\n  function makerOnClick(e) {\n    setPosition({\n      latitude: e.lngLat[1],\n      longitude: e.lngLat[0]\n    });\n  }\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(function (position) {\n      setViewport({\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude,\n        zoom: 15\n      });\n      setPosition({\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude\n      });\n    }, function (error) {\n      console.error(\"Error Code = \" + error.code + \" - \" + error.message);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"100%\"\n    },\n    children: /*#__PURE__*/_jsxDEV(MapGL, {\n      ref: mapRef,\n      ...viewport,\n      width: \"100%\",\n      height: \"100%\",\n      onViewportChange: handleViewportChange,\n      mapboxApiAccessToken: MAPBOX_TOKEN // onResult={(result)=>{console.log(result);dispatch(locationActions.setLocation(result.result.center,result.result.place_name));}}\n      ,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav\",\n        style: navStyle,\n        children: /*#__PURE__*/_jsxDEV(NavigationControl, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fullscreen\",\n        style: fullscreenControlStyle,\n        children: /*#__PURE__*/_jsxDEV(FullscreenControl, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Geocoder, {\n        mapRef: mapRef,\n        onViewportChange: handleGeocoderViewportChange,\n        containerRef: geocoderContainerRef,\n        mapboxApiAccessToken: MAPBOX_TOKEN,\n        position: \"top-right\" // onResult={(result)=>dispatch(locationActions.setLocation(result.result.center,result.result.place_name))}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Marker, {\n        longitude: position.longitude,\n        latitude: position.latitude,\n        children: /*#__PURE__*/_jsxDEV(LocationOnIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 6\n        }, this)\n      }, \"marker_1\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 3\n  }, this);\n}\n\n_s(GMap, \"xQubUG8lkfLQtN+2lKKb2HRDomM=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = GMap;\n; // export default class Gmap extends Component {\n// \tstate = {\n// \t  viewport: {\n// \t\twidth: 400,\n// \t\theight: 400,\n// \t\tlatitude: 37.7577,\n// \t\tlongitude: -122.4376,\n// \t\tzoom: 8\n// \t  },\n// \t  searchResultLayer: null\n// \t};\n// \tmapRef = React.createRef();\n// \tcomponentDidMount() {\n// \t  window.addEventListener(\"resize\", this.resize);\n// \t  this.resize();\n// \t}\n// \tcomponentWillUnmount() {\n// \t  window.removeEventListener(\"resize\", this.resize);\n// \t}\n// \tresize = () => {\n// \t  this.handleViewportChange({\n// \t\twidth: window.innerWidth,\n// \t\theight: window.innerHeight\n// \t  });\n// \t};\n// \thandleViewportChange = (viewport) => {\n// \t  this.setState({\n// \t\tviewport: { ...this.state.viewport, ...viewport }\n// \t  });\n// \t};\n// \t// if you are happy with Geocoder default settings, you can just use handleViewportChange directly\n// \thandleGeocoderViewportChange = (viewport) => {\n// \t  const geocoderDefaultOverrides = { transitionDuration: 1000 };\n// \t  return this.handleViewportChange({\n// \t\t...viewport,\n// \t\t...geocoderDefaultOverrides\n// \t  });\n// \t};\n// \thandleOnResult = (event) => {\n// \t};\n// \trender() {\n// \t  const { viewport, searchResultLayer } = this.state;\n// \t  return (\n// \t\t<MapGL\n// \t\t  ref={this.mapRef}\n// \t\t  {...viewport}\n// \t\t  onViewportChange={this.handleViewportChange}\n// \t\t  mapboxApiAccessToken={MAPBOX_TOKEN}\n// \t\t>\n// \t\t  <Geocoder\n// \t\t\tmapRef={this.mapRef}\n// \t\t\tonResult={this.handleOnResult}\n// \t\t\tonViewportChange={this.handleGeocoderViewportChange}\n// \t\t\tmapboxApiAccessToken={MAPBOX_TOKEN}\n// \t\t  />\n// \t\t</MapGL>\n// \t  );\n// \t}\n//   }\n\nvar _c;\n\n$RefreshReg$(_c, \"GMap\");","map":{"version":3,"sources":["D:/LVTN/LVTN/cuisine-net/src/services/gmap.js"],"names":["React","useState","useRef","useCallback","useEffect","Component","useDispatch","useSelector","MapGL","Marker","NavigationControl","FullscreenControl","Geocoder","LocationOnIcon","locationActions","MAPBOX_TOKEN","GMap","locate","state","location","dispatch","viewport","setViewport","width","height","latitude","longitude","zoom","position","setPosition","navStyle","top","left","padding","fullscreenControlStyle","mapRef","geocoderContainerRef","handleViewportChange","newViewport","handleGeocoderViewportChange","geocoderDefaultOverrides","transitionDuration","makerOnClick","e","lngLat","navigator","geolocation","getCurrentPosition","coords","error","console","code","message"],"mappings":"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","sourcesContent":["import \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport \"react-map-gl-geocoder/dist/mapbox-gl-geocoder.css\";\r\nimport React, { useState, useRef, useCallback ,useEffect, Component } from \"react\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport MapGL, { Marker, NavigationControl, FullscreenControl } from \"react-map-gl\";\r\nimport Geocoder from \"react-map-gl-geocoder\";\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\r\n\r\nimport  {locationActions} from './../actions/location.actions';\r\n// Please be a decent human and don't abuse my Mapbox API token.\r\n// If you fork this sandbox, replace my API token with your own.\r\n// Ways to set Mapbox token: https://uber.github.io/react-map-gl/#/Documentation/getting-started/about-mapbox-tokens\r\nconst MAPBOX_TOKEN =\r\n\t'pk.eyJ1IjoidG9hbmRvIiwiYSI6ImNrbThscTh4cjBrNnQycHF5MWJqd29jaDQifQ.LNubsbmqGfZhCCRymL-A2g';\r\n\r\nexport default function GMap() {\r\n\r\n\tconst locate=useSelector(state=>state.location);\r\n\tconst dispatch=useDispatch();\r\n\tconst [viewport, setViewport] = useState({\r\n\t\twidth: \"100%\",\r\n\t\theight: \"100%\",\r\n\t\tlatitude: 0,\r\n\t\tlongitude: 0,\r\n\t\tzoom: 15\r\n\t});\r\n\tconst [position, setPosition] = useState({\r\n\t\tlatitude: 0,\r\n\t\tlongitude: 0\r\n\t})\r\n\tconst navStyle = {\r\n\t\tposition: \"absolute\",\r\n\t\ttop: 36,\r\n\t\tleft: 0,\r\n\t\tpadding: \"10px\"\r\n\t};\r\n\tconst fullscreenControlStyle = {\r\n\t\tposition: \"absolute\",\r\n\t\ttop: 0,\r\n\t\tleft: 0,\r\n\t\tpadding: \"10px\"\r\n\t};\r\n\tconst mapRef = useRef();\r\n\tconst geocoderContainerRef = useRef();\r\n\tconst handleViewportChange = useCallback(\r\n\t\t(newViewport) => setViewport(newViewport),\r\n\t\t[]\r\n\t);\r\n\t\r\n\tconst handleGeocoderViewportChange = useCallback(\r\n\t\t(newViewport) => {\r\n\t\t\tconst geocoderDefaultOverrides = { transitionDuration: 1000 };\r\n\r\n\t\t\treturn handleViewportChange({\r\n\t\t\t\t...newViewport,\r\n\t\t\t\t...geocoderDefaultOverrides\r\n\t\t\t});\r\n\t\t},\r\n\t\t[handleViewportChange]\r\n\t);\r\n\tfunction makerOnClick(e) {\r\n\t\tsetPosition({\r\n\t\t\tlatitude: e.lngLat[1],\r\n\t\t\tlongitude: e.lngLat[0]\r\n\t\t})\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n        navigator.geolocation.getCurrentPosition(\r\n\t\t\tfunction (position) {\r\n\t\t\t\tsetViewport({\r\n\t\t\t\t\tlatitude: position.coords.latitude,\r\n\t\t\t\t\tlongitude: position.coords.longitude,\r\n\t\t\t\t\tzoom: 15\r\n\t\t\t\t})\r\n\t\t\t\tsetPosition({\r\n\t\t\t\t\tlatitude: position.coords.latitude,\r\n\t\t\t\t\tlongitude: position.coords.longitude,\r\n\t\t\t\t})\r\n\t\t\t},\r\n\t\t\tfunction (error) {\r\n\t\t\t\tconsole.error(\"Error Code = \" + error.code + \" - \" + error.message);\r\n\t\t\t}\r\n\t\t);\r\n    }, []);\r\n\r\n\treturn (\r\n\t\t<div style={{ height: \"100%\" }}>\r\n\t\t\t<MapGL\r\n\t\t\t\tref={mapRef}\r\n\t\t\t\t{...viewport}\r\n\t\t\t\twidth=\"100%\"\r\n\t\t\t\theight=\"100%\"\r\n\t\t\t\tonViewportChange={handleViewportChange}\r\n\t\t\t\tmapboxApiAccessToken={MAPBOX_TOKEN}\r\n\t\t\t\t// onResult={(result)=>{console.log(result);dispatch(locationActions.setLocation(result.result.center,result.result.place_name));}}\r\n\r\n\t\t\t>\r\n\t\t\t\t<div className=\"nav\" style={navStyle}>\r\n\t\t\t\t\t<NavigationControl />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"fullscreen\" style={fullscreenControlStyle}>\r\n\t\t\t\t\t<FullscreenControl />\r\n\t\t\t\t</div>\r\n\t\t\t\t<Geocoder\r\n\t\t\t\t\tmapRef={mapRef}\r\n\t\t\t\t\tonViewportChange={handleGeocoderViewportChange}\r\n\t\t\t\t\tcontainerRef={geocoderContainerRef}\r\n\t\t\t\t\tmapboxApiAccessToken={MAPBOX_TOKEN}\r\n\t\t\t\t\tposition=\"top-right\"\r\n\t\t\t\t\t// onResult={(result)=>dispatch(locationActions.setLocation(result.result.center,result.result.place_name))}\r\n\t\t\t\t/>\r\n\t\t\t\t<Marker\r\n\t\t\t\t\tkey=\"marker_1\"\r\n\t\t\t\t\tlongitude={position.longitude}\r\n\t\t\t\t\tlatitude={position.latitude}\r\n\t\t\t\t>\r\n\t\t\t\t\t<LocationOnIcon></LocationOnIcon>\r\n\t\t\t\t</Marker>\r\n\t\t\t</MapGL>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n\r\n// export default class Gmap extends Component {\r\n// \tstate = {\r\n// \t  viewport: {\r\n// \t\twidth: 400,\r\n// \t\theight: 400,\r\n// \t\tlatitude: 37.7577,\r\n// \t\tlongitude: -122.4376,\r\n// \t\tzoom: 8\r\n// \t  },\r\n// \t  searchResultLayer: null\r\n// \t};\r\n  \r\n// \tmapRef = React.createRef();\r\n  \r\n// \tcomponentDidMount() {\r\n// \t  window.addEventListener(\"resize\", this.resize);\r\n// \t  this.resize();\r\n// \t}\r\n  \r\n// \tcomponentWillUnmount() {\r\n// \t  window.removeEventListener(\"resize\", this.resize);\r\n// \t}\r\n  \r\n// \tresize = () => {\r\n// \t  this.handleViewportChange({\r\n// \t\twidth: window.innerWidth,\r\n// \t\theight: window.innerHeight\r\n// \t  });\r\n// \t};\r\n  \r\n// \thandleViewportChange = (viewport) => {\r\n// \t  this.setState({\r\n// \t\tviewport: { ...this.state.viewport, ...viewport }\r\n// \t  });\r\n// \t};\r\n  \r\n// \t// if you are happy with Geocoder default settings, you can just use handleViewportChange directly\r\n// \thandleGeocoderViewportChange = (viewport) => {\r\n// \t  const geocoderDefaultOverrides = { transitionDuration: 1000 };\r\n  \r\n// \t  return this.handleViewportChange({\r\n// \t\t...viewport,\r\n// \t\t...geocoderDefaultOverrides\r\n// \t  });\r\n// \t};\r\n  \r\n// \thandleOnResult = (event) => {\r\n\r\n// \t};\r\n  \r\n// \trender() {\r\n// \t  const { viewport, searchResultLayer } = this.state;\r\n  \r\n// \t  return (\r\n// \t\t<MapGL\r\n// \t\t  ref={this.mapRef}\r\n// \t\t  {...viewport}\r\n// \t\t  onViewportChange={this.handleViewportChange}\r\n// \t\t  mapboxApiAccessToken={MAPBOX_TOKEN}\r\n// \t\t>\r\n// \t\t  <Geocoder\r\n// \t\t\tmapRef={this.mapRef}\r\n// \t\t\tonResult={this.handleOnResult}\r\n// \t\t\tonViewportChange={this.handleGeocoderViewportChange}\r\n// \t\t\tmapboxApiAccessToken={MAPBOX_TOKEN}\r\n// \t\t  />\r\n// \t\t</MapGL>\r\n// \t  );\r\n// \t}\r\n//   }\r\n"]},"metadata":{},"sourceType":"module"}