{"ast":null,"code":"import { notificationConstants } from \"../constants/notification.constants\";\nimport { notificatonService } from \"../services/notification.service\";\nexport const notificationActions = {\n  toggleNotificationPopup,\n  closeNotificationPopup,\n  addNotification,\n  fetchNotifications,\n  removeNotification,\n  initNotifications\n};\n\nfunction readNotifications(notificationIds) {\n  notificatonService.readNotifications(notificationIds).then(res => {\n    console.log(res);\n  }).catch(error => {\n    console.log(error);\n  });\n}\n\nfunction initNotifications() {\n  return dispatch => {\n    notificatonService.fetchNotifications(null, 0).then(response => {\n      const notifications = response.data.data.data;\n      const total = notifications.length;\n      dispatch(success(notifications, total, true));\n    });\n  };\n\n  function success(notifications, total, initialFetch) {\n    return {\n      type: notificationConstants.FETCH_NOTIFICATIONS_SUCCESS,\n      notifications,\n      total,\n      initialFetch\n    };\n  }\n}\n\nfunction fetchNotifications(queryOptions, notificationIds, page) {\n  return dispatch => {\n    notificatonService.fetchNotifications(queryOptions, page).then(response => {\n      if (queryOptions.initialFetch) {\n        const notifications = response.data.data.data;\n        const total = notifications.length;\n        dispatch(success(notifications, total, queryOptions.initialFetch));\n        const ids = notifications.filter(e => !e.read).map(e => e._id).concat(notificationIds);\n        const uniqueIds = ids.filter((item, index) => ids.indexOf(item) === index).filter(item => item !== undefined);\n        console.log(uniqueIds);\n      } else {\n        const notifications = response.data.data.data;\n        const total = notifications.length;\n        dispatch(success(notifications));\n        const ids = notifications.filter(e => !e.read).map(e => e._id).concat(notificationIds);\n        const uniqueIds = ids.filter((item, index) => ids.indexOf(item) === index).filter(item => item !== undefined);\n        console.log(uniqueIds); // readNotifications(uniqueIds);\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  function success(notifications, total, initialFetch) {\n    return {\n      type: notificationConstants.FETCH_NOTIFICATIONS_SUCCESS,\n      notifications,\n      total,\n      initialFetch\n    };\n  }\n}\n\nfunction toggleNotificationPopup() {\n  return dispatch => {\n    dispatch({\n      type: notificationConstants.TOGGLE_NOTIFICATION_POPUP\n    });\n  };\n}\n\nfunction closeNotificationPopup() {\n  return dispatch => {\n    dispatch({\n      type: notificationConstants.CLOSE_NOTIFICATION_POPUP\n    });\n  };\n}\n\nfunction addNotification(data) {\n  return dispatch => {\n    dispatch({\n      type: notificationConstants.ADD_NOTIFICATION,\n      data\n    });\n  };\n}\n\nfunction removeNotification(data) {\n  return dispatch => {\n    dispatch({\n      type: notificationConstants.REMOVE_NOTIFICATION,\n      data\n    });\n  };\n}","map":{"version":3,"sources":["D:/LVTN/LVTN/cuisine-net/src/actions/notification.action.js"],"names":["notificationConstants","notificatonService","notificationActions","toggleNotificationPopup","closeNotificationPopup","addNotification","fetchNotifications","removeNotification","initNotifications","readNotifications","notificationIds","then","res","console","log","catch","error","dispatch","response","notifications","data","total","length","success","initialFetch","type","FETCH_NOTIFICATIONS_SUCCESS","queryOptions","page","ids","filter","e","read","map","_id","concat","uniqueIds","item","index","indexOf","undefined","err","TOGGLE_NOTIFICATION_POPUP","CLOSE_NOTIFICATION_POPUP","ADD_NOTIFICATION","REMOVE_NOTIFICATION"],"mappings":"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","sourcesContent":["import { notificationConstants } from \"../constants/notification.constants\";\r\nimport { notificatonService } from \"../services/notification.service\";\r\n\r\nexport const notificationActions = {\r\n    toggleNotificationPopup,\r\n    closeNotificationPopup,\r\n    addNotification,\r\n    fetchNotifications,\r\n    removeNotification,\r\n    initNotifications\r\n}\r\n\r\nfunction readNotifications(notificationIds) {\r\n    notificatonService.readNotifications(notificationIds).then(\r\n        (res) => { console.log(res) }\r\n    ).catch(error => {\r\n        console.log(error);\r\n    });\r\n}\r\n\r\nfunction initNotifications() {\r\n    return dispatch => {\r\n        notificatonService.fetchNotifications(null, 0).then(\r\n            response => {\r\n                const notifications = response.data.data.data;\r\n                const total = notifications.length;\r\n                dispatch(success(notifications, total, true));\r\n            }\r\n        )\r\n    }\r\n    function success(notifications, total, initialFetch) {\r\n        return {\r\n            type: notificationConstants.FETCH_NOTIFICATIONS_SUCCESS,\r\n            notifications,\r\n            total,\r\n            initialFetch\r\n        };\r\n    }\r\n}\r\n\r\nfunction fetchNotifications(queryOptions, notificationIds, page) {\r\n    return dispatch => {\r\n        notificatonService.fetchNotifications(queryOptions, page).then(\r\n            response => {\r\n                if (queryOptions.initialFetch) {\r\n                    const notifications = response.data.data.data;\r\n                    const total = notifications.length;\r\n                    dispatch(success(notifications, total, queryOptions.initialFetch));\r\n                    const ids = notifications\r\n                        .filter(e => !e.read)\r\n                        .map(e => e._id)\r\n                        .concat(notificationIds);\r\n                    const uniqueIds = ids\r\n                        .filter((item, index) => ids.indexOf(item) === index)\r\n                        .filter(item => item !== undefined);\r\n                    console.log(uniqueIds)\r\n                } else {\r\n                    const notifications = response.data.data.data;\r\n                    const total = notifications.length;\r\n                    dispatch(success(notifications));\r\n                    const ids = notifications\r\n                        .filter(e => !e.read)\r\n                        .map(e => e._id)\r\n                        .concat(notificationIds);\r\n                    const uniqueIds = ids\r\n                        .filter((item, index) => ids.indexOf(item) === index)\r\n                        .filter(item => item !== undefined);\r\n                    console.log(uniqueIds)\r\n                    // readNotifications(uniqueIds);\r\n                }\r\n            }\r\n        ).catch((err) => {\r\n            console.log(err)\r\n        })\r\n    }\r\n    function success(notifications, total, initialFetch) {\r\n        return {\r\n            type: notificationConstants.FETCH_NOTIFICATIONS_SUCCESS,\r\n            notifications,\r\n            total,\r\n            initialFetch\r\n        };\r\n    }\r\n}\r\n\r\nfunction toggleNotificationPopup() {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: notificationConstants.TOGGLE_NOTIFICATION_POPUP\r\n        });\r\n    };\r\n}\r\n\r\nfunction closeNotificationPopup() {\r\n    return dispatch => {\r\n        dispatch({ type: notificationConstants.CLOSE_NOTIFICATION_POPUP });\r\n    };\r\n}\r\n\r\nfunction addNotification(data) {\r\n    return dispatch => {\r\n        dispatch({ type: notificationConstants.ADD_NOTIFICATION, data });\r\n    };\r\n}\r\n\r\nfunction removeNotification(data) {\r\n    return dispatch => {\r\n        dispatch({ type: notificationConstants.REMOVE_NOTIFICATION, data })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}