{"ast":null,"code":"import { assert } from '@loaders.gl/loader-utils';\nimport { selectLoaderSync } from './select-loader';\nimport { isLoaderObject } from '../loader-utils/normalize-loader';\nimport { normalizeOptions } from '../loader-utils/option-utils';\nimport { getArrayBufferOrStringFromDataSync } from '../loader-utils/get-data';\nimport { getLoaders, getLoaderContext } from '../loader-utils/context-utils';\nimport { getResourceUrlAndType } from '../utils/resource-utils';\nexport function parseSync(data, loaders, options, context) {\n  assert(!context || typeof context !== 'string', 'parseSync no longer accepts final url');\n\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  options = options || {};\n  var candidateLoaders = getLoaders(loaders, context);\n  var loader = selectLoaderSync(data, candidateLoaders, options);\n\n  if (!loader) {\n    return null;\n  }\n\n  options = normalizeOptions(options, loader, candidateLoaders);\n\n  var _getResourceUrlAndTyp = getResourceUrlAndType(data),\n      url = _getResourceUrlAndTyp.url;\n\n  context = getLoaderContext({\n    url: url,\n    parseSync: parseSync,\n    loaders: loaders\n  }, options);\n  return parseWithLoaderSync(loader, data, options, context);\n}\n\nfunction parseWithLoaderSync(loader, data, options, context) {\n  data = getArrayBufferOrStringFromDataSync(data, loader);\n\n  if (loader.parseTextSync && typeof data === 'string') {\n    return loader.parseTextSync(data, options, context, loader);\n  }\n\n  if (loader.parseSync) {\n    return loader.parseSync(data, options, context, loader);\n  }\n\n  throw new Error(\"\".concat(loader.name, \" loader: 'parseSync' not supported by this loader, use 'parse' instead. \").concat(context.url || ''));\n}","map":{"version":3,"sources":["../../../../src/lib/api/parse-sync.js"],"names":["assert","Array","isLoaderObject","context","options","loaders","candidateLoaders","getLoaders","loader","selectLoaderSync","normalizeOptions","url","getResourceUrlAndType","getLoaderContext","parseSync","parseWithLoaderSync","data","getArrayBufferOrStringFromDataSync"],"mappings":"AAAA,SAAA,MAAA,QAAA,0BAAA;AACA,SAAA,gBAAA,QAAA,iBAAA;AACA,SAAA,cAAA,QAAA,kCAAA;AACA,SAAA,gBAAA,QAAA,8BAAA;AACA,SAAA,kCAAA,QAAA,0BAAA;AACA,SAAA,UAAA,EAAA,gBAAA,QAAA,+BAAA;AACA,SAAA,qBAAA,QAAA,yBAAA;AAEA,OAAO,SAAA,SAAA,CAAA,IAAA,EAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAoD;AACzDA,EAAAA,MAAM,CAAC,CAAA,OAAA,IAAY,OAAA,OAAA,KAAb,QAAA,EAANA,uCAAM,CAANA;;AAIA,MAAI,CAACC,KAAK,CAALA,OAAAA,CAAD,OAACA,CAAD,IAA2B,CAACC,cAAc,CAA9C,OAA8C,CAA9C,EAAyD;AACvDC,IAAAA,OAAO,GAAPA,OAAAA;AACAC,IAAAA,OAAO,GAAPA,OAAAA;AACAC,IAAAA,OAAO,GAAPA,IAAAA;AACD;;AAEDD,EAAAA,OAAO,GAAGA,OAAO,IAAjBA,EAAAA;AAIA,MAAME,gBAAgB,GAAGC,UAAU,CAAA,OAAA,EAAnC,OAAmC,CAAnC;AACA,MAAMC,MAAM,GAAGC,gBAAgB,CAAA,IAAA,EAAA,gBAAA,EAA/B,OAA+B,CAA/B;;AAEA,MAAI,CAAJ,MAAA,EAAa;AACX,WAAA,IAAA;AACD;;AAGDL,EAAAA,OAAO,GAAGM,gBAAgB,CAAA,OAAA,EAAA,MAAA,EAA1BN,gBAA0B,CAA1BA;;AAvByD,MAAA,qBAAA,GA0B3CQ,qBAAqB,CA1BsB,IA0BtB,CA1BsB;AAAA,MA0BlDD,GA1BkD,GAAA,qBAAA,CAAA,GAAA;;AA4BzDR,EAAAA,OAAO,GAAGU,gBAAgB,CAAC;AAACF,IAAAA,GAAG,EAAJ,GAAA;AAAMG,IAAAA,SAAS,EAAf,SAAA;AAAiBT,IAAAA,OAAO,EAAPA;AAAjB,GAAD,EAA1BF,OAA0B,CAA1BA;AAEA,SAAOY,mBAAmB,CAAA,MAAA,EAAA,IAAA,EAAA,OAAA,EAA1B,OAA0B,CAA1B;AACD;;AAGD,SAAA,mBAAA,CAAA,MAAA,EAAA,IAAA,EAAA,OAAA,EAAA,OAAA,EAA6D;AAC3DC,EAAAA,IAAI,GAAGC,kCAAkC,CAAA,IAAA,EAAzCD,MAAyC,CAAzCA;;AAEA,MAAIR,MAAM,CAANA,aAAAA,IAAwB,OAAA,IAAA,KAA5B,QAAA,EAAsD;AACpD,WAAOA,MAAM,CAANA,aAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAAAA,OAAAA,EAAP,MAAOA,CAAP;AACD;;AAED,MAAIA,MAAM,CAAV,SAAA,EAAsB;AACpB,WAAOA,MAAM,CAANA,SAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAAAA,OAAAA,EAAP,MAAOA,CAAP;AACD;;AAGD,QAAM,IAAA,KAAA,CAAA,GAAA,MAAA,CAEFA,MAAM,CAFJ,IAAA,EAAA,0EAAA,EAAA,MAAA,CAGuEL,OAAO,CAAPA,GAAAA,IAH7E,EAAM,CAAA,CAAN;AAKD","sourcesContent":["import {assert} from '@loaders.gl/loader-utils';\nimport {selectLoaderSync} from './select-loader';\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {normalizeOptions} from '../loader-utils/option-utils';\nimport {getArrayBufferOrStringFromDataSync} from '../loader-utils/get-data';\nimport {getLoaders, getLoaderContext} from '../loader-utils/context-utils';\nimport {getResourceUrlAndType} from '../utils/resource-utils';\n\nexport function parseSync(data, loaders, options, context) {\n  assert(!context || typeof context !== 'string', 'parseSync no longer accepts final url');\n\n  // Signature: parseSync(data, options)\n  // Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  options = options || {};\n\n  // Chooses a loader (and normalizes it)\n  // Also use any loaders in the context, new loaders take priority\n  const candidateLoaders = getLoaders(loaders, context);\n  const loader = selectLoaderSync(data, candidateLoaders, options);\n  // Note: if nothrow option was set, it is possible that no loader was found, if so just return null\n  if (!loader) {\n    return null;\n  }\n\n  // Normalize options\n  options = normalizeOptions(options, loader, candidateLoaders);\n\n  // Extract a url for auto detection\n  const {url} = getResourceUrlAndType(data);\n\n  context = getLoaderContext({url, parseSync, loaders}, options);\n\n  return parseWithLoaderSync(loader, data, options, context);\n}\n\n// TODO - should accept loader.parseSync/parse and generate 1 chunk asyncIterator\nfunction parseWithLoaderSync(loader, data, options, context) {\n  data = getArrayBufferOrStringFromDataSync(data, loader);\n\n  if (loader.parseTextSync && typeof data === 'string') {\n    return loader.parseTextSync(data, options, context, loader);\n  }\n\n  if (loader.parseSync) {\n    return loader.parseSync(data, options, context, loader);\n  }\n\n  // TBD - If synchronous parser not available, return null\n  throw new Error(\n    `${\n      loader.name\n    } loader: 'parseSync' not supported by this loader, use 'parse' instead. ${context.url || ''}`\n  );\n}\n"]},"metadata":{},"sourceType":"module"}