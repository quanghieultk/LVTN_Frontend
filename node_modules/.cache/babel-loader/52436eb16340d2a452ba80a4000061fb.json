{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport LayersPass from './layers-pass';\nimport { withParameters } from '@luma.gl/core';\nvar PICKING_PARAMETERS = {\n  blendFunc: [1, 0, 32771, 0],\n  blendEquation: 32774\n};\n\nvar PickLayersPass = function (_LayersPass) {\n  _inherits(PickLayersPass, _LayersPass);\n\n  var _super = _createSuper(PickLayersPass);\n\n  function PickLayersPass() {\n    _classCallCheck(this, PickLayersPass);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PickLayersPass, [{\n    key: \"render\",\n    value: function render(props) {\n      if (props.pickingFBO) {\n        this.useAlpha = true;\n\n        this._drawPickingBuffer(props);\n      } else {\n        this.useAlpha = false;\n\n        _get(_getPrototypeOf(PickLayersPass.prototype), \"render\", this).call(this, props);\n      }\n    }\n  }, {\n    key: \"_drawPickingBuffer\",\n    value: function _drawPickingBuffer(_ref) {\n      var _this = this;\n\n      var layers = _ref.layers,\n          layerFilter = _ref.layerFilter,\n          views = _ref.views,\n          viewports = _ref.viewports,\n          onViewportActive = _ref.onViewportActive,\n          pickingFBO = _ref.pickingFBO,\n          _ref$deviceRect = _ref.deviceRect,\n          x = _ref$deviceRect.x,\n          y = _ref$deviceRect.y,\n          width = _ref$deviceRect.width,\n          height = _ref$deviceRect.height,\n          _ref$pass = _ref.pass,\n          pass = _ref$pass === void 0 ? 'picking' : _ref$pass,\n          redrawReason = _ref.redrawReason,\n          pickZ = _ref.pickZ;\n      var gl = this.gl;\n      this.pickZ = pickZ;\n      return withParameters(gl, _objectSpread(_objectSpread({\n        scissorTest: true,\n        scissor: [x, y, width, height],\n        clearColor: [0, 0, 0, 0],\n        depthMask: true,\n        depthTest: true,\n        depthRange: [0, 1],\n        colorMask: [true, true, true, true]\n      }, PICKING_PARAMETERS), {}, {\n        blend: !pickZ\n      }), function () {\n        _get(_getPrototypeOf(PickLayersPass.prototype), \"render\", _this).call(_this, {\n          target: pickingFBO,\n          layers: layers,\n          layerFilter: layerFilter,\n          views: views,\n          viewports: viewports,\n          onViewportActive: onViewportActive,\n          pass: pass,\n          redrawReason: redrawReason\n        });\n      });\n    }\n  }, {\n    key: \"shouldDrawLayer\",\n    value: function shouldDrawLayer(layer) {\n      return layer.props.pickable;\n    }\n  }, {\n    key: \"getModuleParameters\",\n    value: function getModuleParameters() {\n      return {\n        pickingActive: 1,\n        pickingAttribute: this.pickZ,\n        lightSources: {}\n      };\n    }\n  }, {\n    key: \"getLayerParameters\",\n    value: function getLayerParameters(layer, layerIndex) {\n      var pickParameters = this.pickZ ? {\n        blend: false\n      } : _objectSpread(_objectSpread({}, PICKING_PARAMETERS), {}, {\n        blend: true,\n        blendColor: [0, 0, 0, this.useAlpha ? (layerIndex + 1) / 255 : 1]\n      });\n      return Object.assign({}, layer.props.parameters, pickParameters);\n    }\n  }]);\n\n  return PickLayersPass;\n}(LayersPass);\n\nexport { PickLayersPass as default };","map":{"version":3,"sources":["../../../src/passes/pick-layers-pass.js"],"names":["PICKING_PARAMETERS","blendFunc","blendEquation","PickLayersPass","LayersPass","props","layers","layerFilter","views","viewports","onViewportActive","pickingFBO","deviceRect","x","y","width","height","pass","redrawReason","pickZ","gl","withParameters","scissorTest","scissor","clearColor","depthMask","depthTest","depthRange","colorMask","blend","target","layer","pickingActive","pickingAttribute","lightSources","layerIndex","pickParameters","blendColor","Object"],"mappings":"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","sourcesContent":["import LayersPass from './layers-pass';\nimport {withParameters} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\n\nconst PICKING_PARAMETERS = {\n  blendFunc: [GL.ONE, GL.ZERO, GL.CONSTANT_ALPHA, GL.ZERO],\n  blendEquation: GL.FUNC_ADD\n};\n\nexport default class PickLayersPass extends LayersPass {\n  render(props) {\n    if (props.pickingFBO) {\n      // When drawing into an off-screen buffer, use the alpha channel to encode layer index\n      this.useAlpha = true;\n      this._drawPickingBuffer(props);\n    } else {\n      // When drawing to screen (debug mode), do not use the alpha channel so that result is always visible\n      this.useAlpha = false;\n      super.render(props);\n    }\n  }\n\n  // Private\n  // Draws list of layers and viewports into the picking buffer\n  // Note: does not sample the buffer, that has to be done by the caller\n  _drawPickingBuffer({\n    layers,\n    layerFilter,\n    views,\n    viewports,\n    onViewportActive,\n    pickingFBO,\n    deviceRect: {x, y, width, height},\n    pass = 'picking',\n    redrawReason,\n    pickZ\n  }) {\n    const gl = this.gl;\n    this.pickZ = pickZ;\n\n    // Make sure we clear scissor test and fbo bindings in case of exceptions\n    // We are only interested in one pixel, no need to render anything else\n    // Note that the callback here is called synchronously.\n    // Set blend mode for picking\n    // always overwrite existing pixel with [r,g,b,layerIndex]\n    return withParameters(\n      gl,\n      {\n        scissorTest: true,\n        scissor: [x, y, width, height],\n        clearColor: [0, 0, 0, 0],\n        // When used as Mapbox custom layer, the context state may be dirty\n        // TODO - Remove when mapbox fixes this issue\n        // https://github.com/mapbox/mapbox-gl-js/issues/7801\n        depthMask: true,\n        depthTest: true,\n        depthRange: [0, 1],\n        colorMask: [true, true, true, true],\n        // Blending\n        ...PICKING_PARAMETERS,\n        blend: !pickZ\n      },\n      () => {\n        super.render({\n          target: pickingFBO,\n          layers,\n          layerFilter,\n          views,\n          viewports,\n          onViewportActive,\n          pass,\n          redrawReason\n        });\n      }\n    );\n  }\n\n  // PRIVATE\n  shouldDrawLayer(layer) {\n    return layer.props.pickable;\n  }\n\n  getModuleParameters() {\n    return {\n      pickingActive: 1,\n      pickingAttribute: this.pickZ,\n      // turn off lighting by adding empty light source object\n      // lights shader module relies on the `lightSources` to turn on/off lighting\n      lightSources: {}\n    };\n  }\n\n  getLayerParameters(layer, layerIndex) {\n    // These will override any layer parameters\n    const pickParameters = this.pickZ\n      ? {blend: false}\n      : {\n          ...PICKING_PARAMETERS,\n          blend: true,\n          blendColor: [0, 0, 0, this.useAlpha ? (layerIndex + 1) / 255 : 1]\n        };\n\n    // Override layer parameters with pick parameters\n    return Object.assign({}, layer.props.parameters, pickParameters);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}