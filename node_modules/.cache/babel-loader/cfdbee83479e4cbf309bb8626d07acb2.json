{"ast":null,"code":"import ChildProcess from 'child_process';\nexport function getAvailablePort() {\n  var defaultPort = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3000;\n  return new Promise(function (resolve, reject) {\n    ChildProcess.exec('lsof -i -P -n | grep LISTEN', function (error, stdout, stderr) {\n      if (error) {\n        resolve(defaultPort);\n        return;\n      }\n\n      var portsInUse = [];\n      var regex = /:(\\d+) \\(LISTEN\\)/;\n      stdout.split('\\n').forEach(function (line) {\n        var match = line.match(regex);\n\n        if (match) {\n          portsInUse.push(Number(match[1]));\n        }\n      });\n      var port = defaultPort;\n\n      while (portsInUse.includes(port)) {\n        port++;\n      }\n\n      resolve(port);\n    });\n  });\n}","map":{"version":3,"sources":["../../../../src/lib/process-utils/process-utils.js"],"names":["defaultPort","ChildProcess","resolve","portsInUse","regex","stdout","match","line","Number","port"],"mappings":"AAAA,OAAA,YAAA,MAAA,eAAA;AAIA,OAAO,SAAA,gBAAA,GAA8C;AAAA,MAApBA,WAAoB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAN,IAAM;AACnD,SAAO,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAAqB;AAEtCC,IAAAA,YAAY,CAAZA,IAAAA,CAAAA,6BAAAA,EAAiD,UAAA,KAAA,EAAA,MAAA,EAAA,MAAA,EAA2B;AAC1E,UAAA,KAAA,EAAW;AAETC,QAAAA,OAAO,CAAPA,WAAO,CAAPA;AACA;AACD;;AAED,UAAMC,UAAU,GAAhB,EAAA;AACA,UAAMC,KAAK,GAAX,mBAAA;AACAC,MAAAA,MAAM,CAANA,KAAAA,CAAAA,IAAAA,EAAAA,OAAAA,CAA2B,UAAA,IAAA,EAAQ;AACjC,YAAMC,KAAK,GAAGC,IAAI,CAAJA,KAAAA,CAAd,KAAcA,CAAd;;AACA,YAAA,KAAA,EAAW;AACTJ,UAAAA,UAAU,CAAVA,IAAAA,CAAgBK,MAAM,CAACF,KAAK,CAA5BH,CAA4B,CAAN,CAAtBA;AACD;AAJHE,OAAAA;AAMA,UAAII,IAAI,GAAR,WAAA;;AACA,aAAON,UAAU,CAAVA,QAAAA,CAAP,IAAOA,CAAP,EAAkC;AAChCM,QAAAA,IAAI;AACL;;AACDP,MAAAA,OAAO,CAAPA,IAAO,CAAPA;AAnBFD,KAAAA;AAFF,GAAO,CAAP;AAwBD","sourcesContent":["import ChildProcess from 'child_process';\n\n// Get an available port\n// Works on Unix systems\nexport function getAvailablePort(defaultPort = 3000) {\n  return new Promise((resolve, reject) => {\n    // Get a list of all ports in use\n    ChildProcess.exec('lsof -i -P -n | grep LISTEN', (error, stdout, stderr) => {\n      if (error) {\n        // likely no permission, e.g. CI\n        resolve(defaultPort);\n        return;\n      }\n\n      const portsInUse = [];\n      const regex = /:(\\d+) \\(LISTEN\\)/;\n      stdout.split('\\n').forEach(line => {\n        const match = line.match(regex);\n        if (match) {\n          portsInUse.push(Number(match[1]));\n        }\n      });\n      let port = defaultPort;\n      while (portsInUse.includes(port)) {\n        port++;\n      }\n      resolve(port);\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}