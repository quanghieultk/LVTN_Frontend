{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { polyfillVertexArrayObject } from './polyfill-vertex-array-object';\nimport { assert } from '../utils/assert';\nimport { WEBGL2_CONTEXT_POLYFILLS, WEBGL2_CONTEXT_OVERRIDES } from './polyfill-table';\nexport function polyfillContext(gl) {\n  gl.luma = gl.luma || {};\n  var luma = gl.luma;\n\n  if (!luma.polyfilled) {\n    polyfillVertexArrayObject(gl);\n    initializeExtensions(gl);\n    installPolyfills(gl, WEBGL2_CONTEXT_POLYFILLS);\n    installOverrides(gl, {\n      target: luma,\n      target2: gl\n    });\n    luma.polyfilled = true;\n  }\n\n  return gl;\n}\nvar global_ = typeof global !== 'undefined' ? global : window;\nglobal_.polyfillContext = polyfillContext;\n\nfunction initializeExtensions(gl) {\n  gl.luma.extensions = {};\n  var EXTENSIONS = gl.getSupportedExtensions() || [];\n\n  var _iterator = _createForOfIteratorHelper(EXTENSIONS),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var extension = _step.value;\n      gl.luma[extension] = gl.getExtension(extension);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n\nfunction installOverrides(gl, _ref) {\n  var target = _ref.target,\n      target2 = _ref.target2;\n  Object.keys(WEBGL2_CONTEXT_OVERRIDES).forEach(function (key) {\n    if (typeof WEBGL2_CONTEXT_OVERRIDES[key] === 'function') {\n      var originalFunc = gl[key] ? gl[key].bind(gl) : function () {};\n      var polyfill = WEBGL2_CONTEXT_OVERRIDES[key].bind(null, gl, originalFunc);\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  });\n}\n\nfunction installPolyfills(gl, polyfills) {\n  var _iterator2 = _createForOfIteratorHelper(Object.getOwnPropertyNames(polyfills)),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var extension = _step2.value;\n\n      if (extension !== 'overrides') {\n        polyfillExtension(gl, {\n          extension: extension,\n          target: gl.luma,\n          target2: gl\n        });\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n}\n\nfunction polyfillExtension(gl, _ref2) {\n  var extension = _ref2.extension,\n      target = _ref2.target,\n      target2 = _ref2.target2;\n  var defaults = WEBGL2_CONTEXT_POLYFILLS[extension];\n  assert(defaults);\n  var _defaults$meta = defaults.meta,\n      meta = _defaults$meta === void 0 ? {} : _defaults$meta;\n  var _meta$suffix = meta.suffix,\n      suffix = _meta$suffix === void 0 ? '' : _meta$suffix;\n  var ext = gl.getExtension(extension);\n\n  var _loop = function _loop() {\n    var key = _Object$keys[_i];\n    var extKey = \"\".concat(key).concat(suffix);\n    var polyfill = null;\n\n    if (key === 'meta') {} else if (typeof gl[key] === 'function') {} else if (ext && typeof ext[extKey] === 'function') {\n      polyfill = function polyfill() {\n        return ext[extKey].apply(ext, arguments);\n      };\n    } else if (typeof defaults[key] === 'function') {\n      polyfill = defaults[key].bind(target);\n    }\n\n    if (polyfill) {\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  };\n\n  for (var _i = 0, _Object$keys = Object.keys(defaults); _i < _Object$keys.length; _i++) {\n    _loop();\n  }\n}","map":{"version":3,"sources":["../../../src/polyfill/polyfill-context.js"],"names":["gl","luma","polyfillVertexArrayObject","initializeExtensions","installPolyfills","installOverrides","target","target2","global_","EXTENSIONS","extension","Object","WEBGL2_CONTEXT_OVERRIDES","originalFunc","polyfill","polyfillExtension","defaults","WEBGL2_CONTEXT_POLYFILLS","assert","meta","suffix","ext","key","extKey"],"mappings":"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","sourcesContent":["// WebGL1/WebGL2 extension polyfill support\n//\n// Provides a function that creates polyfills for WebGL2 functions based\n// on available extensions and installs them on a supplied target (could be\n// the WebGLContext or its prototype, or a separate object).\n//\n// This is intended to be a stand-alone file with minimal dependencies,\n// easy to reuse or repurpose in other projects.\n\n/** @typedef {import('./polyfill-context')} types */\n\nimport {polyfillVertexArrayObject} from './polyfill-vertex-array-object';\nimport {assert} from '../utils/assert';\n\nimport {WEBGL2_CONTEXT_POLYFILLS, WEBGL2_CONTEXT_OVERRIDES} from './polyfill-table';\n\n/** @type {types['polyfillContext']} */\nexport function polyfillContext(gl) {\n  // @ts-ignore\n  gl.luma = gl.luma || {};\n  // @ts-ignore\n  const {luma} = gl;\n\n  if (!luma.polyfilled) {\n    polyfillVertexArrayObject(gl);\n    initializeExtensions(gl);\n    installPolyfills(gl, WEBGL2_CONTEXT_POLYFILLS);\n    installOverrides(gl, {target: luma, target2: gl});\n    luma.polyfilled = true;\n  }\n\n  // TODO - only supporting a few members\n  /** @type {WebGL2RenderingContext} */\n  // @ts-ignore\n  return gl;\n}\n\n// TODO - is this still required?\nconst global_ = typeof global !== 'undefined' ? global : window;\n// @ts-ignore\nglobal_.polyfillContext = polyfillContext;\n\nfunction initializeExtensions(gl) {\n  gl.luma.extensions = {};\n  // `getSupportedExtensions` can return null when context is lost.\n  const EXTENSIONS = gl.getSupportedExtensions() || [];\n  for (const extension of EXTENSIONS) {\n    gl.luma[extension] = gl.getExtension(extension);\n  }\n}\n\n// Install simple overrides (mostly get* functions)\nfunction installOverrides(gl, {target, target2}) {\n  Object.keys(WEBGL2_CONTEXT_OVERRIDES).forEach(key => {\n    if (typeof WEBGL2_CONTEXT_OVERRIDES[key] === 'function') {\n      // install an override, if no implementation was detected\n      const originalFunc = gl[key] ? gl[key].bind(gl) : () => {};\n      const polyfill = WEBGL2_CONTEXT_OVERRIDES[key].bind(null, gl, originalFunc);\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  });\n}\n\nfunction installPolyfills(gl, polyfills) {\n  for (const extension of Object.getOwnPropertyNames(polyfills)) {\n    if (extension !== 'overrides') {\n      polyfillExtension(gl, {extension, target: gl.luma, target2: gl});\n    }\n  }\n}\n\n// Polyfills a single WebGL extension into the `target` object\nfunction polyfillExtension(gl, {extension, target, target2}) {\n  const defaults = WEBGL2_CONTEXT_POLYFILLS[extension];\n  assert(defaults);\n\n  const {meta = {}} = defaults;\n  const {suffix = ''} = meta;\n\n  const ext = gl.getExtension(extension);\n\n  for (const key of Object.keys(defaults)) {\n    const extKey = `${key}${suffix}`;\n\n    let polyfill = null;\n    if (key === 'meta') {\n      // ignore\n    } else if (typeof gl[key] === 'function') {\n      // WebGL2 implementation is already\n    } else if (ext && typeof ext[extKey] === 'function') {\n      // pick extension implemenentation,if available\n      polyfill = (...args) => ext[extKey](...args);\n    } else if (typeof defaults[key] === 'function') {\n      // pick the mock implementation, if no implementation was detected\n      polyfill = defaults[key].bind(target);\n    }\n\n    if (polyfill) {\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}