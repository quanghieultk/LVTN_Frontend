{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isResponse } from '../../javascript-utils/is-type';\nimport { getResourceContentLength, getResourceUrlAndType } from './resource-utils';\nexport function makeResponse(_x) {\n  return _makeResponse.apply(this, arguments);\n}\n\nfunction _makeResponse() {\n  _makeResponse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(resource) {\n    var headers, contentLength, _getResourceUrlAndTyp, url, type, initialDataUrl, response;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!isResponse(resource)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", resource);\n\n          case 2:\n            headers = {};\n            contentLength = getResourceContentLength(resource);\n\n            if (contentLength >= 0) {\n              headers['content-length'] = String(contentLength);\n            }\n\n            _getResourceUrlAndTyp = getResourceUrlAndType(resource), url = _getResourceUrlAndTyp.url, type = _getResourceUrlAndTyp.type;\n\n            if (type) {\n              headers['content-type'] = type;\n            }\n\n            _context.next = 9;\n            return getInitialDataUrl(resource);\n\n          case 9:\n            initialDataUrl = _context.sent;\n\n            if (initialDataUrl) {\n              headers['x-first-bytes'] = initialDataUrl;\n            }\n\n            if (typeof resource === 'string') {\n              resource = new TextEncoder().encode(resource);\n            }\n\n            response = new Response(resource, {\n              headers: headers\n            });\n            Object.defineProperty(response, 'url', {\n              value: url\n            });\n            return _context.abrupt(\"return\", response);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _makeResponse.apply(this, arguments);\n}\n\nexport function checkResponse(_x2) {\n  return _checkResponse.apply(this, arguments);\n}\n\nfunction _checkResponse() {\n  _checkResponse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(response) {\n    var message;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (response.ok) {\n              _context2.next = 5;\n              break;\n            }\n\n            _context2.next = 3;\n            return getResponseError(response);\n\n          case 3:\n            message = _context2.sent;\n            throw new Error(message);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _checkResponse.apply(this, arguments);\n}\n\nexport function checkResponseSync(response) {\n  if (!response.ok) {\n    var message = \"\".concat(response.status, \" \").concat(response.statusText);\n    message = message.length > 60 ? \"\".concat(message.slice(60), \"...\") : message;\n    throw new Error(message);\n  }\n}\n\nfunction getResponseError(_x3) {\n  return _getResponseError.apply(this, arguments);\n}\n\nfunction _getResponseError() {\n  _getResponseError = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(response) {\n    var message, contentType, text;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            message = \"Failed to fetch resource \".concat(response.url, \" (\").concat(response.status, \"): \");\n            _context3.prev = 1;\n            contentType = response.headers.get('Content-Type');\n            text = response.statusText;\n\n            if (!contentType.includes('application/json')) {\n              _context3.next = 11;\n              break;\n            }\n\n            _context3.t0 = text;\n            _context3.t1 = \" \";\n            _context3.next = 9;\n            return response.text();\n\n          case 9:\n            _context3.t2 = _context3.sent;\n            text = _context3.t0 += _context3.t1.concat.call(_context3.t1, _context3.t2);\n\n          case 11:\n            message += text;\n            message = message.length > 60 ? \"\".concat(message.slice(60), \"...\") : message;\n            _context3.next = 17;\n            break;\n\n          case 15:\n            _context3.prev = 15;\n            _context3.t3 = _context3[\"catch\"](1);\n\n          case 17:\n            return _context3.abrupt(\"return\", message);\n\n          case 18:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[1, 15]]);\n  }));\n  return _getResponseError.apply(this, arguments);\n}\n\nfunction getInitialDataUrl(_x4) {\n  return _getInitialDataUrl.apply(this, arguments);\n}\n\nfunction _getInitialDataUrl() {\n  _getInitialDataUrl = _asyncToGenerator(_regeneratorRuntime.mark(function _callee4(resource) {\n    var INITIAL_DATA_LENGTH, blobSlice, slice, base64;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            INITIAL_DATA_LENGTH = 5;\n\n            if (!(typeof resource === 'string')) {\n              _context4.next = 3;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", \"data:,\".concat(resource.slice(0, INITIAL_DATA_LENGTH)));\n\n          case 3:\n            if (!(resource instanceof Blob)) {\n              _context4.next = 8;\n              break;\n            }\n\n            blobSlice = resource.slice(0, 5);\n            _context4.next = 7;\n            return new Promise(function (resolve) {\n              var reader = new FileReader();\n\n              reader.onload = function (event) {\n                return resolve(event.target && event.target.result);\n              };\n\n              reader.readAsDataURL(blobSlice);\n            });\n\n          case 7:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 8:\n            if (!(resource instanceof ArrayBuffer)) {\n              _context4.next = 12;\n              break;\n            }\n\n            slice = resource.slice(0, INITIAL_DATA_LENGTH);\n            base64 = arrayBufferToBase64(slice);\n            return _context4.abrupt(\"return\", \"data:base64,\".concat(base64));\n\n          case 12:\n            return _context4.abrupt(\"return\", null);\n\n          case 13:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _getInitialDataUrl.apply(this, arguments);\n}\n\nfunction arrayBufferToBase64(buffer) {\n  var binary = '';\n  var bytes = new Uint8Array(buffer);\n\n  for (var i = 0; i < bytes.byteLength; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n\n  return btoa(binary);\n}","map":{"version":3,"sources":["../../../../src/lib/utils/response-utils.js"],"names":["isResponse","headers","contentLength","getResourceContentLength","String","url","type","getResourceUrlAndType","initialDataUrl","getInitialDataUrl","resource","response","Object","value","message","getResponseError","contentType","text","INITIAL_DATA_LENGTH","blobSlice","reader","resolve","event","slice","base64","arrayBufferToBase64","binary","bytes","i","btoa"],"mappings":"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","sourcesContent":["/* global Response, TextEncoder, Blob, FileReader, btoa */\nimport {isResponse} from '../../javascript-utils/is-type';\nimport {getResourceContentLength, getResourceUrlAndType} from './resource-utils';\n\nexport async function makeResponse(resource) {\n  if (isResponse(resource)) {\n    return resource;\n  }\n\n  // Add content-length header if possible\n  /** @type {Record<string, string>} */\n  const headers = {};\n\n  const contentLength = getResourceContentLength(resource);\n  if (contentLength >= 0) {\n    headers['content-length'] = String(contentLength);\n  }\n\n  // `new Response(File)` does not preserve content-type and URL\n  // so we add them here\n  const {url, type} = getResourceUrlAndType(resource);\n  if (type) {\n    headers['content-type'] = type;\n  }\n\n  // Add a custom header with initial bytes if available\n  const initialDataUrl = await getInitialDataUrl(resource);\n  if (initialDataUrl) {\n    headers['x-first-bytes'] = initialDataUrl;\n  }\n\n  // TODO - is this the best way of handling strings?\n  // Maybe package as data URL instead?\n  if (typeof resource === 'string') {\n    // Convert to ArrayBuffer to avoid Response treating it as a URL\n    resource = new TextEncoder().encode(resource);\n  }\n\n  // Attempt to create a Response from the resource, adding headers and setting url\n  const response = new Response(resource, {headers});\n  // We can't control `Response.url` via constructor, use a property override to record URL.\n  Object.defineProperty(response, 'url', {value: url});\n  return response;\n}\n\nexport async function checkResponse(response) {\n  if (!response.ok) {\n    const message = await getResponseError(response);\n    throw new Error(message);\n  }\n}\n\nexport function checkResponseSync(response) {\n  if (!response.ok) {\n    let message = `${response.status} ${response.statusText}`;\n    message = message.length > 60 ? `${message.slice(60)}...` : message;\n    throw new Error(message);\n  }\n}\n\n// HELPERS\n\nasync function getResponseError(response) {\n  let message = `Failed to fetch resource ${response.url} (${response.status}): `;\n  try {\n    const contentType = response.headers.get('Content-Type');\n    let text = response.statusText;\n    if (contentType.includes('application/json')) {\n      text += ` ${await response.text()}`;\n    }\n    message += text;\n    message = message.length > 60 ? `${message.slice(60)}...` : message;\n  } catch (error) {\n    // eslint forbids return in a finally statement, so we just catch here\n  }\n  return message;\n}\n\nasync function getInitialDataUrl(resource) {\n  const INITIAL_DATA_LENGTH = 5;\n  if (typeof resource === 'string') {\n    return `data:,${resource.slice(0, INITIAL_DATA_LENGTH)}`;\n  }\n  if (resource instanceof Blob) {\n    const blobSlice = resource.slice(0, 5);\n    return await new Promise(resolve => {\n      const reader = new FileReader();\n      reader.onload = event => resolve(event.target && event.target.result);\n      reader.readAsDataURL(blobSlice);\n    });\n  }\n  if (resource instanceof ArrayBuffer) {\n    const slice = resource.slice(0, INITIAL_DATA_LENGTH);\n    const base64 = arrayBufferToBase64(slice);\n    return `data:base64,${base64}`;\n  }\n  return null;\n}\n\n// https://stackoverflow.com/questions/9267899/arraybuffer-to-base64-encoded-string\nfunction arrayBufferToBase64(buffer) {\n  let binary = '';\n  const bytes = new Uint8Array(buffer);\n  for (let i = 0; i < bytes.byteLength; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return btoa(binary);\n}\n"]},"metadata":{},"sourceType":"module"}