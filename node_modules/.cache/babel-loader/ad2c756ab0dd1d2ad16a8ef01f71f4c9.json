{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _wrapAsyncGenerator from \"@babel/runtime/helpers/esm/wrapAsyncGenerator\";\nimport _awaitAsyncGenerator from \"@babel/runtime/helpers/esm/awaitAsyncGenerator\";\nimport _asyncIterator from \"@babel/runtime/helpers/esm/asyncIterator\";\nimport _asyncGeneratorDelegate from \"@babel/runtime/helpers/esm/asyncGeneratorDelegate\";\nvar VERSION = typeof \"2.3.13\" !== 'undefined' ? \"2.3.13\" : 'latest';\nexport var NullLoader = {\n  id: 'image',\n  name: 'Images',\n  version: VERSION,\n  mimeTypes: ['application/x.empty'],\n  extensions: ['null'],\n  parse: function () {\n    var _parse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(arrayBuffer, options) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", arrayBuffer);\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function parse(_x, _x2) {\n      return _parse.apply(this, arguments);\n    }\n\n    return parse;\n  }(),\n  parseSync: function parseSync(arrayBuffer, options) {\n    return arrayBuffer;\n  },\n  parseInBatches: function () {\n    var _parseInBatches2 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(asyncIterator, options) {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", function () {\n                var _parseInBatches = _wrapAsyncGenerator(_regeneratorRuntime.mark(function _callee2() {\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          return _context2.delegateYield(_asyncGeneratorDelegate(_asyncIterator(asyncIterator), _awaitAsyncGenerator), \"t0\", 1);\n\n                        case 1:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                }));\n\n                function parseInBatches() {\n                  return _parseInBatches.apply(this, arguments);\n                }\n\n                return parseInBatches;\n              }()());\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    function parseInBatches(_x3, _x4) {\n      return _parseInBatches2.apply(this, arguments);\n    }\n\n    return parseInBatches;\n  }(),\n  tests: [function () {\n    return false;\n  }],\n  options: {}\n};","map":{"version":3,"sources":["../../src/null-loader.js"],"names":["VERSION","NullLoader","id","name","version","mimeTypes","extensions","parse","parseSync","parseInBatches","tests","options"],"mappings":";;;;;;AAEA,IAAMA,OAAO,GAAG,OAAA,QAAA,KAAA,WAAA,GAAA,QAAA,GAAhB,QAAA;AASA,OAAO,IAAMC,UAAU,GAAG;AACxBC,EAAAA,EAAE,EADsB,OAAA;AAExBC,EAAAA,IAAI,EAFoB,QAAA;AAGxBC,EAAAA,OAAO,EAHiB,OAAA;AAIxBC,EAAAA,SAAS,EAAE,CAJa,qBAIb,CAJa;AAKxBC,EAAAA,UAAU,EAAE,CALY,MAKZ,CALY;AAMxBC,EAAAA,KAAK,EAAA,YAAA;AAAA,QAAA,MAAA,GAAA,iBAAA,CAAA,mBAAA,CAAA,IAAA,CAAE,SAAA,OAAA,CAAA,WAAA,EAAA,OAAA,EAAA;AAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,eAAA,CAAA,EAAA;AAAA,kBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,iBAAA,CAAA;AAAA,qBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAA,WAAA,CAAA;;AAAA,iBAAA,CAAA;AAAA,iBAAA,KAAA;AAAA,qBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,OAAA,EAAA,OAAA,CAAA;AAAF,KAAA,CAAA,CAAA;;AAAA,aAAA,KAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,aAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,WAAA,KAAA;AANmB,GAMnB,EANmB;AAOxBC,EAAAA,SAAS,EAAE,SAAA,SAAA,CAAA,WAAA,EAAA,OAAA,EAAA;AAAA,WAAA,WAAA;AAPa,GAAA;AASxBC,EAAAA,cAAc,EAAA,YAAA;AAAA,QAAA,gBAAA,GAAA,iBAAA,CAAA,mBAAA,CAAA,IAAA,CAAE,SAAA,QAAA,CAAA,aAAA,EAAA,OAAA,EAAA;AAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,eAAA,CAAA,EAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,iBAAA,CAAA;AAAA,qBAAA,SAAA,CAAA,MAAA,CAAA,QAAA,EACd,YAAA;AAAA,oBAAA,eAAA,GAAA,mBAAA,CAAA,mBAAA,CAAA,IAAA,CAAC,SAAA,QAAA,GAAA;AAAA,yBAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,2BAAA,CAAA,EAAA;AAAA,8BAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,6BAAA,CAAA;AAEC,iCAAA,SAAA,CAAA,aAAA,CAAA,uBAAA,CAAA,cAAA,CAAA,aAAA,CAAA,EAAA,oBAAA,CAAA,EAAA,IAAA,EAAA,CAAA,CAAA;;AAFD,6BAAA,CAAA;AAAA,6BAAA,KAAA;AAAA,iCAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,mBAAA,EAAA,QAAA,CAAA;AAAD,iBAAA,CAAA,CAAA;;AAAA,yBAAA,cAAA,GAAA;AAAA,yBAAA,eAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,uBAAA,cAAA;AADc,eACd,IADc,CAAA;;AAAA,iBAAA,CAAA;AAAA,iBAAA,KAAA;AAAA,qBAAA,SAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,OAAA,EAAA,QAAA,CAAA;AAAF,KAAA,CAAA,CAAA;;AAAA,aAAA,cAAA,CAAA,GAAA,EAAA,GAAA,EAAA;AAAA,aAAA,gBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA;;AAAA,WAAA,cAAA;AATU,GASV,EATU;AAcxBC,EAAAA,KAAK,EAAE,CAAC,YAAA;AAAA,WAAA,KAAA;AAdgB,GAcjB,CAdiB;AAexBC,EAAAA,OAAO,EAAE;AAfe,CAAnB","sourcesContent":["// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\n/** @typedef {import('@loaders.gl/loader-utils').LoaderObject} LoaderObject */\n\n/**\n * Loads any data and returns null (or optionally passes through data unparsed)\n * @type {LoaderObject}\n * @todo Should be moved to `@loaders.gl/core`\n * */\nexport const NullLoader = {\n  id: 'image',\n  name: 'Images',\n  version: VERSION,\n  mimeTypes: ['application/x.empty'],\n  extensions: ['null'],\n  parse: async (arrayBuffer, options) => arrayBuffer,\n  parseSync: (arrayBuffer, options) => arrayBuffer,\n  // @ts-ignore\n  parseInBatches: async (asyncIterator, options) =>\n    (async function* parseInBatches() {\n      // @ts-ignore\n      yield* asyncIterator;\n    })(),\n  tests: [() => false],\n  options: {}\n};\n"]},"metadata":{},"sourceType":"module"}