{"ast":null,"code":"import { socketService } from \"../services/socket.service\";\nimport { socketConstants } from '../constants/socket.constants';\nimport { chatConstants } from '../constants/chat.constants';\nimport { notificationActions } from \"./notification.action\";\nimport { notificatonService } from \"../services/notification.service\";\nimport { chatAction } from \"../actions/chat.action\";\nexport const socketActions = {\n  connect,\n  disconnect\n};\n\nfunction connect() {\n  return dispatch => {\n    socketService.connect().then(socket => {\n      dispatch(connectSocket(socket)); //notification\n\n      socket.on(\"newNotification\", data => {\n        console.log(\"new notifgifation \");\n        notificatonService.readNotifications(data.notification._id);\n        dispatch(notificationActions.addNotification(data));\n      }); //new message\n\n      socket.on('newMessage', data => {\n        console.log('new Mesage');\n        dispatch(chatAction.newMessage(data));\n      });\n      socket.on(\"readMessages\", data => {\n        dispatch({\n          type: chatConstants.RECEIVE_READ_MESSAGES,\n          data\n        });\n      });\n      socket.on(\"typing\", data => {\n        dispatch(chatAction.typing(data.roomId));\n      });\n      socket.on(\"stoppedTyping\", data => {\n        dispatch(chatAction.stoppedTyping(data.roomId));\n      });\n      window.socket = socket;\n    });\n  };\n\n  function connectSocket(socket) {\n    return {\n      type: socketConstants.CONNECT,\n      socket\n    };\n  }\n}\n\nfunction disconnect() {\n  window.socket.emit('dis');\n  window.socket.disconnect();\n  window.socket = '';\n}","map":{"version":3,"sources":["D:/LVTN/LVTN/cuisine-net/src/actions/socket.action.js"],"names":["socketService","socketConstants","chatConstants","notificationActions","notificatonService","chatAction","socketActions","connect","disconnect","dispatch","then","socket","connectSocket","on","data","console","log","readNotifications","notification","_id","addNotification","newMessage","type","RECEIVE_READ_MESSAGES","typing","roomId","stoppedTyping","window","CONNECT","emit"],"mappings":"AAAA,SAASA,aAAT,QAA8B,4BAA9B;AACA,SAASC,eAAT,QAAgC,+BAAhC;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,kBAAT,QAAmC,kCAAnC;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,OAAO,MAAMC,aAAa,GAAG;AACzBC,EAAAA,OADyB;AAChBC,EAAAA;AADgB,CAAtB;;AAGP,SAASD,OAAT,GAAmB;AACf,SAAOE,QAAQ,IAAI;AACfT,IAAAA,aAAa,CAACO,OAAd,GAAwBG,IAAxB,CACIC,MAAM,IAAI;AACNF,MAAAA,QAAQ,CAACG,aAAa,CAACD,MAAD,CAAd,CAAR,CADM,CAEN;;AACAA,MAAAA,MAAM,CAACE,EAAP,CAAU,iBAAV,EAA6BC,IAAI,IAAI;AACjCC,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAZ,QAAAA,kBAAkB,CAACa,iBAAnB,CAAqCH,IAAI,CAACI,YAAL,CAAkBC,GAAvD;AACAV,QAAAA,QAAQ,CAACN,mBAAmB,CAACiB,eAApB,CAAoCN,IAApC,CAAD,CAAR;AACH,OAJD,EAHM,CAQN;;AACAH,MAAAA,MAAM,CAACE,EAAP,CAAU,YAAV,EAAwBC,IAAI,IAAI;AAC5BC,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAP,QAAAA,QAAQ,CAACJ,UAAU,CAACgB,UAAX,CAAsBP,IAAtB,CAAD,CAAR;AACH,OAHD;AAKAH,MAAAA,MAAM,CAACE,EAAP,CAAU,cAAV,EAA0BC,IAAI,IAAI;AAC9BL,QAAAA,QAAQ,CAAC;AAAEa,UAAAA,IAAI,EAAEpB,aAAa,CAACqB,qBAAtB;AAA6CT,UAAAA;AAA7C,SAAD,CAAR;AACH,OAFD;AAGAH,MAAAA,MAAM,CAACE,EAAP,CAAU,QAAV,EAAoBC,IAAI,IAAI;AACxBL,QAAAA,QAAQ,CAACJ,UAAU,CAACmB,MAAX,CAAkBV,IAAI,CAACW,MAAvB,CAAD,CAAR;AACH,OAFD;AAIAd,MAAAA,MAAM,CAACE,EAAP,CAAU,eAAV,EAA2BC,IAAI,IAAI;AAC/BL,QAAAA,QAAQ,CAACJ,UAAU,CAACqB,aAAX,CAAyBZ,IAAI,CAACW,MAA9B,CAAD,CAAR;AACH,OAFD;AAIAE,MAAAA,MAAM,CAAChB,MAAP,GAAgBA,MAAhB;AACH,KA3BL;AA6BH,GA9BD;;AAgCA,WAASC,aAAT,CAAuBD,MAAvB,EAA+B;AAC3B,WAAO;AAAEW,MAAAA,IAAI,EAAErB,eAAe,CAAC2B,OAAxB;AAAiCjB,MAAAA;AAAjC,KAAP;AACH;AACJ;;AACD,SAASH,UAAT,GAAsB;AAClBmB,EAAAA,MAAM,CAAChB,MAAP,CAAckB,IAAd,CAAmB,KAAnB;AACAF,EAAAA,MAAM,CAAChB,MAAP,CAAcH,UAAd;AACAmB,EAAAA,MAAM,CAAChB,MAAP,GAAgB,EAAhB;AACH","sourcesContent":["import { socketService } from \"../services/socket.service\";\r\nimport { socketConstants } from '../constants/socket.constants';\r\nimport { chatConstants } from '../constants/chat.constants';\r\nimport { notificationActions } from \"./notification.action\";\r\nimport { notificatonService } from \"../services/notification.service\";\r\nimport { chatAction } from \"../actions/chat.action\";\r\nexport const socketActions = {\r\n    connect, disconnect\r\n}\r\nfunction connect() {\r\n    return dispatch => {\r\n        socketService.connect().then(\r\n            socket => {\r\n                dispatch(connectSocket(socket));\r\n                //notification\r\n                socket.on(\"newNotification\", data => {\r\n                    console.log(\"new notifgifation \");\r\n                    notificatonService.readNotifications(data.notification._id);\r\n                    dispatch(notificationActions.addNotification(data))\r\n                })\r\n                //new message\r\n                socket.on('newMessage', data => {\r\n                    console.log('new Mesage')\r\n                    dispatch(chatAction.newMessage(data));\r\n                })\r\n\r\n                socket.on(\"readMessages\", data => {\r\n                    dispatch({ type: chatConstants.RECEIVE_READ_MESSAGES, data });\r\n                });\r\n                socket.on(\"typing\", data => {\r\n                    dispatch(chatAction.typing(data.roomId));\r\n                });\r\n\r\n                socket.on(\"stoppedTyping\", data => {\r\n                    dispatch(chatAction.stoppedTyping(data.roomId));\r\n                });\r\n\r\n                window.socket = socket;\r\n            }\r\n        )\r\n    }\r\n\r\n    function connectSocket(socket) {\r\n        return { type: socketConstants.CONNECT, socket };\r\n    }\r\n}\r\nfunction disconnect() {\r\n    window.socket.emit('dis');\r\n    window.socket.disconnect();\r\n    window.socket = ''\r\n}"]},"metadata":{},"sourceType":"module"}