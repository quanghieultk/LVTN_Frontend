{"ast":null,"code":"import { authHeader } from '../helpers/auth-header';\nimport axios from 'axios';\nexport const userService = {\n  login,\n  logout,\n  register,\n  getAll,\n  getById,\n  update,\n  delete: _delete\n};\n\nfunction login(username, password) {\n  let email = username;\n  let users = \"\";\n  return axios.post('users/signin', {\n    \"email\": email,\n    \"password\": password\n  }).then(res => {\n    alert(res);\n  }) // .then(handleResponse).then((user) => {\n  //         users=user;\n  //         // store user details and jwt token in local storage to keep user logged in between page refreshes\n  //         localStorage.setItem('user', \"ABC\");\n  //         return JSON.stringify(user);\n  //     })\n  .catch(err => {\n    localStorage.setItem('user', \"ABC\");\n    alert(err);\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('user');\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(`http://localhost:8000/users`, requestOptions).then(handleResponse);\n}\n\nfunction getById(id) {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(`http://localhost:8000/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction register(user) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`http://localhost:8000/users/signup`, requestOptions).then(handleResponse);\n}\n\nfunction update(user) {\n  const requestOptions = {\n    method: 'PUT',\n    headers: { ...authHeader(),\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`http://localhost:8000/users/${user.id}`, requestOptions).then(handleResponse);\n  ;\n} // prefixed function name with underscore because delete is a reserved word in javascript\n\n\nfunction _delete(id) {\n  const requestOptions = {\n    method: 'DELETE',\n    headers: authHeader()\n  };\n  return fetch(`http://localhost:8000/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.status == 200) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout(); // location.reload(true);\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["D:/LVTN/LVTN/cuisine-net/src/services/user.service.js"],"names":["authHeader","axios","userService","login","logout","register","getAll","getById","update","delete","_delete","username","password","email","users","post","then","res","alert","catch","err","localStorage","setItem","removeItem","requestOptions","method","headers","fetch","handleResponse","id","user","body","JSON","stringify","response","text","data","parse","status","error","message","statusText","Promise","reject"],"mappings":"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","sourcesContent":["import { authHeader } from '../helpers/auth-header';\r\nimport axios from 'axios';\r\nexport const userService = {\r\n    login,\r\n    logout,\r\n    register,\r\n    getAll,\r\n    getById,\r\n    update,\r\n    delete: _delete\r\n};\r\n\r\nfunction  login(username, password) {\r\n    let email=username;\r\n    let users=\"\";\r\n    return  axios.post('users/signin', {\r\n                \"email\" : email, \r\n                \"password\": password\r\n            }\r\n    ).then((res)=>{\r\n        alert(res);\r\n    })\r\n    // .then(handleResponse).then((user) => {\r\n    //         users=user;\r\n    //         // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n    //         localStorage.setItem('user', \"ABC\");\r\n    //         return JSON.stringify(user);\r\n    //     })\r\n        .catch((err)=>{\r\n            localStorage.setItem('user', \"ABC\");\r\n            alert(err);\r\n        });\r\n}\r\n\r\nfunction logout() {\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem('user');\r\n}\r\n\r\nfunction getAll() {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: authHeader()\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction getById(id) {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: authHeader()\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users/${id}`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction register(user) {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(user)\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users/signup`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction update(user) {\r\n    const requestOptions = {\r\n        method: 'PUT',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(user)\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users/${user.id}`, requestOptions).then(handleResponse);;\r\n}\r\n\r\n// prefixed function name with underscore because delete is a reserved word in javascript\r\nfunction _delete(id) {\r\n    const requestOptions = {\r\n        method: 'DELETE',\r\n        headers: authHeader()\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users/${id}`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction handleResponse(response) {\r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.status==200) {\r\n            if (response.status === 401) {\r\n                // auto logout if 401 response returned from api\r\n                logout();\r\n                // location.reload(true);\r\n            }\r\n\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}