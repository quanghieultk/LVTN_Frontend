{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _wrapAsyncGenerator from \"@babel/runtime/helpers/esm/wrapAsyncGenerator\";\nimport _awaitAsyncGenerator from \"@babel/runtime/helpers/esm/awaitAsyncGenerator\";\nimport _asyncIterator from \"@babel/runtime/helpers/esm/asyncIterator\";\nimport _asyncGeneratorDelegate from \"@babel/runtime/helpers/esm/asyncGeneratorDelegate\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { assert } from '@loaders.gl/loader-utils';\nimport { concatenateChunksAsync, makeTransformIterator } from '@loaders.gl/loader-utils';\nimport { isLoaderObject } from '../loader-utils/normalize-loader';\nimport { normalizeOptions } from '../loader-utils/option-utils';\nimport { getLoaderContext } from '../loader-utils/context-utils';\nimport { getAsyncIteratorFromData, getReadableStream } from '../loader-utils/get-data';\nimport { getResourceUrlAndType } from '../utils/resource-utils';\nimport { selectLoader } from './select-loader';\nimport { parse } from './parse';\nexport function parseInBatches(_x2, _x3, _x4, _x5) {\n  return _parseInBatches.apply(this, arguments);\n}\n\nfunction _parseInBatches() {\n  _parseInBatches = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(data, loaders, options, context) {\n    var _getResourceUrlAndTyp, url, loader;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            assert(!context || typeof context !== 'string', 'parseInBatches no longer accepts final url');\n\n            if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n              context = options;\n              options = loaders;\n              loaders = null;\n            }\n\n            _context.next = 4;\n            return data;\n\n          case 4:\n            data = _context.sent;\n            options = options || {};\n            _getResourceUrlAndTyp = getResourceUrlAndType(data), url = _getResourceUrlAndTyp.url;\n            _context.next = 9;\n            return selectLoader(data, loaders, options);\n\n          case 9:\n            loader = _context.sent;\n\n            if (loader) {\n              _context.next = 12;\n              break;\n            }\n\n            return _context.abrupt(\"return\", null);\n\n          case 12:\n            options = normalizeOptions(options, loader, loaders, url);\n            context = getLoaderContext({\n              url: url,\n              parseInBatches: parseInBatches,\n              parse: parse,\n              loaders: loaders\n            }, options, context);\n            _context.next = 16;\n            return parseWithLoaderInBatches(loader, data, options, context);\n\n          case 16:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parseInBatches.apply(this, arguments);\n}\n\nfunction parseWithLoaderInBatches(_x6, _x7, _x8, _x9) {\n  return _parseWithLoaderInBatches.apply(this, arguments);\n}\n\nfunction _parseWithLoaderInBatches() {\n  _parseWithLoaderInBatches = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(loader, data, options, context) {\n    var outputIterator, metadataBatch, makeMetadataBatchIterator, _makeMetadataBatchIterator;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _makeMetadataBatchIterator = function _makeMetadataBatchIte2() {\n              _makeMetadataBatchIterator = _wrapAsyncGenerator(_regeneratorRuntime.mark(function _callee2(iterator) {\n                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        _context2.next = 2;\n                        return metadataBatch;\n\n                      case 2:\n                        return _context2.delegateYield(_asyncGeneratorDelegate(_asyncIterator(iterator), _awaitAsyncGenerator), \"t0\", 3);\n\n                      case 3:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2);\n              }));\n              return _makeMetadataBatchIterator.apply(this, arguments);\n            };\n\n            makeMetadataBatchIterator = function _makeMetadataBatchIte(_x) {\n              return _makeMetadataBatchIterator.apply(this, arguments);\n            };\n\n            _context3.next = 4;\n            return parseToOutputIterator(loader, data, options, context);\n\n          case 4:\n            outputIterator = _context3.sent;\n\n            if (options.metadata) {\n              _context3.next = 7;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", outputIterator);\n\n          case 7:\n            metadataBatch = {\n              batchType: 'metadata',\n              metadata: {\n                _loader: loader,\n                _context: context\n              },\n              data: [],\n              bytesUsed: 0\n            };\n            return _context3.abrupt(\"return\", makeMetadataBatchIterator(outputIterator));\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _parseWithLoaderInBatches.apply(this, arguments);\n}\n\nfunction parseToOutputIterator(_x10, _x11, _x12, _x13) {\n  return _parseToOutputIterator.apply(this, arguments);\n}\n\nfunction _parseToOutputIterator() {\n  _parseToOutputIterator = _asyncToGenerator(_regeneratorRuntime.mark(function _callee5(loader, data, options, context) {\n    var inputIterator, iteratorChain, stream, parseChunkInBatches, _parseChunkInBatches;\n\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _parseChunkInBatches = function _parseChunkInBatches3() {\n              _parseChunkInBatches = _wrapAsyncGenerator(_regeneratorRuntime.mark(function _callee4() {\n                var inputIterator, arrayBuffer;\n                return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                  while (1) {\n                    switch (_context4.prev = _context4.next) {\n                      case 0:\n                        _context4.next = 2;\n                        return _awaitAsyncGenerator(getAsyncIteratorFromData(data));\n\n                      case 2:\n                        inputIterator = _context4.sent;\n                        _context4.next = 5;\n                        return _awaitAsyncGenerator(concatenateChunksAsync(inputIterator));\n\n                      case 5:\n                        arrayBuffer = _context4.sent;\n                        _context4.next = 8;\n                        return loader.parse(arrayBuffer, options, context, loader);\n\n                      case 8:\n                      case \"end\":\n                        return _context4.stop();\n                    }\n                  }\n                }, _callee4);\n              }));\n              return _parseChunkInBatches.apply(this, arguments);\n            };\n\n            parseChunkInBatches = function _parseChunkInBatches2() {\n              return _parseChunkInBatches.apply(this, arguments);\n            };\n\n            if (!loader.parseInBatches) {\n              _context5.next = 10;\n              break;\n            }\n\n            _context5.next = 5;\n            return getAsyncIteratorFromData(data);\n\n          case 5:\n            inputIterator = _context5.sent;\n            iteratorChain = applyInputTransforms(inputIterator, options);\n            _context5.next = 9;\n            return loader.parseInBatches(iteratorChain, options, context, loader);\n\n          case 9:\n            return _context5.abrupt(\"return\", _context5.sent);\n\n          case 10:\n            if (!loader.parseStreamInBatches) {\n              _context5.next = 17;\n              break;\n            }\n\n            _context5.next = 13;\n            return getReadableStream(data);\n\n          case 13:\n            stream = _context5.sent;\n\n            if (!stream) {\n              _context5.next = 17;\n              break;\n            }\n\n            if (options.transforms) {\n              console.warn('options.transforms not implemented for loaders that use `parseStreamInBatches`');\n            }\n\n            return _context5.abrupt(\"return\", loader.parseStreamInBatches(stream, options, context));\n\n          case 17:\n            _context5.next = 19;\n            return parseChunkInBatches();\n\n          case 19:\n            return _context5.abrupt(\"return\", _context5.sent);\n\n          case 20:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _parseToOutputIterator.apply(this, arguments);\n}\n\nfunction applyInputTransforms(inputIterator, options) {\n  var iteratorChain = inputIterator;\n\n  var _iterator = _createForOfIteratorHelper(options.transforms || []),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var Transform = _step.value;\n      iteratorChain = makeTransformIterator(iteratorChain, Transform, options);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return iteratorChain;\n}","map":{"version":3,"sources":["../../../../src/lib/api/parse-in-batches.js"],"names":["assert","Array","isLoaderObject","context","options","loaders","data","url","getResourceUrlAndType","loader","selectLoader","normalizeOptions","getLoaderContext","parseInBatches","parse","parseWithLoaderInBatches","outputIterator","parseToOutputIterator","metadataBatch","batchType","metadata","_loader","_context","bytesUsed","makeMetadataBatchIterator","inputIterator","getAsyncIteratorFromData","iteratorChain","applyInputTransforms","stream","getReadableStream","console","parseChunkInBatches","arrayBuffer","concatenateChunksAsync","Transform","makeTransformIterator"],"mappings":"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","sourcesContent":["import {assert} from '@loaders.gl/loader-utils';\nimport {concatenateChunksAsync, makeTransformIterator} from '@loaders.gl/loader-utils';\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {normalizeOptions} from '../loader-utils/option-utils';\nimport {getLoaderContext} from '../loader-utils/context-utils';\nimport {getAsyncIteratorFromData, getReadableStream} from '../loader-utils/get-data';\nimport {getResourceUrlAndType} from '../utils/resource-utils';\nimport {selectLoader} from './select-loader';\n\n// Ensure `parse` is available in context if loader falls back to `parse`\nimport {parse} from './parse';\n\nexport async function parseInBatches(data, loaders, options, context) {\n  assert(!context || typeof context !== 'string', 'parseInBatches no longer accepts final url');\n\n  // Signature: parseInBatches(data, options, url) - Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  data = await data; // Resolve any promise\n  options = options || {};\n\n  // Extract a url for auto detection\n  const {url} = getResourceUrlAndType(data);\n\n  // Chooses a loader and normalizes it\n  // Note - only uses URL and contentType for streams and iterator inputs\n  const loader = await selectLoader(data, loaders, options);\n  // Note: if options.nothrow was set, it is possible that no loader was found, if so just return null\n  if (!loader) {\n    return null;\n  }\n\n  // Normalize options\n  options = normalizeOptions(options, loader, loaders, url);\n  context = getLoaderContext({url, parseInBatches, parse, loaders}, options, context);\n\n  return await parseWithLoaderInBatches(loader, data, options, context);\n}\n\n/**\n * Loader has beens selected and context has been prepared, see if we need to emit a metadata batch\n */\nasync function parseWithLoaderInBatches(loader, data, options, context) {\n  const outputIterator = await parseToOutputIterator(loader, data, options, context);\n\n  // Generate metadata batch if requested\n  if (!options.metadata) {\n    return outputIterator;\n  }\n\n  const metadataBatch = {\n    batchType: 'metadata',\n    metadata: {\n      _loader: loader,\n      _context: context\n    },\n    // Populate with some default fields to avoid crashing\n    data: [],\n    bytesUsed: 0\n  };\n\n  async function* makeMetadataBatchIterator(iterator) {\n    yield metadataBatch;\n    yield* iterator;\n  }\n\n  return makeMetadataBatchIterator(outputIterator);\n}\n\n/**\n * Prep work is done, now it is time to start parsing into an output operator\n * The approach depends on which parse function the loader exposes\n * `parseInBatches` (preferred), `parseStreamInBatches` (limited), `parse` (fallback)\n */\nasync function parseToOutputIterator(loader, data, options, context) {\n  if (loader.parseInBatches) {\n    const inputIterator = await getAsyncIteratorFromData(data);\n\n    const iteratorChain = applyInputTransforms(inputIterator, options);\n\n    return await loader.parseInBatches(iteratorChain, options, context, loader);\n  }\n\n  if (loader.parseStreamInBatches) {\n    const stream = await getReadableStream(data);\n    if (stream) {\n      if (options.transforms) {\n        // eslint-disable-next-line\n        console.warn(\n          'options.transforms not implemented for loaders that use `parseStreamInBatches`'\n        );\n      }\n      return loader.parseStreamInBatches(stream, options, context);\n    }\n  }\n\n  // Fallback: load atomically using `parse` concatenating input iterator into single chunk\n  async function* parseChunkInBatches() {\n    const inputIterator = await getAsyncIteratorFromData(data);\n    const arrayBuffer = await concatenateChunksAsync(inputIterator);\n    // yield a single batch, the output from loader.parse()\n    yield loader.parse(arrayBuffer, options, context, loader);\n  }\n\n  return await parseChunkInBatches();\n}\n\n/**\n * Create an iterator chain with any transform iterators (crypto, decompression)\n * @param inputIterator\n * @param options\n */\nfunction applyInputTransforms(inputIterator, options) {\n  let iteratorChain = inputIterator;\n  for (const Transform of options.transforms || []) {\n    // @ts-ignore\n    iteratorChain = makeTransformIterator(iteratorChain, Transform, options);\n  }\n  return iteratorChain;\n}\n"]},"metadata":{},"sourceType":"module"}