{"ast":null,"code":"import parseImage from './lib/parsers/parse-image';\nimport { getBinaryImageMetadata } from './lib/category-api/binary-image-api';\nvar VERSION = typeof \"2.3.13\" !== 'undefined' ? \"2.3.13\" : 'latest';\nvar EXTENSIONS = ['png', 'jpg', 'jpeg', 'gif', 'webp', 'bmp', 'ico', 'svg'];\nvar MIME_TYPES = ['image/png', 'image/jpeg', 'image/gif', 'image/webp', 'image/bmp', 'image/vnd.microsoft.icon', 'image/svg+xml'];\nvar ImageLoader = {\n  id: 'image',\n  name: 'Images',\n  version: VERSION,\n  mimeTypes: MIME_TYPES,\n  extensions: EXTENSIONS,\n  parse: parseImage,\n  tests: [function (arrayBuffer) {\n    return Boolean(getBinaryImageMetadata(new DataView(arrayBuffer)));\n  }],\n  options: {\n    image: {\n      type: 'auto',\n      decode: true\n    }\n  }\n};\nexport default ImageLoader;","map":{"version":3,"sources":["../../src/image-loader.js"],"names":["VERSION","EXTENSIONS","MIME_TYPES","ImageLoader","id","name","version","mimeTypes","extensions","parse","tests","Boolean","getBinaryImageMetadata","options","image","type","decode"],"mappings":"AAAA,OAAA,UAAA,MAAA,2BAAA;AACA,SAAA,sBAAA,QAAA,qCAAA;AAKA,IAAMA,OAAO,GAAG,OAAA,QAAA,KAAA,WAAA,GAAA,QAAA,GAAhB,QAAA;AAEA,IAAMC,UAAU,GAAG,CAAA,KAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,KAAA,EAAnB,KAAmB,CAAnB;AACA,IAAMC,UAAU,GAAG,CAAA,WAAA,EAAA,YAAA,EAAA,WAAA,EAAA,YAAA,EAAA,WAAA,EAAA,0BAAA,EAAnB,eAAmB,CAAnB;AAYA,IAAMC,WAAW,GAAG;AAClBC,EAAAA,EAAE,EADgB,OAAA;AAElBC,EAAAA,IAAI,EAFc,QAAA;AAGlBC,EAAAA,OAAO,EAHW,OAAA;AAIlBC,EAAAA,SAAS,EAJS,UAAA;AAKlBC,EAAAA,UAAU,EALQ,UAAA;AAMlBC,EAAAA,KAAK,EANa,UAAA;AAQlBC,EAAAA,KAAK,EAAE,CAAC,UAAA,WAAA,EAAW;AAAA,WAAIC,OAAO,CAACC,sBAAsB,CAAC,IAAA,QAAA,CAAnC,WAAmC,CAAD,CAAvB,CAAX;AARD,GAQX,CARW;AASlBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EADC,MAAA;AAELC,MAAAA,MAAM,EAAE;AAFH;AADA;AATS,CAApB;AAkBA,eAAA,WAAA","sourcesContent":["import parseImage from './lib/parsers/parse-image';\nimport {getBinaryImageMetadata} from './lib/category-api/binary-image-api';\n/** @typedef {import('@loaders.gl/loader-utils').LoaderObject} LoaderObject */\n\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\nconst EXTENSIONS = ['png', 'jpg', 'jpeg', 'gif', 'webp', 'bmp', 'ico', 'svg'];\nconst MIME_TYPES = [\n  'image/png',\n  'image/jpeg',\n  'image/gif',\n  'image/webp',\n  'image/bmp',\n  'image/vnd.microsoft.icon',\n  'image/svg+xml'\n];\n\n// Loads a platform-specific image type that can be used as input data to WebGL textures\n/** @type {LoaderObject} */\nconst ImageLoader = {\n  id: 'image',\n  name: 'Images',\n  version: VERSION,\n  mimeTypes: MIME_TYPES,\n  extensions: EXTENSIONS,\n  parse: parseImage,\n  // TODO: byteOffset, byteLength;\n  tests: [arrayBuffer => Boolean(getBinaryImageMetadata(new DataView(arrayBuffer)))],\n  options: {\n    image: {\n      type: 'auto',\n      decode: true // if format is HTML\n    }\n    // imagebitmap: {} - passes (platform dependent) parameters to ImageBitmap constructor\n  }\n};\n\nexport default ImageLoader;\n"]},"metadata":{},"sourceType":"module"}