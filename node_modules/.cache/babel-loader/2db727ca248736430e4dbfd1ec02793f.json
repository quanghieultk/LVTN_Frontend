{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { CompositeLayer, _flatten as flatten } from '@deck.gl/core';\nimport { GeoJsonLayer } from '@deck.gl/layers';\nimport { load } from '@loaders.gl/core';\nimport Tileset2D, { STRATEGY_DEFAULT } from './tileset-2d';\nimport { urlType, getURLFromTemplate } from './utils';\nvar defaultProps = {\n  data: [],\n  dataComparator: urlType.equals,\n  renderSubLayers: {\n    type: 'function',\n    value: function value(props) {\n      return new GeoJsonLayer(props);\n    },\n    compare: false\n  },\n  getTileData: {\n    type: 'function',\n    optional: true,\n    value: null,\n    compare: false\n  },\n  onViewportLoad: {\n    type: 'function',\n    optional: true,\n    value: null,\n    compare: false\n  },\n  onTileLoad: {\n    type: 'function',\n    value: function value(tile) {},\n    compare: false\n  },\n  onTileUnload: {\n    type: 'function',\n    value: function value(tile) {},\n    compare: false\n  },\n  onTileError: {\n    type: 'function',\n    value: function value(err) {\n      return console.error(err);\n    },\n    compare: false\n  },\n  extent: {\n    type: 'array',\n    optional: true,\n    value: null,\n    compare: true\n  },\n  tileSize: 512,\n  maxZoom: null,\n  minZoom: 0,\n  maxCacheSize: null,\n  maxCacheByteSize: null,\n  refinementStrategy: STRATEGY_DEFAULT,\n  zRange: null,\n  fetch: {\n    type: 'function',\n    value: function value(url, _ref) {\n      var layer = _ref.layer,\n          signal = _ref.signal;\n\n      var loadOptions = _objectSpread({}, layer.getLoadOptions());\n\n      loadOptions.fetch = _objectSpread(_objectSpread({}, loadOptions.fetch), {}, {\n        signal: signal\n      });\n      return load(url, loadOptions);\n    },\n    compare: false\n  },\n  maxRequests: 6\n};\n\nvar TileLayer = function (_CompositeLayer) {\n  _inherits(TileLayer, _CompositeLayer);\n\n  var _super = _createSuper(TileLayer);\n\n  function TileLayer() {\n    _classCallCheck(this, TileLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TileLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.state = {\n        tileset: null,\n        isLoaded: false\n      };\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      var tileset = this.state.tileset;\n\n      if (tileset) {\n        tileset.finalize();\n      }\n    }\n  }, {\n    key: \"shouldUpdateState\",\n    value: function shouldUpdateState(_ref2) {\n      var changeFlags = _ref2.changeFlags;\n      return changeFlags.somethingChanged;\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref3) {\n      var props = _ref3.props,\n          oldProps = _ref3.oldProps,\n          context = _ref3.context,\n          changeFlags = _ref3.changeFlags;\n      var tileset = this.state.tileset;\n      var createTileCache = !tileset || changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getTileData);\n\n      if (createTileCache) {\n        if (tileset) {\n          tileset.finalize();\n        }\n\n        var maxZoom = Number.isFinite(this.state.maxZoom) ? this.state.maxZoom : props.maxZoom;\n        var minZoom = Number.isFinite(this.state.minZoom) ? this.state.minZoom : props.minZoom;\n        var tileSize = props.tileSize,\n            maxCacheSize = props.maxCacheSize,\n            maxCacheByteSize = props.maxCacheByteSize,\n            refinementStrategy = props.refinementStrategy,\n            extent = props.extent,\n            maxRequests = props.maxRequests;\n        tileset = new Tileset2D({\n          getTileData: this.getTileData.bind(this),\n          maxCacheSize: maxCacheSize,\n          maxCacheByteSize: maxCacheByteSize,\n          maxZoom: maxZoom,\n          minZoom: minZoom,\n          tileSize: tileSize,\n          refinementStrategy: refinementStrategy,\n          extent: extent,\n          onTileLoad: this._onTileLoad.bind(this),\n          onTileError: this._onTileError.bind(this),\n          onTileUnload: this._onTileUnload.bind(this),\n          maxRequests: maxRequests\n        });\n        this.setState({\n          tileset: tileset\n        });\n      } else if (changeFlags.propsChanged || changeFlags.updateTriggersChanged) {\n        tileset.setOptions(props);\n        this.state.tileset.tiles.forEach(function (tile) {\n          tile.layers = null;\n        });\n      }\n\n      this._updateTileset();\n    }\n  }, {\n    key: \"_updateTileset\",\n    value: function _updateTileset() {\n      var tileset = this.state.tileset;\n      var _this$props = this.props,\n          zRange = _this$props.zRange,\n          modelMatrix = _this$props.modelMatrix;\n      var frameNumber = tileset.update(this.context.viewport, {\n        zRange: zRange,\n        modelMatrix: modelMatrix\n      });\n      var isLoaded = tileset.isLoaded;\n      var loadingStateChanged = this.state.isLoaded !== isLoaded;\n      var tilesetChanged = this.state.frameNumber !== frameNumber;\n\n      if (isLoaded && (loadingStateChanged || tilesetChanged)) {\n        this._onViewportLoad();\n      }\n\n      if (tilesetChanged) {\n        this.setState({\n          frameNumber: frameNumber\n        });\n      }\n\n      this.state.isLoaded = isLoaded;\n    }\n  }, {\n    key: \"_onViewportLoad\",\n    value: function _onViewportLoad() {\n      var tileset = this.state.tileset;\n      var onViewportLoad = this.props.onViewportLoad;\n\n      if (onViewportLoad) {\n        onViewportLoad(tileset.selectedTiles);\n      }\n    }\n  }, {\n    key: \"_onTileLoad\",\n    value: function _onTileLoad(tile) {\n      var layer = this.getCurrentLayer();\n      layer.props.onTileLoad(tile);\n\n      if (tile.isVisible) {\n        this.setNeedsUpdate();\n      }\n    }\n  }, {\n    key: \"_onTileError\",\n    value: function _onTileError(error, tile) {\n      var layer = this.getCurrentLayer();\n      layer.props.onTileError(error);\n\n      layer._updateTileset();\n\n      if (tile.isVisible) {\n        this.setNeedsUpdate();\n      }\n    }\n  }, {\n    key: \"_onTileUnload\",\n    value: function _onTileUnload(tile) {\n      var layer = this.getCurrentLayer();\n      layer.props.onTileUnload(tile);\n    }\n  }, {\n    key: \"getTileData\",\n    value: function getTileData(tile) {\n      var data = this.props.data;\n      var _this$getCurrentLayer = this.getCurrentLayer().props,\n          getTileData = _this$getCurrentLayer.getTileData,\n          fetch = _this$getCurrentLayer.fetch;\n      var signal = tile.signal;\n      tile.url = getURLFromTemplate(data, tile);\n\n      if (getTileData) {\n        return getTileData(tile);\n      }\n\n      if (tile.url) {\n        return fetch(tile.url, {\n          layer: this,\n          signal: signal\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: \"renderSubLayers\",\n    value: function renderSubLayers(props) {\n      return this.props.renderSubLayers(props);\n    }\n  }, {\n    key: \"getHighlightedObjectIndex\",\n    value: function getHighlightedObjectIndex() {\n      return -1;\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref4) {\n      var info = _ref4.info,\n          sourceLayer = _ref4.sourceLayer;\n      info.sourceLayer = sourceLayer;\n      info.tile = sourceLayer.props.tile;\n      return info;\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this = this;\n\n      var visible = this.props.visible;\n      return this.state.tileset.tiles.map(function (tile) {\n        var isVisible = visible && tile.isVisible;\n\n        var highlightedObjectIndex = _this.getHighlightedObjectIndex(tile);\n\n        if (!tile.isLoaded) {} else if (!tile.layers) {\n          var layers = _this.renderSubLayers(Object.assign({}, _this.props, {\n            id: \"\".concat(_this.id, \"-\").concat(tile.x, \"-\").concat(tile.y, \"-\").concat(tile.z),\n            data: tile.data,\n            visible: isVisible,\n            _offset: 0,\n            tile: tile,\n            highlightedObjectIndex: highlightedObjectIndex\n          }));\n\n          tile.layers = flatten(layers, Boolean);\n        } else if (tile.layers[0] && (tile.layers[0].props.visible !== isVisible || tile.layers[0].props.highlightedObjectIndex !== highlightedObjectIndex)) {\n          tile.layers = tile.layers.map(function (layer) {\n            return layer.clone({\n              visible: isVisible,\n              highlightedObjectIndex: highlightedObjectIndex\n            });\n          });\n        }\n\n        return tile.layers;\n      });\n    }\n  }, {\n    key: \"isLoaded\",\n    get: function get() {\n      var tileset = this.state.tileset;\n      return tileset.selectedTiles.every(function (tile) {\n        return tile.layers && tile.layers.every(function (layer) {\n          return layer.isLoaded;\n        });\n      });\n    }\n  }]);\n\n  return TileLayer;\n}(CompositeLayer);\n\nexport { TileLayer as default };\nTileLayer.layerName = 'TileLayer';\nTileLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/tile-layer/tile-layer.js"],"names":["_flatten","defaultProps","data","dataComparator","urlType","renderSubLayers","type","value","compare","getTileData","optional","onViewportLoad","onTileLoad","onTileUnload","onTileError","console","extent","tileSize","maxZoom","minZoom","maxCacheSize","maxCacheByteSize","refinementStrategy","zRange","fetch","layer","signal","loadOptions","load","maxRequests","TileLayer","CompositeLayer","tileset","isLoaded","tile","changeFlags","props","oldProps","context","createTileCache","Number","modelMatrix","frameNumber","loadingStateChanged","tilesetChanged","error","getURLFromTemplate","info","sourceLayer","visible","isVisible","highlightedObjectIndex","layers","id","_offset","flatten"],"mappings":"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","sourcesContent":["import {CompositeLayer, _flatten as flatten} from '@deck.gl/core';\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport {load} from '@loaders.gl/core';\n\nimport Tileset2D, {STRATEGY_DEFAULT} from './tileset-2d';\nimport {urlType, getURLFromTemplate} from './utils';\n\nconst defaultProps = {\n  data: [],\n  dataComparator: urlType.equals,\n  renderSubLayers: {type: 'function', value: props => new GeoJsonLayer(props), compare: false},\n  getTileData: {type: 'function', optional: true, value: null, compare: false},\n  // TODO - change to onViewportLoad to align with Tile3DLayer\n  onViewportLoad: {type: 'function', optional: true, value: null, compare: false},\n  onTileLoad: {type: 'function', value: tile => {}, compare: false},\n  onTileUnload: {type: 'function', value: tile => {}, compare: false},\n  // eslint-disable-next-line\n  onTileError: {type: 'function', value: err => console.error(err), compare: false},\n  extent: {type: 'array', optional: true, value: null, compare: true},\n  tileSize: 512,\n  maxZoom: null,\n  minZoom: 0,\n  maxCacheSize: null,\n  maxCacheByteSize: null,\n  refinementStrategy: STRATEGY_DEFAULT,\n  zRange: null,\n  // Use load directly so we don't use ResourceManager\n  fetch: {\n    type: 'function',\n    value: (url, {layer, signal}) => {\n      const loadOptions = {...layer.getLoadOptions()};\n      loadOptions.fetch = {\n        ...loadOptions.fetch,\n        signal\n      };\n\n      return load(url, loadOptions);\n    },\n    compare: false\n  },\n  maxRequests: 6\n};\n\nexport default class TileLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      tileset: null,\n      isLoaded: false\n    };\n  }\n\n  finalizeState() {\n    const {tileset} = this.state;\n    if (tileset) {\n      tileset.finalize();\n    }\n  }\n\n  get isLoaded() {\n    const {tileset} = this.state;\n    return tileset.selectedTiles.every(\n      tile => tile.layers && tile.layers.every(layer => layer.isLoaded)\n    );\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState({props, oldProps, context, changeFlags}) {\n    let {tileset} = this.state;\n    const createTileCache =\n      !tileset ||\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getTileData));\n\n    if (createTileCache) {\n      if (tileset) {\n        tileset.finalize();\n      }\n      const maxZoom = Number.isFinite(this.state.maxZoom) ? this.state.maxZoom : props.maxZoom;\n      const minZoom = Number.isFinite(this.state.minZoom) ? this.state.minZoom : props.minZoom;\n      const {\n        tileSize,\n        maxCacheSize,\n        maxCacheByteSize,\n        refinementStrategy,\n        extent,\n        maxRequests\n      } = props;\n      tileset = new Tileset2D({\n        getTileData: this.getTileData.bind(this),\n        maxCacheSize,\n        maxCacheByteSize,\n        maxZoom,\n        minZoom,\n        tileSize,\n        refinementStrategy,\n        extent,\n        onTileLoad: this._onTileLoad.bind(this),\n        onTileError: this._onTileError.bind(this),\n        onTileUnload: this._onTileUnload.bind(this),\n        maxRequests\n      });\n      this.setState({tileset});\n    } else if (changeFlags.propsChanged || changeFlags.updateTriggersChanged) {\n      tileset.setOptions(props);\n      // if any props changed, delete the cached layers\n      this.state.tileset.tiles.forEach(tile => {\n        tile.layers = null;\n      });\n    }\n\n    this._updateTileset();\n  }\n\n  _updateTileset() {\n    const {tileset} = this.state;\n    const {zRange, modelMatrix} = this.props;\n    const frameNumber = tileset.update(this.context.viewport, {zRange, modelMatrix});\n    const {isLoaded} = tileset;\n\n    const loadingStateChanged = this.state.isLoaded !== isLoaded;\n    const tilesetChanged = this.state.frameNumber !== frameNumber;\n\n    if (isLoaded && (loadingStateChanged || tilesetChanged)) {\n      this._onViewportLoad();\n    }\n\n    if (tilesetChanged) {\n      // Save the tileset frame number - trigger a rerender\n      this.setState({frameNumber});\n    }\n    // Save the loaded state - should not trigger a rerender\n    this.state.isLoaded = isLoaded;\n  }\n\n  _onViewportLoad() {\n    const {tileset} = this.state;\n    const {onViewportLoad} = this.props;\n\n    if (onViewportLoad) {\n      onViewportLoad(tileset.selectedTiles);\n    }\n  }\n\n  _onTileLoad(tile) {\n    const layer = this.getCurrentLayer();\n    layer.props.onTileLoad(tile);\n\n    if (tile.isVisible) {\n      this.setNeedsUpdate();\n    }\n  }\n\n  _onTileError(error, tile) {\n    const layer = this.getCurrentLayer();\n    layer.props.onTileError(error);\n    // errorred tiles should not block rendering, are considered \"loaded\" with empty data\n    layer._updateTileset();\n\n    if (tile.isVisible) {\n      this.setNeedsUpdate();\n    }\n  }\n\n  _onTileUnload(tile) {\n    const layer = this.getCurrentLayer();\n    layer.props.onTileUnload(tile);\n  }\n\n  // Methods for subclass to override\n\n  getTileData(tile) {\n    const {data} = this.props;\n    const {getTileData, fetch} = this.getCurrentLayer().props;\n    const {signal} = tile;\n\n    tile.url = getURLFromTemplate(data, tile);\n\n    if (getTileData) {\n      return getTileData(tile);\n    }\n    if (tile.url) {\n      return fetch(tile.url, {layer: this, signal});\n    }\n    return null;\n  }\n\n  renderSubLayers(props) {\n    return this.props.renderSubLayers(props);\n  }\n\n  getHighlightedObjectIndex() {\n    return -1;\n  }\n\n  getPickingInfo({info, sourceLayer}) {\n    info.sourceLayer = sourceLayer;\n    info.tile = sourceLayer.props.tile;\n    return info;\n  }\n\n  renderLayers() {\n    const {visible} = this.props;\n    return this.state.tileset.tiles.map(tile => {\n      // For a tile to be visible:\n      // - parent layer must be visible\n      // - tile must be visible in the current viewport\n      const isVisible = visible && tile.isVisible;\n      const highlightedObjectIndex = this.getHighlightedObjectIndex(tile);\n      // cache the rendered layer in the tile\n      if (!tile.isLoaded) {\n        // no op\n      } else if (!tile.layers) {\n        const layers = this.renderSubLayers(\n          Object.assign({}, this.props, {\n            id: `${this.id}-${tile.x}-${tile.y}-${tile.z}`,\n            data: tile.data,\n            visible: isVisible,\n            _offset: 0,\n            tile,\n            highlightedObjectIndex\n          })\n        );\n        tile.layers = flatten(layers, Boolean);\n      } else if (\n        tile.layers[0] &&\n        (tile.layers[0].props.visible !== isVisible ||\n          tile.layers[0].props.highlightedObjectIndex !== highlightedObjectIndex)\n      ) {\n        tile.layers = tile.layers.map(layer =>\n          layer.clone({visible: isVisible, highlightedObjectIndex})\n        );\n      }\n      return tile.layers;\n    });\n  }\n}\n\nTileLayer.layerName = 'TileLayer';\nTileLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}