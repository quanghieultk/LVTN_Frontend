{"ast":null,"code":"import { chatConstants } from \"../constants/chat.constants\";\nexport function chat(state = {\n  rooms: [],\n  currentRoom: null,\n  roomsFetching: false,\n  roomId: null,\n  callingModal: false,\n  answeringModal: {\n    isOpen: false\n  },\n  searchedRooms: null\n}, action) {\n  switch (action.type) {\n    case chatConstants.TYPING:\n      if (state[action.roomId]) {\n        return { ...state,\n          [action.roomId]: { ...state[action.roomId],\n            isTyping: true\n          }\n        };\n      } else {\n        return { ...state\n        };\n      }\n\n    case chatConstants.STOPPED_TYPING:\n      if (state[action.roomId]) {\n        return { ...state,\n          [action.roomId]: { ...state[action.roomId],\n            isTyping: false\n          }\n        };\n      } else {\n        return { ...state\n        };\n      }\n\n    case chatConstants.CHANGE_ROOM:\n      action.clearRoom != null ? state[action.clearRoom].messages = [] : '';\n      return { ...state,\n        currentRoom: action.room,\n        roomId: action.room._id\n      };\n\n    case chatConstants.INIT_MESSAGE_ARRAY:\n      if (!state[action.roomId]) {\n        return { ...state,\n          [action.roomId]: {\n            messages: [],\n            initialMessagesFetchig: false,\n            messageFetching: false,\n            isTyping: false\n          }\n        };\n      } else {\n        return { ...state\n        };\n      }\n\n    case chatConstants.GET_ROOMS_REQUEST:\n      return { ...state,\n        roomsFetching: true\n      };\n\n    case chatConstants.GET_ROOMS_SUCCESS:\n      return { ...state,\n        rooms: action.rooms,\n        roomsFetching: false\n      };\n\n    case chatConstants.ADD_NEW_ROOM:\n      return { ...state,\n        rooms: [action.room, ...state.rooms]\n      };\n\n    case chatConstants.GET_MESSAGES_INITIAL_REQUEST:\n      return { ...state,\n        [action.roomId]: { ...state[action.roomId],\n          initialMessagesFetchig: true\n        }\n      };\n\n    case chatConstants.GET_MESSAGES_REQUEST:\n      return { ...state,\n        [action.roomId]: { ...state[action.roomId],\n          messageFetching: true\n        }\n      };\n\n    case chatConstants.GET_MESSAGES_SUCCESS:\n      let messages = action.data.messages;\n      let prev = null;\n\n      for (let i = 0; i < messages.length; i++) {\n        if (prev !== messages[i].sender) {\n          messages[i].picture = true;\n          prev = messages[i].sender;\n        } else {\n          messages[i].picture = false;\n        }\n      }\n\n      return { ...state,\n        [action.data.roomId]: { ...state[action.data.roomId],\n          messages: [...action.data.messages, ...state[action.data.roomId].messages],\n          messageFetching: false,\n          initialMessagesFetchig: false\n        }\n      };\n\n    case chatConstants.SEND_MESSAGE_REQUEST:\n      let currentRoom = state.currentRoom;\n\n      if (currentRoom && state.currentRoom._id === action.message.roomId) {\n        currentRoom = { ...state.currentRoom,\n          messages: state.currentRoom.messages + 1\n        };\n      }\n\n      if (state[action.message.roomId]) {\n        const messages = state[action.message.roomId].messages;\n        if (!messages.length) action.message.picture = true;else if (messages[messages.length - 1].sender !== action.message.sender) action.message.picture = true;else action.message.picture = false;\n        return { ...state,\n          [action.message.roomId]: { ...state[action.message.roomId],\n            messages: [...state[action.message.roomId].messages, action.message]\n          },\n          rooms: state.rooms.map(room => {\n            if (room._id === action.message.roomId) {\n              return { ...room,\n                messages: room.messages + 1\n              };\n            } else {\n              return room;\n            }\n          }),\n          currentRoom\n        };\n      } else {\n        return { ...state\n        };\n      }\n\n    case chatConstants.SEND_MESSAGE_SUCCESS:\n      if (state[action.message.roomId]) {\n        const index = state.rooms.findIndex(room => room._id === action.message.roomId);\n        const newRoom = state.rooms[index];\n        const messages = state[action.message.roomId].messages;\n        if (messages.length <= 1) action.message.picture = true;else if (messages[messages.length - 2].sender !== action.message.sender) action.message.picture = true;else action.message.picture = false;\n        return { ...state,\n          [action.message.roomId]: { ...state[action.message.roomId],\n            messages: state[action.message.roomId].messages.map(message => {\n              if (message.uuid === action.message.uuid) {\n                return action.message;\n              } else {\n                return message;\n              }\n            })\n          },\n          rooms: [{ ...newRoom,\n            //messages: newRoom.messages + 1,\n            lastMessage: [action.message]\n          }, ...state.rooms.filter(room => room._id !== action.message.roomId)]\n        };\n      } else {\n        return { ...state\n        };\n      }\n\n    case chatConstants.NEW_MESSAGE:\n      if (state[action.message.roomId]) {\n        const index = state.rooms.findIndex(room => room._id === action.message.roomId);\n        const newRoom = state.rooms[index];\n        const messages = state[action.message.roomId].messages;\n        if (!messages.length) action.message.picture = true;else if (messages[messages.length - 1].sender !== action.message.sender) action.message.picture = true;else action.message.picture = false;\n        let currentRoom = state.currentRoom;\n\n        if (currentRoom && state.currentRoom._id === action.message.roomId) {\n          currentRoom = { ...state.currentRoom,\n            messages: state.currentRoom.messages + 1\n          };\n        }\n\n        return { ...state,\n          [action.message.roomId]: { ...state[action.message.roomId],\n            messages: [...state[action.message.roomId].messages, action.message]\n          },\n          currentRoom,\n          rooms: [{ ...newRoom,\n            messages: newRoom.messages + 1,\n            lastMessage: [action.message]\n          }, ...state.rooms.filter(room => room._id !== action.message.roomId)]\n        };\n      } else {\n        return { ...state\n        };\n      }\n\n    case chatConstants.READ_MESSAGES:\n      return { ...state,\n        [action.roomId]: { ...state[action.roomId],\n          messages: state[action.roomId].messages.map(message => {\n            if (action.messageIds.includes(message._id)) {\n              return { ...message,\n                read: true\n              };\n            } else {\n              return { ...message\n              };\n            }\n          })\n        }\n      };\n\n    case chatConstants.CHANGE_ACTIVITY_STATUS:\n      return { ...state,\n        rooms: state.rooms.map(room => {\n          if (room.members[0]._id === action.user.user) {\n            room.members[0].activityStatus = action.user.activityStatus;\n            return { ...room\n            };\n          } else if (room.members[1]._id === action.user.user) {\n            room.members[1].activityStatus = action.user.activityStatus;\n            return { ...room\n            };\n          } else {\n            return { ...room\n            };\n          }\n        })\n      };\n\n    case chatConstants.RECEIVE_READ_MESSAGES:\n      if (state[action.data.roomId]) {\n        return { ...state,\n          [action.data.roomId]: { ...state[action.data.roomId],\n            messages: state[action.data.roomId].messages.map(message => {\n              if (action.data.messageIds.includes(message._id)) {\n                return { ...message,\n                  read: true\n                };\n              } else {\n                return { ...message\n                };\n              }\n            })\n          }\n        };\n      } else {\n        return { ...state\n        };\n      }\n\n    case chatConstants.OPEN_CALLING_MODAL:\n      return { ...state,\n        callingModal: true\n      };\n\n    case chatConstants.CLOSE_CALLING_MODAL:\n      return { ...state,\n        callingModal: false\n      };\n\n    case chatConstants.OPEN_ANSWERING_MODAL:\n      return { ...state,\n        answeringModal: { ...state.answeringModal,\n          isOpen: true,\n          webRtc: { ...state.webRtc,\n            ...action.data.webRtc\n          },\n          caller: { ...state.caller,\n            ...action.data.caller\n          },\n          room: { ...state.room,\n            ...action.data.room\n          }\n        }\n      };\n\n    case chatConstants.CLOSE_ANSWERING_MODAL:\n      return { ...state,\n        answeringModal: { ...state.answeringModal,\n          isOpen: false,\n          webRtc: {},\n          caller: {},\n          room: {}\n        }\n      };\n\n    case chatConstants.SEARCH_USERS:\n      return { ...state,\n        searchedRooms: action.rooms\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["D:/LVTN/LVTN/cuisine-net/src/reducers/chat.reducer.js"],"names":["chatConstants","chat","state","rooms","currentRoom","roomsFetching","roomId","callingModal","answeringModal","isOpen","searchedRooms","action","type","TYPING","isTyping","STOPPED_TYPING","CHANGE_ROOM","clearRoom","messages","room","_id","INIT_MESSAGE_ARRAY","initialMessagesFetchig","messageFetching","GET_ROOMS_REQUEST","GET_ROOMS_SUCCESS","ADD_NEW_ROOM","GET_MESSAGES_INITIAL_REQUEST","GET_MESSAGES_REQUEST","GET_MESSAGES_SUCCESS","data","prev","i","length","sender","picture","SEND_MESSAGE_REQUEST","message","map","SEND_MESSAGE_SUCCESS","index","findIndex","newRoom","uuid","lastMessage","filter","NEW_MESSAGE","READ_MESSAGES","messageIds","includes","read","CHANGE_ACTIVITY_STATUS","members","user","activityStatus","RECEIVE_READ_MESSAGES","OPEN_CALLING_MODAL","CLOSE_CALLING_MODAL","OPEN_ANSWERING_MODAL","webRtc","caller","CLOSE_ANSWERING_MODAL","SEARCH_USERS"],"mappings":"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","sourcesContent":["import { chatConstants } from \"../constants/chat.constants\";\r\n\r\nexport function chat(\r\n    state = {\r\n      rooms: [],\r\n      currentRoom: null,\r\n      roomsFetching: false,\r\n      roomId: null,\r\n      callingModal: false,\r\n      answeringModal: {\r\n        isOpen: false,\r\n      },\r\n      searchedRooms: null,\r\n    },\r\n    action\r\n  ) {\r\n    switch (action.type) {\r\n      case chatConstants.TYPING:\r\n        if (state[action.roomId]) {\r\n          return {\r\n            ...state,\r\n            [action.roomId]: {\r\n              ...state[action.roomId],\r\n              isTyping: true,\r\n            },\r\n          };\r\n        } else {\r\n          return {\r\n            ...state,\r\n          };\r\n        }\r\n      case chatConstants.STOPPED_TYPING:\r\n        if (state[action.roomId]) {\r\n          return {\r\n            ...state,\r\n            [action.roomId]: {\r\n              ...state[action.roomId],\r\n              isTyping: false,\r\n            },\r\n          };\r\n        } else {\r\n          return {\r\n            ...state,\r\n          };\r\n        }\r\n      case chatConstants.CHANGE_ROOM:\r\n        action.clearRoom!=null?state[action.clearRoom].messages=[]:'';\r\n        return {\r\n          ...state,\r\n          currentRoom: action.room,\r\n          roomId: action.room._id,\r\n        };\r\n      case chatConstants.INIT_MESSAGE_ARRAY:\r\n        if (!state[action.roomId]) {\r\n          return {\r\n            ...state,\r\n            [action.roomId]: {\r\n              messages: [],\r\n              initialMessagesFetchig: false,\r\n              messageFetching: false,\r\n              isTyping: false,\r\n            },\r\n          };\r\n        } else {\r\n          return {\r\n            ...state,\r\n          };\r\n        }\r\n  \r\n      case chatConstants.GET_ROOMS_REQUEST:\r\n        return {\r\n          ...state,\r\n          roomsFetching: true,\r\n        };\r\n      case chatConstants.GET_ROOMS_SUCCESS:\r\n        return {\r\n          ...state,\r\n          rooms: action.rooms,\r\n          roomsFetching: false,\r\n        };\r\n      case chatConstants.ADD_NEW_ROOM:\r\n        return {\r\n          ...state,\r\n          rooms: [action.room, ...state.rooms],\r\n        };\r\n      case chatConstants.GET_MESSAGES_INITIAL_REQUEST:\r\n        return {\r\n          ...state,\r\n          [action.roomId]: {\r\n            ...state[action.roomId],\r\n            initialMessagesFetchig: true,\r\n          },\r\n        };\r\n      case chatConstants.GET_MESSAGES_REQUEST:\r\n        return {\r\n          ...state,\r\n          [action.roomId]: {\r\n            ...state[action.roomId],\r\n            messageFetching: true,\r\n          },\r\n        };\r\n      case chatConstants.GET_MESSAGES_SUCCESS:\r\n        let messages = action.data.messages;\r\n        let prev = null;\r\n  \r\n        for (let i = 0; i < messages.length; i++) {\r\n          if (prev !== messages[i].sender) {\r\n            messages[i].picture = true;\r\n            prev = messages[i].sender;\r\n          } else {\r\n            messages[i].picture = false;\r\n          }\r\n        }\r\n  \r\n        return {\r\n          ...state,\r\n          [action.data.roomId]: {\r\n            ...state[action.data.roomId],\r\n            messages: [\r\n              ...action.data.messages,\r\n              ...state[action.data.roomId].messages,\r\n            ],\r\n            messageFetching: false,\r\n            initialMessagesFetchig: false,\r\n          },\r\n        };\r\n      case chatConstants.SEND_MESSAGE_REQUEST:\r\n        let currentRoom = state.currentRoom;\r\n        if (currentRoom && state.currentRoom._id === action.message.roomId) {\r\n          currentRoom = {\r\n            ...state.currentRoom,\r\n            messages: state.currentRoom.messages + 1,\r\n          };\r\n        }\r\n  \r\n        if (state[action.message.roomId]) {\r\n          const messages = state[action.message.roomId].messages;\r\n          if (!messages.length) action.message.picture = true;\r\n          else if (messages[messages.length - 1].sender !== action.message.sender)\r\n            action.message.picture = true;\r\n          else action.message.picture = false;\r\n  \r\n          return {\r\n            ...state,\r\n            [action.message.roomId]: {\r\n              ...state[action.message.roomId],\r\n              messages: [\r\n                ...state[action.message.roomId].messages,\r\n                action.message,\r\n              ],\r\n            },\r\n            rooms: state.rooms.map((room) => {\r\n              if (room._id === action.message.roomId) {\r\n                return {\r\n                  ...room,\r\n                  messages: room.messages + 1,\r\n                };\r\n              } else {\r\n                return room;\r\n              }\r\n            }),\r\n            currentRoom,\r\n          };\r\n        } else {\r\n          return {\r\n            ...state,\r\n          };\r\n        }\r\n      case chatConstants.SEND_MESSAGE_SUCCESS:\r\n        if (state[action.message.roomId]) {\r\n          const index = state.rooms.findIndex(\r\n            (room) => room._id === action.message.roomId\r\n          );\r\n          const newRoom = state.rooms[index];\r\n  \r\n          const messages = state[action.message.roomId].messages;\r\n          if (messages.length <= 1) action.message.picture = true;\r\n          else if (messages[messages.length - 2].sender !== action.message.sender)\r\n            action.message.picture = true;\r\n          else action.message.picture = false;\r\n  \r\n          return {\r\n            ...state,\r\n            [action.message.roomId]: {\r\n              ...state[action.message.roomId],\r\n              messages: state[action.message.roomId].messages.map((message) => {\r\n                if (message.uuid === action.message.uuid) {\r\n                  return action.message;\r\n                } else {\r\n                  return message;\r\n                }\r\n              }),\r\n            },\r\n            rooms: [\r\n              {\r\n                ...newRoom,\r\n                //messages: newRoom.messages + 1,\r\n                lastMessage: [action.message],\r\n              },\r\n              ...state.rooms.filter((room) => room._id !== action.message.roomId),\r\n            ],\r\n          };\r\n        } else {\r\n          return {\r\n            ...state,\r\n          };\r\n        }\r\n      case chatConstants.NEW_MESSAGE:\r\n        if (state[action.message.roomId]) {\r\n          const index = state.rooms.findIndex(\r\n            (room) => room._id === action.message.roomId\r\n          );\r\n          const newRoom = state.rooms[index];\r\n  \r\n          const messages = state[action.message.roomId].messages;\r\n          if (!messages.length) action.message.picture = true;\r\n          else if (messages[messages.length - 1].sender !== action.message.sender)\r\n            action.message.picture = true;\r\n          else action.message.picture = false;\r\n  \r\n          let currentRoom = state.currentRoom;\r\n          if (currentRoom && state.currentRoom._id === action.message.roomId) {\r\n            currentRoom = {\r\n              ...state.currentRoom,\r\n              messages: state.currentRoom.messages + 1,\r\n            };\r\n          }\r\n          return {\r\n            ...state,\r\n            [action.message.roomId]: {\r\n              ...state[action.message.roomId],\r\n              messages: [\r\n                ...state[action.message.roomId].messages,\r\n                action.message,\r\n              ],\r\n            },\r\n            currentRoom,\r\n            rooms: [\r\n              {\r\n                ...newRoom,\r\n                messages: newRoom.messages + 1,\r\n                lastMessage: [action.message],\r\n              },\r\n              ...state.rooms.filter((room) => room._id !== action.message.roomId),\r\n            ],\r\n          };\r\n        } else {\r\n          return {\r\n            ...state,\r\n          };\r\n        }\r\n      case chatConstants.READ_MESSAGES:\r\n        return {\r\n          ...state,\r\n          [action.roomId]: {\r\n            ...state[action.roomId],\r\n            messages: state[action.roomId].messages.map((message) => {\r\n              if (action.messageIds.includes(message._id)) {\r\n                return {\r\n                  ...message,\r\n                  read: true,\r\n                };\r\n              } else {\r\n                return {\r\n                  ...message,\r\n                };\r\n              }\r\n            }),\r\n          },\r\n        };\r\n      case chatConstants.CHANGE_ACTIVITY_STATUS:\r\n        return {\r\n          ...state,\r\n          rooms: state.rooms.map((room) => {\r\n            if (room.members[0]._id === action.user.user) {\r\n              room.members[0].activityStatus = action.user.activityStatus;\r\n              return {\r\n                ...room,\r\n              };\r\n            } else if (room.members[1]._id === action.user.user) {\r\n              room.members[1].activityStatus = action.user.activityStatus;\r\n              return {\r\n                ...room,\r\n              };\r\n            } else {\r\n              return {\r\n                ...room,\r\n              };\r\n            }\r\n          }),\r\n        };\r\n      case chatConstants.RECEIVE_READ_MESSAGES:\r\n        if (state[action.data.roomId]) {\r\n          return {\r\n            ...state,\r\n            [action.data.roomId]: {\r\n              ...state[action.data.roomId],\r\n              messages: state[action.data.roomId].messages.map((message) => {\r\n                if (action.data.messageIds.includes(message._id)) {\r\n                  return {\r\n                    ...message,\r\n                    read: true,\r\n                  };\r\n                } else {\r\n                  return {\r\n                    ...message,\r\n                  };\r\n                }\r\n              }),\r\n            },\r\n          };\r\n        } else {\r\n          return {\r\n            ...state,\r\n          };\r\n        }\r\n      case chatConstants.OPEN_CALLING_MODAL:\r\n        return {\r\n          ...state,\r\n          callingModal: true,\r\n        };\r\n      case chatConstants.CLOSE_CALLING_MODAL:\r\n        return {\r\n          ...state,\r\n          callingModal: false,\r\n        };\r\n      case chatConstants.OPEN_ANSWERING_MODAL:\r\n        return {\r\n          ...state,\r\n          answeringModal: {\r\n            ...state.answeringModal,\r\n            isOpen: true,\r\n            webRtc: {\r\n              ...state.webRtc,\r\n              ...action.data.webRtc,\r\n            },\r\n            caller: {\r\n              ...state.caller,\r\n              ...action.data.caller,\r\n            },\r\n            room: {\r\n              ...state.room,\r\n              ...action.data.room,\r\n            },\r\n          },\r\n        };\r\n      case chatConstants.CLOSE_ANSWERING_MODAL:\r\n        return {\r\n          ...state,\r\n          answeringModal: {\r\n            ...state.answeringModal,\r\n            isOpen: false,\r\n            webRtc: {},\r\n            caller: {},\r\n            room: {},\r\n          },\r\n        };\r\n      case chatConstants.SEARCH_USERS:\r\n        return {\r\n          ...state,\r\n          searchedRooms: action.rooms,\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  }"]},"metadata":{},"sourceType":"module"}