{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { getOSMTileIndices } from './tile-2d-traversal';\nvar TILE_SIZE = 512;\nvar DEFAULT_EXTENT = [-Infinity, -Infinity, Infinity, Infinity];\nexport var urlType = {\n  type: 'url',\n  value: '',\n  validate: function validate(value) {\n    return typeof value === 'string' || Array.isArray(value) && value.every(function (url) {\n      return typeof url === 'string';\n    });\n  },\n  equals: function equals(value1, value2) {\n    if (value1 === value2) {\n      return true;\n    }\n\n    if (!Array.isArray(value1) || !Array.isArray(value2)) {\n      return false;\n    }\n\n    var len = value1.length;\n\n    if (len !== value2.length) {\n      return false;\n    }\n\n    for (var i = 0; i < len; i++) {\n      if (value1[i] !== value2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n};\n\nfunction transformBox(bbox, modelMatrix) {\n  var transformedCoords = [modelMatrix.transformPoint([bbox[0], bbox[1]]), modelMatrix.transformPoint([bbox[2], bbox[1]]), modelMatrix.transformPoint([bbox[0], bbox[3]]), modelMatrix.transformPoint([bbox[2], bbox[3]])];\n  var transformedBox = [Math.min.apply(Math, _toConsumableArray(transformedCoords.map(function (i) {\n    return i[0];\n  }))), Math.min.apply(Math, _toConsumableArray(transformedCoords.map(function (i) {\n    return i[1];\n  }))), Math.max.apply(Math, _toConsumableArray(transformedCoords.map(function (i) {\n    return i[0];\n  }))), Math.max.apply(Math, _toConsumableArray(transformedCoords.map(function (i) {\n    return i[1];\n  })))];\n  return transformedBox;\n}\n\nexport function getURLFromTemplate(template, properties) {\n  if (!template || !template.length) {\n    return null;\n  }\n\n  if (Array.isArray(template)) {\n    var index = Math.abs(properties.x + properties.y) % template.length;\n    template = template[index];\n  }\n\n  var x = properties.x,\n      y = properties.y,\n      z = properties.z;\n  return template.replace('{x}', x).replace('{y}', y).replace('{z}', z).replace('{-y}', Math.pow(2, z) - y - 1);\n}\n\nfunction getBoundingBox(viewport, zRange, extent) {\n  var bounds;\n\n  if (zRange && zRange.length === 2) {\n    var _zRange = _slicedToArray(zRange, 2),\n        minZ = _zRange[0],\n        maxZ = _zRange[1];\n\n    var bounds0 = viewport.getBounds({\n      z: minZ\n    });\n    var bounds1 = viewport.getBounds({\n      z: maxZ\n    });\n    bounds = [Math.min(bounds0[0], bounds1[0]), Math.min(bounds0[1], bounds1[1]), Math.max(bounds0[2], bounds1[2]), Math.max(bounds0[3], bounds1[3])];\n  } else {\n    bounds = viewport.getBounds();\n  }\n\n  if (!viewport.isGeospatial) {\n    return [Math.max(Math.min(bounds[0], extent[2]), extent[0]), Math.max(Math.min(bounds[1], extent[3]), extent[1]), Math.min(Math.max(bounds[2], extent[0]), extent[2]), Math.min(Math.max(bounds[3], extent[1]), extent[3])];\n  }\n\n  return [Math.max(bounds[0], extent[0]), Math.max(bounds[1], extent[1]), Math.min(bounds[2], extent[2]), Math.min(bounds[3], extent[3])];\n}\n\nfunction getIndexingCoords(bbox, scale, modelMatrixInverse) {\n  if (modelMatrixInverse) {\n    var transformedTileIndex = transformBox(bbox, modelMatrixInverse).map(function (i) {\n      return i * scale / TILE_SIZE;\n    });\n    return transformedTileIndex;\n  }\n\n  return bbox.map(function (i) {\n    return i * scale / TILE_SIZE;\n  });\n}\n\nfunction getScale(z) {\n  return Math.pow(2, z);\n}\n\nexport function osmTile2lngLat(x, y, z) {\n  var scale = getScale(z);\n  var lng = x / scale * 360 - 180;\n  var n = Math.PI - 2 * Math.PI * y / scale;\n  var lat = 180 / Math.PI * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n)));\n  return [lng, lat];\n}\n\nfunction tile2XY(x, y, z) {\n  var scale = getScale(z);\n  return [x / scale * TILE_SIZE, y / scale * TILE_SIZE];\n}\n\nexport function tileToBoundingBox(viewport, x, y, z) {\n  if (viewport.isGeospatial) {\n    var _osmTile2lngLat = osmTile2lngLat(x, y, z),\n        _osmTile2lngLat2 = _slicedToArray(_osmTile2lngLat, 2),\n        west = _osmTile2lngLat2[0],\n        north = _osmTile2lngLat2[1];\n\n    var _osmTile2lngLat3 = osmTile2lngLat(x + 1, y + 1, z),\n        _osmTile2lngLat4 = _slicedToArray(_osmTile2lngLat3, 2),\n        east = _osmTile2lngLat4[0],\n        south = _osmTile2lngLat4[1];\n\n    return {\n      west: west,\n      north: north,\n      east: east,\n      south: south\n    };\n  }\n\n  var _tile2XY = tile2XY(x, y, z),\n      _tile2XY2 = _slicedToArray(_tile2XY, 2),\n      left = _tile2XY2[0],\n      top = _tile2XY2[1];\n\n  var _tile2XY3 = tile2XY(x + 1, y + 1, z),\n      _tile2XY4 = _slicedToArray(_tile2XY3, 2),\n      right = _tile2XY4[0],\n      bottom = _tile2XY4[1];\n\n  return {\n    left: left,\n    top: top,\n    right: right,\n    bottom: bottom\n  };\n}\n\nfunction getIdentityTileIndices(viewport, z, extent, modelMatrixInverse) {\n  var bbox = getBoundingBox(viewport, null, extent);\n  var scale = getScale(z);\n\n  var _getIndexingCoords = getIndexingCoords(bbox, scale, modelMatrixInverse),\n      _getIndexingCoords2 = _slicedToArray(_getIndexingCoords, 4),\n      minX = _getIndexingCoords2[0],\n      minY = _getIndexingCoords2[1],\n      maxX = _getIndexingCoords2[2],\n      maxY = _getIndexingCoords2[3];\n\n  var indices = [];\n\n  for (var x = Math.floor(minX); x < maxX; x++) {\n    for (var y = Math.floor(minY); y < maxY; y++) {\n      indices.push({\n        x: x,\n        y: y,\n        z: z\n      });\n    }\n  }\n\n  return indices;\n}\n\nexport function getTileIndices(_ref) {\n  var viewport = _ref.viewport,\n      maxZoom = _ref.maxZoom,\n      minZoom = _ref.minZoom,\n      zRange = _ref.zRange,\n      extent = _ref.extent,\n      _ref$tileSize = _ref.tileSize,\n      tileSize = _ref$tileSize === void 0 ? TILE_SIZE : _ref$tileSize,\n      modelMatrix = _ref.modelMatrix,\n      modelMatrixInverse = _ref.modelMatrixInverse;\n  var z = Math.round(viewport.zoom + Math.log2(TILE_SIZE / tileSize));\n\n  if (Number.isFinite(minZoom) && z < minZoom) {\n    if (!extent) {\n      return [];\n    }\n\n    z = minZoom;\n  }\n\n  if (Number.isFinite(maxZoom) && z > maxZoom) {\n    z = maxZoom;\n  }\n\n  var transformedExtent = extent;\n\n  if (modelMatrix && modelMatrixInverse && extent && !viewport.isGeospatial) {\n    transformedExtent = transformBox(extent, modelMatrix);\n  }\n\n  return viewport.isGeospatial ? getOSMTileIndices(viewport, z, zRange, extent || DEFAULT_EXTENT) : getIdentityTileIndices(viewport, z, transformedExtent || DEFAULT_EXTENT, modelMatrixInverse);\n}\nexport function isURLTemplate(s) {\n  return /(?=.*{z})(?=.*{x})(?=.*({y}|{-y}))/.test(s);\n}","map":{"version":3,"sources":["../../../src/tile-layer/utils.js"],"names":["TILE_SIZE","DEFAULT_EXTENT","urlType","type","value","validate","Array","equals","value1","len","value2","i","transformedCoords","modelMatrix","bbox","transformedBox","Math","template","index","properties","x","y","z","zRange","minZ","maxZ","bounds0","bounds1","bounds","viewport","extent","transformedTileIndex","scale","getScale","lng","n","lat","west","north","osmTile2lngLat","east","south","left","top","tile2XY","right","bottom","getBoundingBox","minX","minY","maxX","maxY","getIndexingCoords","indices","maxZoom","minZoom","tileSize","modelMatrixInverse","Number","transformedExtent","transformBox","getOSMTileIndices","getIdentityTileIndices"],"mappings":"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","sourcesContent":["import {getOSMTileIndices} from './tile-2d-traversal';\n\nconst TILE_SIZE = 512;\nconst DEFAULT_EXTENT = [-Infinity, -Infinity, Infinity, Infinity];\n\nexport const urlType = {\n  type: 'url',\n  value: '',\n  validate: value =>\n    typeof value === 'string' ||\n    (Array.isArray(value) && value.every(url => typeof url === 'string')),\n  equals: (value1, value2) => {\n    if (value1 === value2) {\n      return true;\n    }\n    if (!Array.isArray(value1) || !Array.isArray(value2)) {\n      return false;\n    }\n    const len = value1.length;\n    if (len !== value2.length) {\n      return false;\n    }\n    for (let i = 0; i < len; i++) {\n      if (value1[i] !== value2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n};\n\nfunction transformBox(bbox, modelMatrix) {\n  const transformedCoords = [\n    // top-left\n    modelMatrix.transformPoint([bbox[0], bbox[1]]),\n    // top-right\n    modelMatrix.transformPoint([bbox[2], bbox[1]]),\n    // bottom-left\n    modelMatrix.transformPoint([bbox[0], bbox[3]]),\n    // bottom-right\n    modelMatrix.transformPoint([bbox[2], bbox[3]])\n  ];\n  const transformedBox = [\n    // Minimum x coord\n    Math.min(...transformedCoords.map(i => i[0])),\n    // Minimum y coord\n    Math.min(...transformedCoords.map(i => i[1])),\n    // Max x coord\n    Math.max(...transformedCoords.map(i => i[0])),\n    // Max y coord\n    Math.max(...transformedCoords.map(i => i[1]))\n  ];\n  return transformedBox;\n}\n\nexport function getURLFromTemplate(template, properties) {\n  if (!template || !template.length) {\n    return null;\n  }\n  if (Array.isArray(template)) {\n    const index = Math.abs(properties.x + properties.y) % template.length;\n    template = template[index];\n  }\n\n  const {x, y, z} = properties;\n  return template\n    .replace('{x}', x)\n    .replace('{y}', y)\n    .replace('{z}', z)\n    .replace('{-y}', Math.pow(2, z) - y - 1);\n}\n\n/**\n * gets the bounding box of a viewport\n */\nfunction getBoundingBox(viewport, zRange, extent) {\n  let bounds;\n  if (zRange && zRange.length === 2) {\n    const [minZ, maxZ] = zRange;\n    const bounds0 = viewport.getBounds({z: minZ});\n    const bounds1 = viewport.getBounds({z: maxZ});\n    bounds = [\n      Math.min(bounds0[0], bounds1[0]),\n      Math.min(bounds0[1], bounds1[1]),\n      Math.max(bounds0[2], bounds1[2]),\n      Math.max(bounds0[3], bounds1[3])\n    ];\n  } else {\n    bounds = viewport.getBounds();\n  }\n  if (!viewport.isGeospatial) {\n    return [\n      // Top corner should not be more then bottom corner in either direction\n      Math.max(Math.min(bounds[0], extent[2]), extent[0]),\n      Math.max(Math.min(bounds[1], extent[3]), extent[1]),\n      // Bottom corner should not be less then top corner in either direction\n      Math.min(Math.max(bounds[2], extent[0]), extent[2]),\n      Math.min(Math.max(bounds[3], extent[1]), extent[3])\n    ];\n  }\n  return [\n    Math.max(bounds[0], extent[0]),\n    Math.max(bounds[1], extent[1]),\n    Math.min(bounds[2], extent[2]),\n    Math.min(bounds[3], extent[3])\n  ];\n}\n\nfunction getIndexingCoords(bbox, scale, modelMatrixInverse) {\n  if (modelMatrixInverse) {\n    const transformedTileIndex = transformBox(bbox, modelMatrixInverse).map(\n      i => (i * scale) / TILE_SIZE\n    );\n    return transformedTileIndex;\n  }\n  return bbox.map(i => (i * scale) / TILE_SIZE);\n}\n\nfunction getScale(z) {\n  return Math.pow(2, z);\n}\n\n// https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#Lon..2Flat._to_tile_numbers_2\nexport function osmTile2lngLat(x, y, z) {\n  const scale = getScale(z);\n  const lng = (x / scale) * 360 - 180;\n  const n = Math.PI - (2 * Math.PI * y) / scale;\n  const lat = (180 / Math.PI) * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n)));\n  return [lng, lat];\n}\n\nfunction tile2XY(x, y, z) {\n  const scale = getScale(z);\n  return [(x / scale) * TILE_SIZE, (y / scale) * TILE_SIZE];\n}\n\nexport function tileToBoundingBox(viewport, x, y, z) {\n  if (viewport.isGeospatial) {\n    const [west, north] = osmTile2lngLat(x, y, z);\n    const [east, south] = osmTile2lngLat(x + 1, y + 1, z);\n    return {west, north, east, south};\n  }\n  const [left, top] = tile2XY(x, y, z);\n  const [right, bottom] = tile2XY(x + 1, y + 1, z);\n  return {left, top, right, bottom};\n}\n\nfunction getIdentityTileIndices(viewport, z, extent, modelMatrixInverse) {\n  const bbox = getBoundingBox(viewport, null, extent);\n  const scale = getScale(z);\n  const [minX, minY, maxX, maxY] = getIndexingCoords(bbox, scale, modelMatrixInverse);\n  const indices = [];\n\n  /*\n      |  TILE  |  TILE  |  TILE  |\n        |(minX)            |(maxX)\n   */\n  for (let x = Math.floor(minX); x < maxX; x++) {\n    for (let y = Math.floor(minY); y < maxY; y++) {\n      indices.push({x, y, z});\n    }\n  }\n  return indices;\n}\n\n/**\n * Returns all tile indices in the current viewport. If the current zoom level is smaller\n * than minZoom, return an empty array. If the current zoom level is greater than maxZoom,\n * return tiles that are on maxZoom.\n */\n// eslint-disable-next-line complexity\nexport function getTileIndices({\n  viewport,\n  maxZoom,\n  minZoom,\n  zRange,\n  extent,\n  tileSize = TILE_SIZE,\n  modelMatrix,\n  modelMatrixInverse\n}) {\n  let z = Math.round(viewport.zoom + Math.log2(TILE_SIZE / tileSize));\n  if (Number.isFinite(minZoom) && z < minZoom) {\n    if (!extent) {\n      return [];\n    }\n    z = minZoom;\n  }\n  if (Number.isFinite(maxZoom) && z > maxZoom) {\n    z = maxZoom;\n  }\n  let transformedExtent = extent;\n  if (modelMatrix && modelMatrixInverse && extent && !viewport.isGeospatial) {\n    transformedExtent = transformBox(extent, modelMatrix);\n  }\n  return viewport.isGeospatial\n    ? getOSMTileIndices(viewport, z, zRange, extent || DEFAULT_EXTENT)\n    : getIdentityTileIndices(viewport, z, transformedExtent || DEFAULT_EXTENT, modelMatrixInverse);\n}\n\n/**\n * Returns true if s is a valid URL template\n */\nexport function isURLTemplate(s) {\n  return /(?=.*{z})(?=.*{x})(?=.*({y}|{-y}))/.test(s);\n}\n"]},"metadata":{},"sourceType":"module"}