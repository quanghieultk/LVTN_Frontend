{"ast":null,"code":"import { authHeader } from '../helpers/auth-header';\nimport axios from 'axios';\nexport const userService = {\n  login,\n  logout,\n  register,\n  getAll,\n  getById,\n  update,\n  delete: _delete\n};\n\nfunction login(username, password) {\n  let email = username;\n  let data = {\n    email: toString(email),\n    password: toString(password)\n  };\n  data = JSON.stringify(data);\n  return axios({\n    method: 'post',\n    url: 'http://localhost:8000/users/login',\n    data: {\n      data\n    }\n  }).then(handleResponse).then(user => {\n    alert(JSON.stringify(user)); // store user details and jwt token in local storage to keep user logged in between page refreshes\n\n    localStorage.setItem('user', JSON.stringify(user));\n    return JSON.stringify(user);\n  }).catch(err => {\n    alert(err);\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('user');\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(`http://localhost:8000/users`, requestOptions).then(handleResponse);\n}\n\nfunction getById(id) {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(`http://localhost:8000/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction register(user) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`http://localhost:8000/users/signup`, requestOptions).then(handleResponse);\n}\n\nfunction update(user) {\n  const requestOptions = {\n    method: 'PUT',\n    headers: { ...authHeader(),\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`http://localhost:8000/users/${user.id}`, requestOptions).then(handleResponse);\n  ;\n} // prefixed function name with underscore because delete is a reserved word in javascript\n\n\nfunction _delete(id) {\n  const requestOptions = {\n    method: 'DELETE',\n    headers: authHeader()\n  };\n  return fetch(`http://localhost:8000/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  alert(JSON.stringify(response));\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout(); // location.reload(true);\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["D:/LVTN/LVTN/cuisine-net/src/services/user.service.js"],"names":["authHeader","axios","userService","login","logout","register","getAll","getById","update","delete","_delete","username","password","email","data","toString","JSON","stringify","method","url","then","handleResponse","user","alert","localStorage","setItem","catch","err","removeItem","requestOptions","headers","fetch","id","body","response","text","parse","ok","status","error","message","statusText","Promise","reject"],"mappings":"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","sourcesContent":["import { authHeader } from '../helpers/auth-header';\r\nimport axios from 'axios';\r\nexport const userService = {\r\n    login,\r\n    logout,\r\n    register,\r\n    getAll,\r\n    getById,\r\n    update,\r\n    delete: _delete\r\n};\r\n\r\nfunction  login(username, password) {\r\n    let email=username;\r\n    let data={\r\n        email : toString(email), \r\n        password: toString(password )\r\n      };\r\n    data=JSON.stringify(data);\r\n    return  axios({\r\n            method: 'post',\r\n            url: 'http://localhost:8000/users/login',\r\n            data: { data}\r\n        })\r\n        .then(handleResponse)\r\n        .then((user) => {\r\n            alert(JSON.stringify(user));\r\n            // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n            localStorage.setItem('user', JSON.stringify(user));\r\n            return JSON.stringify(user);\r\n        }).catch((err)=>{\r\n            alert(err);\r\n        });\r\n}\r\n\r\nfunction logout() {\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem('user');\r\n}\r\n\r\nfunction getAll() {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: authHeader()\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction getById(id) {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: authHeader()\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users/${id}`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction register(user) {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(user)\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users/signup`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction update(user) {\r\n    const requestOptions = {\r\n        method: 'PUT',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(user)\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users/${user.id}`, requestOptions).then(handleResponse);;\r\n}\r\n\r\n// prefixed function name with underscore because delete is a reserved word in javascript\r\nfunction _delete(id) {\r\n    const requestOptions = {\r\n        method: 'DELETE',\r\n        headers: authHeader()\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users/${id}`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction handleResponse(response) {\r\n    alert(JSON.stringify(response));\r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            if (response.status === 401) {\r\n                // auto logout if 401 response returned from api\r\n                logout();\r\n                // location.reload(true);\r\n            }\r\n\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}