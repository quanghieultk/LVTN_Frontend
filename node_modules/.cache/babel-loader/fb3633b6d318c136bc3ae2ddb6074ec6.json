{"ast":null,"code":"import { calculatePickingColors } from './geojson-binary';\n\nfunction createEmptyLayerProps() {\n  return {\n    points: {},\n    lines: {},\n    polygons: {},\n    polygonsOutline: {}\n  };\n}\n\nfunction getCoordinates(f) {\n  return f.geometry.coordinates;\n}\n\nexport function createLayerPropsFromFeatures(features, featuresDiff) {\n  var layerProps = createEmptyLayerProps();\n  var pointFeatures = features.pointFeatures,\n      lineFeatures = features.lineFeatures,\n      polygonFeatures = features.polygonFeatures,\n      polygonOutlineFeatures = features.polygonOutlineFeatures;\n  layerProps.points.data = pointFeatures;\n\n  layerProps.points._dataDiff = featuresDiff.pointFeatures && function () {\n    return featuresDiff.pointFeatures;\n  };\n\n  layerProps.points.getPosition = getCoordinates;\n  layerProps.lines.data = lineFeatures;\n\n  layerProps.lines._dataDiff = featuresDiff.lineFeatures && function () {\n    return featuresDiff.lineFeatures;\n  };\n\n  layerProps.lines.getPath = getCoordinates;\n  layerProps.polygons.data = polygonFeatures;\n\n  layerProps.polygons._dataDiff = featuresDiff.polygonFeatures && function () {\n    return featuresDiff.polygonFeatures;\n  };\n\n  layerProps.polygons.getPolygon = getCoordinates;\n  layerProps.polygonsOutline.data = polygonOutlineFeatures;\n\n  layerProps.polygonsOutline._dataDiff = featuresDiff.polygonOutlineFeatures && function () {\n    return featuresDiff.polygonOutlineFeatures;\n  };\n\n  layerProps.polygonsOutline.getPath = getCoordinates;\n  return layerProps;\n}\nexport function createLayerPropsFromBinary(geojsonBinary, uniqueIdProperty, encodePickingColor) {\n  var layerProps = createEmptyLayerProps();\n  var points = geojsonBinary.points,\n      lines = geojsonBinary.lines,\n      polygons = geojsonBinary.polygons;\n  var customPickingColors = calculatePickingColors(geojsonBinary, uniqueIdProperty, encodePickingColor);\n  layerProps.points.data = {\n    length: points.positions.value.length / points.positions.size,\n    attributes: {\n      getPosition: points.positions,\n      pickingColors: {\n        size: 3,\n        value: customPickingColors.points\n      }\n    },\n    properties: points.properties,\n    numericProps: points.numericProps,\n    featureIds: points.featureIds\n  };\n  layerProps.lines.data = {\n    length: lines.pathIndices.value.length - 1,\n    startIndices: lines.pathIndices.value,\n    attributes: {\n      getPath: lines.positions,\n      pickingColors: {\n        size: 3,\n        value: customPickingColors.lines\n      }\n    },\n    properties: lines.properties,\n    numericProps: lines.numericProps,\n    featureIds: lines.featureIds\n  };\n  layerProps.lines._pathType = 'open';\n  layerProps.polygons.data = {\n    length: polygons.primitivePolygonIndices.value.length,\n    startIndices: polygons.primitivePolygonIndices.value,\n    attributes: {\n      getPolygon: polygons.positions,\n      pickingColors: {\n        size: 3,\n        value: customPickingColors.polygons\n      }\n    },\n    properties: polygons.properties,\n    numericProps: polygons.numericProps,\n    featureIds: polygons.featureIds\n  };\n  layerProps.polygons._normalize = false;\n  layerProps.polygonsOutline.data = {\n    length: polygons.primitivePolygonIndices.value.length,\n    startIndices: polygons.primitivePolygonIndices.value,\n    attributes: {\n      getPath: polygons.positions,\n      instancePickingColors: {\n        size: 3,\n        value: customPickingColors.polygons\n      }\n    },\n    properties: polygons.properties,\n    numericProps: polygons.numericProps,\n    featureIds: polygons.featureIds\n  };\n  layerProps.polygonsOutline._pathType = 'open';\n  return layerProps;\n}","map":{"version":3,"sources":["../../../src/geojson-layer/geojson-layer-props.js"],"names":["points","lines","polygons","polygonsOutline","f","layerProps","createEmptyLayerProps","pointFeatures","lineFeatures","polygonFeatures","polygonOutlineFeatures","features","featuresDiff","geojsonBinary","customPickingColors","calculatePickingColors","length","attributes","getPosition","pickingColors","size","value","properties","numericProps","featureIds","startIndices","getPath","getPolygon","instancePickingColors"],"mappings":"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","sourcesContent":["import {calculatePickingColors} from './geojson-binary';\n\nfunction createEmptyLayerProps() {\n  return {\n    points: {},\n    lines: {},\n    polygons: {},\n    polygonsOutline: {}\n  };\n}\n\nfunction getCoordinates(f) {\n  return f.geometry.coordinates;\n}\n\nexport function createLayerPropsFromFeatures(features, featuresDiff) {\n  const layerProps = createEmptyLayerProps();\n  const {pointFeatures, lineFeatures, polygonFeatures, polygonOutlineFeatures} = features;\n\n  layerProps.points.data = pointFeatures;\n  layerProps.points._dataDiff = featuresDiff.pointFeatures && (() => featuresDiff.pointFeatures);\n  layerProps.points.getPosition = getCoordinates;\n\n  layerProps.lines.data = lineFeatures;\n  layerProps.lines._dataDiff = featuresDiff.lineFeatures && (() => featuresDiff.lineFeatures);\n  layerProps.lines.getPath = getCoordinates;\n\n  layerProps.polygons.data = polygonFeatures;\n  layerProps.polygons._dataDiff =\n    featuresDiff.polygonFeatures && (() => featuresDiff.polygonFeatures);\n  layerProps.polygons.getPolygon = getCoordinates;\n\n  layerProps.polygonsOutline.data = polygonOutlineFeatures;\n  layerProps.polygonsOutline._dataDiff =\n    featuresDiff.polygonOutlineFeatures && (() => featuresDiff.polygonOutlineFeatures);\n  layerProps.polygonsOutline.getPath = getCoordinates;\n\n  return layerProps;\n}\n\nexport function createLayerPropsFromBinary(geojsonBinary, uniqueIdProperty, encodePickingColor) {\n  const layerProps = createEmptyLayerProps();\n  const {points, lines, polygons} = geojsonBinary;\n\n  const customPickingColors = calculatePickingColors(\n    geojsonBinary,\n    uniqueIdProperty,\n    encodePickingColor\n  );\n\n  layerProps.points.data = {\n    length: points.positions.value.length / points.positions.size,\n    attributes: {\n      getPosition: points.positions,\n      pickingColors: {\n        size: 3,\n        value: customPickingColors.points\n      }\n    },\n    properties: points.properties,\n    numericProps: points.numericProps,\n    featureIds: points.featureIds\n  };\n\n  layerProps.lines.data = {\n    length: lines.pathIndices.value.length - 1,\n    startIndices: lines.pathIndices.value,\n    attributes: {\n      getPath: lines.positions,\n      pickingColors: {\n        size: 3,\n        value: customPickingColors.lines\n      }\n    },\n    properties: lines.properties,\n    numericProps: lines.numericProps,\n    featureIds: lines.featureIds\n  };\n  layerProps.lines._pathType = 'open';\n\n  layerProps.polygons.data = {\n    length: polygons.primitivePolygonIndices.value.length,\n    startIndices: polygons.primitivePolygonIndices.value,\n    attributes: {\n      getPolygon: polygons.positions,\n      pickingColors: {\n        size: 3,\n        value: customPickingColors.polygons\n      }\n    },\n    properties: polygons.properties,\n    numericProps: polygons.numericProps,\n    featureIds: polygons.featureIds\n  };\n  layerProps.polygons._normalize = false;\n\n  layerProps.polygonsOutline.data = {\n    length: polygons.primitivePolygonIndices.value.length,\n    startIndices: polygons.primitivePolygonIndices.value,\n    attributes: {\n      getPath: polygons.positions,\n      instancePickingColors: {\n        size: 3,\n        value: customPickingColors.polygons\n      }\n    },\n    properties: polygons.properties,\n    numericProps: polygons.numericProps,\n    featureIds: polygons.featureIds\n  };\n  layerProps.polygonsOutline._pathType = 'open';\n\n  return layerProps;\n}\n"]},"metadata":{},"sourceType":"module"}