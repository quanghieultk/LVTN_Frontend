{"ast":null,"code":"import { notificationConstants } from \"../constants/notification.constants\";\nimport { notificatonService } from \"../services/notification.service\";\nexport const notificationActions = {\n  toggleNotificationPopup,\n  closeNotificationPopup,\n  addNotification,\n  fetchNotifications,\n  removeNotification,\n  initNotifications\n};\n\nfunction readNotifications(notificationIds) {\n  notificatonService.readNotifications(notificationIds).then(res => {\n    console.log(res);\n  }).catch(error => {\n    console.log(error);\n  });\n}\n\nfunction initNotifications() {\n  return dispatch => {\n    notificatonService.fetchNotifications(null, 0).then(response => {\n      const notifications = response.data.data.data;\n      let total = 0;\n      notifications.forEach(element => {\n        if (element.read == false) {\n          total = total + 1;\n        }\n      });\n      dispatch(success(notifications, total, true));\n    });\n  };\n\n  function success(notifications, total, initialFetch) {\n    return {\n      type: notificationConstants.FETCH_NOTIFICATIONS_SUCCESS,\n      notifications,\n      total,\n      initialFetch\n    };\n  }\n}\n\nfunction fetchNotifications(queryOptions, notificationIds, page) {\n  return dispatch => {\n    notificatonService.fetchNotifications(queryOptions, page).then(response => {\n      const notifications = response.data.data.data;\n      let total = 0;\n      notifications.forEach(element => {\n        if (element.read == false) {\n          total = total + 1;\n        }\n      });\n      dispatch(success(notifications, total, queryOptions.initialFetch)); // const ids = notifications\n      //     .filter(e => !e.read)\n      //     .map(e => e._id)\n      //     .concat(notificationIds);\n      // const uniqueIds = ids\n      //     .filter((item, index) => ids.indexOf(item) === index)\n      //     .filter(item => item !== undefined);\n      // console.log(uniqueIds)\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  function success(notifications, total, initialFetch) {\n    return {\n      type: notificationConstants.FETCH_NOTIFICATIONS_SUCCESS,\n      notifications,\n      total,\n      initialFetch\n    };\n  }\n}\n\nfunction toggleNotificationPopup() {\n  return dispatch => {\n    dispatch({\n      type: notificationConstants.TOGGLE_NOTIFICATION_POPUP\n    });\n  };\n}\n\nfunction closeNotificationPopup() {\n  return dispatch => {\n    dispatch({\n      type: notificationConstants.CLOSE_NOTIFICATION_POPUP\n    });\n  };\n}\n\nfunction addNotification(data) {\n  return dispatch => {\n    dispatch({\n      type: notificationConstants.ADD_NOTIFICATION,\n      data\n    });\n  };\n}\n\nfunction removeNotification(data) {\n  return dispatch => {\n    dispatch({\n      type: notificationConstants.REMOVE_NOTIFICATION,\n      data\n    });\n  };\n}","map":{"version":3,"sources":["D:/LVTN/LVTN/cuisine-net/src/actions/notification.action.js"],"names":["notificationConstants","notificatonService","notificationActions","toggleNotificationPopup","closeNotificationPopup","addNotification","fetchNotifications","removeNotification","initNotifications","readNotifications","notificationIds","then","res","console","log","catch","error","dispatch","response","notifications","data","total","forEach","element","read","success","initialFetch","type","FETCH_NOTIFICATIONS_SUCCESS","queryOptions","page","err","TOGGLE_NOTIFICATION_POPUP","CLOSE_NOTIFICATION_POPUP","ADD_NOTIFICATION","REMOVE_NOTIFICATION"],"mappings":"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","sourcesContent":["import { notificationConstants } from \"../constants/notification.constants\";\r\nimport { notificatonService } from \"../services/notification.service\";\r\n\r\nexport const notificationActions = {\r\n    toggleNotificationPopup,\r\n    closeNotificationPopup,\r\n    addNotification,\r\n    fetchNotifications,\r\n    removeNotification,\r\n    initNotifications\r\n}\r\n\r\nfunction readNotifications(notificationIds) {\r\n    notificatonService.readNotifications(notificationIds).then(\r\n        (res) => { console.log(res) }\r\n    ).catch(error => {\r\n        console.log(error);\r\n    });\r\n}\r\n\r\nfunction initNotifications() {\r\n    return dispatch => {\r\n        notificatonService.fetchNotifications(null, 0).then(\r\n            response => {\r\n                const notifications = response.data.data.data;\r\n                let total = 0;\r\n                notifications.forEach(element => {\r\n                    if (element.read == false) {\r\n                        total = total + 1;\r\n                    }\r\n                });\r\n                dispatch(success(notifications, total, true));\r\n            }\r\n        )\r\n    }\r\n    function success(notifications, total, initialFetch) {\r\n        return {\r\n            type: notificationConstants.FETCH_NOTIFICATIONS_SUCCESS,\r\n            notifications,\r\n            total,\r\n            initialFetch\r\n        };\r\n    }\r\n}\r\n\r\nfunction fetchNotifications(queryOptions, notificationIds, page) {\r\n    return dispatch => {\r\n        notificatonService.fetchNotifications(queryOptions, page).then(\r\n            response => {\r\n                const notifications = response.data.data.data;\r\n                let total = 0;\r\n                notifications.forEach(element => {\r\n                    if (element.read == false) {\r\n                        total = total + 1;\r\n                    }\r\n                });\r\n                dispatch(success(notifications, total, queryOptions.initialFetch));\r\n                // const ids = notifications\r\n                //     .filter(e => !e.read)\r\n                //     .map(e => e._id)\r\n                //     .concat(notificationIds);\r\n                // const uniqueIds = ids\r\n                //     .filter((item, index) => ids.indexOf(item) === index)\r\n                //     .filter(item => item !== undefined);\r\n                // console.log(uniqueIds)\r\n            }\r\n        ).catch((err) => {\r\n            console.log(err)\r\n        })\r\n    }\r\n    function success(notifications, total, initialFetch) {\r\n        return {\r\n            type: notificationConstants.FETCH_NOTIFICATIONS_SUCCESS,\r\n            notifications,\r\n            total,\r\n            initialFetch\r\n        };\r\n    }\r\n}\r\n\r\nfunction toggleNotificationPopup() {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: notificationConstants.TOGGLE_NOTIFICATION_POPUP\r\n        });\r\n    };\r\n}\r\n\r\nfunction closeNotificationPopup() {\r\n    return dispatch => {\r\n        dispatch({ type: notificationConstants.CLOSE_NOTIFICATION_POPUP });\r\n    };\r\n}\r\n\r\nfunction addNotification(data) {\r\n    return dispatch => {\r\n        dispatch({ type: notificationConstants.ADD_NOTIFICATION, data });\r\n    };\r\n}\r\n\r\nfunction removeNotification(data) {\r\n    return dispatch => {\r\n        dispatch({ type: notificationConstants.REMOVE_NOTIFICATION, data })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}