{"ast":null,"code":"import axios from 'axios';\nexport const chatService = {\n  sendMessage,\n  getChatRooms\n};\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem(\"user\");\n}\n\nfunction getChatRooms(parmams) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: JSON.parse(localStorage.getItem(\"user\")).token\n    }\n  };\n  return axios.get(\"http://localhost:8000/api/chats/getChatRoom/\", requestOptions);\n}\n\nfunction readMessages(params) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: JSON.parse(localStorage.getItem(\"user\")).token\n    },\n    body: JSON.stringify({ ...params\n    })\n  };\n  return fetch(\"/api/chat/readMessages/\", requestOptions).then(handleResponse).then(res => {\n    return res;\n  });\n}\n\nfunction getMessagesForRoom(room) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: JSON.parse(localStorage.getItem(\"user\")).token\n    },\n    body: JSON.stringify({ ...room\n    })\n  };\n  return fetch(\"/api/chat/getMessagesForRoom/\", requestOptions).then(handleResponse).then(res => {\n    return res;\n  });\n}\n\nfunction sendMessage(params) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: JSON.parse(localStorage.getItem(\"user\")).token\n    },\n    body: JSON.stringify({ ...params\n    })\n  };\n  return axios(\"localhost:8000/api/chats/sendMessage\", requestOptions).then(res => {\n    return JSON.parse(res);\n  });\n}\n\nfunction sendImage(data) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Authorization: JSON.parse(localStorage.getItem(\"user\")).token\n    },\n    body: data\n  };\n  return fetch(\"/api/chat/sendImage/\", requestOptions).then(handleResponse).then(res => {\n    return res;\n  });\n}\n\nfunction call(data) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: JSON.parse(localStorage.getItem(\"user\")).token\n    },\n    body: JSON.stringify({ ...data\n    })\n  };\n  return fetch(\"/api/chat/call/\", requestOptions).then(handleResponse).then(res => {\n    return res;\n  });\n}\n\nfunction answer(data) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: JSON.parse(localStorage.getItem(\"user\")).token\n    },\n    body: JSON.stringify({ ...data\n    })\n  };\n  return fetch(\"/api/chat/answer/\", requestOptions).then(handleResponse).then(res => {\n    return res;\n  });\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout();\n        window.location.reload(true);\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["D:/LVTN/LVTN/cuisine-net/src/services/chat.service.js"],"names":["axios","chatService","sendMessage","getChatRooms","logout","localStorage","removeItem","parmams","requestOptions","method","headers","Authorization","JSON","parse","getItem","token","get","readMessages","params","body","stringify","fetch","then","handleResponse","res","getMessagesForRoom","room","sendImage","data","call","answer","response","text","ok","status","window","location","reload","error","message","statusText","Promise","reject"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\n\r\nexport const chatService = {\r\n    sendMessage,\r\n    getChatRooms\r\n}\r\nfunction logout() {\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem(\"user\");\r\n}\r\nfunction getChatRooms(parmams) {\r\n    const requestOptions = {\r\n        method: \"GET\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: JSON.parse(localStorage.getItem(\"user\")).token\r\n        }\r\n    }\r\n    return axios.get(\"http://localhost:8000/api/chats/getChatRoom/\", requestOptions)\r\n}\r\n\r\nfunction readMessages(params) {\r\n    const requestOptions = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: JSON.parse(localStorage.getItem(\"user\")).token\r\n        },\r\n        body: JSON.stringify({\r\n            ...params\r\n        })\r\n    };\r\n\r\n    return fetch(\"/api/chat/readMessages/\", requestOptions)\r\n        .then(handleResponse)\r\n        .then(res => {\r\n            return res;\r\n        });\r\n}\r\n\r\nfunction getMessagesForRoom(room) {\r\n    const requestOptions = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: JSON.parse(localStorage.getItem(\"user\")).token\r\n        },\r\n        body: JSON.stringify({\r\n            ...room\r\n        })\r\n    };\r\n\r\n    return fetch(\"/api/chat/getMessagesForRoom/\", requestOptions)\r\n        .then(handleResponse)\r\n        .then(res => {\r\n            return res;\r\n        });\r\n}\r\n\r\nfunction sendMessage(params) {\r\n    const requestOptions = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: JSON.parse(localStorage.getItem(\"user\")).token\r\n        },\r\n        body: JSON.stringify({\r\n            ...params\r\n        })\r\n    };\r\n\r\n    return axios(\"localhost:8000/api/chats/sendMessage\", requestOptions)\r\n        .then(res => {\r\n            return JSON.parse(res);\r\n        });\r\n}\r\n\r\n\r\nfunction sendImage(data) {\r\n    const requestOptions = {\r\n        method: \"POST\",\r\n        headers: {\r\n            Authorization: JSON.parse(localStorage.getItem(\"user\")).token\r\n        },\r\n        body: data\r\n    };\r\n\r\n    return fetch(\"/api/chat/sendImage/\", requestOptions)\r\n        .then(handleResponse)\r\n        .then(res => {\r\n            return res;\r\n        });\r\n}\r\n\r\nfunction call(data) {\r\n    const requestOptions = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: JSON.parse(localStorage.getItem(\"user\")).token\r\n        },\r\n        body: JSON.stringify({\r\n            ...data\r\n        })\r\n    };\r\n\r\n    return fetch(\"/api/chat/call/\", requestOptions)\r\n        .then(handleResponse)\r\n        .then(res => {\r\n            return res;\r\n        });\r\n}\r\n\r\n\r\n\r\nfunction answer(data) {\r\n    const requestOptions = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: JSON.parse(localStorage.getItem(\"user\")).token\r\n        },\r\n        body: JSON.stringify({\r\n            ...data\r\n        })\r\n    };\r\n\r\n    return fetch(\"/api/chat/answer/\", requestOptions)\r\n        .then(handleResponse)\r\n        .then(res => {\r\n            return res;\r\n        });\r\n}\r\n\r\n\r\n\r\nfunction handleResponse(response) {\r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            if (response.status === 401) {\r\n                // auto logout if 401 response returned from api\r\n                logout();\r\n                window.location.reload(true);\r\n            }\r\n\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        return data;\r\n    });\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}