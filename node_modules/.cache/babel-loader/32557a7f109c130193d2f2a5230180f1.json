{"ast":null,"code":"import { chatConstants } from '../constants/chat.constants';\nimport { chatService } from \"../services/chat.service\";\nexport const chatAction = {\n  typing,\n  stoppedTyping,\n  changeRoom,\n  getChatRooms,\n  getMessagesForRoom,\n  sendMessage,\n  sendImage,\n  newMessage,\n  readMessages,\n  changeActivityStatus,\n  imageMessageRequest,\n  call,\n  answer,\n  endCall,\n  endAnsweringCall,\n  searchUsers\n};\n\nfunction typing(roomId) {\n  return dispatch => {\n    dispatch({\n      type: chatConstants.TYPING,\n      roomId\n    });\n  };\n}\n\nfunction stoppedTyping(roomId) {\n  return dispatch => {\n    dispatch({\n      type: chatConstants.STOPPED_TYPING,\n      roomId\n    });\n  };\n}\n\nfunction initiateMessageArray(roomId) {\n  return {\n    type: chatConstants.INIT_MESSAGE_ARRAY,\n    roomId\n  };\n}\n\nfunction changeRoom(room, clearRoom) {\n  return dispatch => {\n    dispatch({\n      type: chatConstants.CHANGE_ROOM,\n      room,\n      clearRoom\n    });\n  };\n}\n\nfunction readMessages(params) {\n  const {\n    messageIds,\n    roomId\n  } = params;\n  return dispatch => {\n    dispatch(read(messageIds, roomId));\n    chatService.readMessages(params).then(() => {}, error => {\n      console.log(error);\n    });\n  };\n\n  function read(messageIds, roomId) {\n    return {\n      type: chatConstants.READ_MESSAGES,\n      messageIds,\n      roomId\n    };\n  }\n}\n\nfunction sendMessage(message) {\n  return dispatch => {\n    // dispatch(request({ ...message, sent: false }));\n    chatService.sendMessage(message).then(response => {\n      dispatch(success(response.data.data.data));\n      console.log(response);\n    }, error => {\n      console.log(error);\n    });\n  };\n\n  function request(message) {\n    return {\n      type: chatConstants.SEND_MESSAGE_REQUEST,\n      message\n    };\n  }\n\n  function success(message) {\n    return {\n      type: chatConstants.SEND_MESSAGE_SUCCESS,\n      message\n    };\n  }\n}\n\nfunction getChatRooms() {\n  return dispatch => {\n    dispatch(request());\n    chatService.getChatRooms().then(response => {\n      dispatch(success(response.data.rooms));\n      console.log(response);\n      response.data.rooms.forEach(room => dispatch(initiateMessageArray(room._id)));\n    }, error => {\n      console.log(error);\n    });\n  };\n\n  function request() {\n    return {\n      type: chatConstants.GET_ROOMS_REQUEST\n    };\n  }\n\n  function success(rooms) {\n    return {\n      type: chatConstants.GET_ROOMS_SUCCESS,\n      rooms\n    };\n  }\n}\n\nfunction changeActivityStatus(user) {\n  return dispatch => {\n    dispatch({\n      type: chatConstants.CHANGE_ACTIVITY_STATUS,\n      user\n    });\n  };\n}\n\nfunction getMessagesForRoom(room) {\n  return dispatch => {\n    if (room.initialFetch) {\n      dispatch(initialRequest(room._id));\n    } else {\n      dispatch(request(room._id));\n    }\n\n    chatService.getMessagesForRoom(room).then(response => {\n      console.log(response);\n      dispatch(success({\n        messages: response.data.data.data.reverse(),\n        roomId: room._id\n      }));\n    }, error => {\n      console.log(error);\n    });\n  };\n\n  function request(roomId) {\n    return {\n      type: chatConstants.GET_MESSAGES_REQUEST,\n      roomId\n    };\n  }\n\n  function initialRequest(roomId) {\n    return {\n      type: chatConstants.GET_MESSAGES_INITIAL_REQUEST,\n      roomId\n    };\n  }\n\n  function success(data) {\n    return {\n      type: chatConstants.GET_MESSAGES_SUCCESS,\n      data\n    };\n  }\n}\n\nfunction sendImage(data, message) {\n  return dispatch => {\n    dispatch(request({ ...message,\n      sent: false\n    }));\n    chatService.sendImage(data).then(response => {\n      dispatch(success(response.message));\n    }, error => {\n      console.log(error);\n    });\n  };\n\n  function request(message) {\n    return {\n      type: chatConstants.SEND_MESSAGE_REQUEST,\n      message\n    };\n  }\n\n  function success(message) {\n    return {\n      type: chatConstants.SEND_MESSAGE_SUCCESS,\n      message\n    };\n  }\n}\n\nfunction newMessage(message) {\n  return dispatch => {\n    dispatch(success(message));\n    dispatch({\n      type: chatConstants.INC_MESSAGE_COUNT\n    });\n  };\n\n  function success(message) {\n    return {\n      type: chatConstants.NEW_MESSAGE,\n      message\n    };\n  }\n}\n\nfunction imageMessageRequest(message) {\n  return dispatch => {\n    dispatch(success(message));\n  };\n\n  function success(message) {\n    return {\n      type: chatConstants.NEW_IMAGE_MESSAGE_REQUEST,\n      message\n    };\n  }\n}\n\nfunction call(data) {\n  return dispatch => {\n    dispatch({\n      type: chatConstants.OPEN_CALLING_MODAL\n    });\n    chatService.call(data).then(() => {}, error => {\n      console.log(error);\n    });\n  };\n}\n\nfunction answer(data) {\n  return dispatch => {\n    chatService.answer(data).then(() => {}, error => {\n      console.log(error);\n    });\n  };\n}\n\nfunction endCall() {\n  return dispatch => {\n    dispatch({\n      type: chatConstants.CLOSE_CALLING_MODAL\n    });\n  };\n}\n\nfunction endAnsweringCall() {\n  return dispatch => {\n    dispatch({\n      type: chatConstants.CLOSE_ANSWERING_MODAL\n    });\n  };\n}\n\nfunction searchUsers(rooms) {\n  return dispatch => {\n    dispatch({\n      type: chatConstants.SEARCH_USERS,\n      rooms\n    });\n  };\n}","map":{"version":3,"sources":["D:/LVTN/LVTN/cuisine-net/src/actions/chat.action.js"],"names":["chatConstants","chatService","chatAction","typing","stoppedTyping","changeRoom","getChatRooms","getMessagesForRoom","sendMessage","sendImage","newMessage","readMessages","changeActivityStatus","imageMessageRequest","call","answer","endCall","endAnsweringCall","searchUsers","roomId","dispatch","type","TYPING","STOPPED_TYPING","initiateMessageArray","INIT_MESSAGE_ARRAY","room","clearRoom","CHANGE_ROOM","params","messageIds","read","then","error","console","log","READ_MESSAGES","message","response","success","data","request","SEND_MESSAGE_REQUEST","SEND_MESSAGE_SUCCESS","rooms","forEach","_id","GET_ROOMS_REQUEST","GET_ROOMS_SUCCESS","user","CHANGE_ACTIVITY_STATUS","initialFetch","initialRequest","messages","reverse","GET_MESSAGES_REQUEST","GET_MESSAGES_INITIAL_REQUEST","GET_MESSAGES_SUCCESS","sent","INC_MESSAGE_COUNT","NEW_MESSAGE","NEW_IMAGE_MESSAGE_REQUEST","OPEN_CALLING_MODAL","CLOSE_CALLING_MODAL","CLOSE_ANSWERING_MODAL","SEARCH_USERS"],"mappings":"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","sourcesContent":["import { chatConstants } from '../constants/chat.constants'\r\nimport { chatService } from \"../services/chat.service\";\r\n\r\nexport const chatAction = {\r\n    typing,\r\n    stoppedTyping,\r\n    changeRoom,\r\n    getChatRooms,\r\n    getMessagesForRoom,\r\n    sendMessage,\r\n    sendImage,\r\n    newMessage,\r\n    readMessages,\r\n    changeActivityStatus,\r\n    imageMessageRequest,\r\n    call,\r\n    answer,\r\n    endCall,\r\n    endAnsweringCall,\r\n    searchUsers\r\n}\r\n\r\n\r\nfunction typing(roomId) {\r\n    return dispatch => {\r\n        dispatch({ type: chatConstants.TYPING, roomId });\r\n    };\r\n}\r\n\r\nfunction stoppedTyping(roomId) {\r\n    return dispatch => {\r\n        dispatch({ type: chatConstants.STOPPED_TYPING, roomId });\r\n    };\r\n}\r\nfunction initiateMessageArray(roomId) {\r\n    return { type: chatConstants.INIT_MESSAGE_ARRAY, roomId };\r\n}\r\n\r\nfunction changeRoom(room,clearRoom) {\r\n    return dispatch => {\r\n        dispatch({ type: chatConstants.CHANGE_ROOM, room, clearRoom })\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction readMessages(params) {\r\n    const { messageIds, roomId } = params;\r\n    return dispatch => {\r\n        dispatch(read(messageIds, roomId));\r\n        chatService.readMessages(params).then(\r\n            () => { },\r\n            error => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    };\r\n    function read(messageIds, roomId) {\r\n        return { type: chatConstants.READ_MESSAGES, messageIds, roomId };\r\n    }\r\n}\r\n\r\nfunction sendMessage(message) {\r\n    return dispatch => {\r\n        // dispatch(request({ ...message, sent: false }));\r\n        chatService.sendMessage(message).then(\r\n            response => {\r\n                dispatch(success(response.data.data.data));\r\n                console.log(response)\r\n            },\r\n            error => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    };\r\n\r\n    function request(message) {\r\n        return { type: chatConstants.SEND_MESSAGE_REQUEST, message };\r\n    }\r\n\r\n    function success(message) {\r\n        return { type: chatConstants.SEND_MESSAGE_SUCCESS, message };\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction getChatRooms() {\r\n    return dispatch => {\r\n        dispatch(request());\r\n\r\n        chatService.getChatRooms().then(\r\n            response => {\r\n                dispatch(success(response.data.rooms));\r\n                console.log(response)\r\n                response.data.rooms.forEach(room =>\r\n                    dispatch(initiateMessageArray(room._id))\r\n                );\r\n            },\r\n            error => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    };\r\n    function request() {\r\n        return { type: chatConstants.GET_ROOMS_REQUEST };\r\n    }\r\n    function success(rooms) {\r\n        return { type: chatConstants.GET_ROOMS_SUCCESS, rooms };\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction changeActivityStatus(user) {\r\n    return dispatch => {\r\n        dispatch({ type: chatConstants.CHANGE_ACTIVITY_STATUS, user });\r\n    };\r\n}\r\n\r\n\r\nfunction getMessagesForRoom(room) {\r\n    return dispatch => {\r\n        if (room.initialFetch) {\r\n            dispatch(initialRequest(room._id));\r\n        } else {\r\n            dispatch(request(room._id));\r\n        }\r\n        chatService.getMessagesForRoom(room).then(\r\n            response => {\r\n                console.log(response)\r\n                dispatch(\r\n                    success({ messages: response.data.data.data.reverse(), roomId: room._id })\r\n                );\r\n            },\r\n            error => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    };\r\n    function request(roomId) {\r\n        return { type: chatConstants.GET_MESSAGES_REQUEST, roomId };\r\n    }\r\n    function initialRequest(roomId) {\r\n        return { type: chatConstants.GET_MESSAGES_INITIAL_REQUEST, roomId };\r\n    }\r\n    function success(data) {\r\n        return { type: chatConstants.GET_MESSAGES_SUCCESS, data };\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction sendImage(data, message) {\r\n    return dispatch => {\r\n        dispatch(request({ ...message, sent: false }));\r\n\r\n        chatService.sendImage(data).then(\r\n            response => {\r\n                dispatch(success(response.message));\r\n            },\r\n            error => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    };\r\n    function request(message) {\r\n        return { type: chatConstants.SEND_MESSAGE_REQUEST, message };\r\n    }\r\n    function success(message) {\r\n        return { type: chatConstants.SEND_MESSAGE_SUCCESS, message };\r\n    }\r\n}\r\n\r\nfunction newMessage(message) {\r\n    return dispatch => {\r\n        dispatch(success(message));\r\n        dispatch({ type: chatConstants.INC_MESSAGE_COUNT });\r\n    };\r\n    function success(message) {\r\n        return { type: chatConstants.NEW_MESSAGE, message };\r\n    }\r\n}\r\n\r\nfunction imageMessageRequest(message) {\r\n    return dispatch => {\r\n        dispatch(success(message));\r\n    };\r\n    function success(message) {\r\n        return { type: chatConstants.NEW_IMAGE_MESSAGE_REQUEST, message };\r\n    }\r\n}\r\n\r\nfunction call(data) {\r\n    return dispatch => {\r\n        dispatch({ type: chatConstants.OPEN_CALLING_MODAL });\r\n\r\n        chatService.call(data).then(\r\n            () => { },\r\n            error => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    };\r\n}\r\n\r\nfunction answer(data) {\r\n    return dispatch => {\r\n        chatService.answer(data).then(\r\n            () => { },\r\n            error => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    };\r\n}\r\n\r\nfunction endCall() {\r\n    return dispatch => {\r\n        dispatch({ type: chatConstants.CLOSE_CALLING_MODAL });\r\n    };\r\n}\r\n\r\nfunction endAnsweringCall() {\r\n    return dispatch => {\r\n        dispatch({ type: chatConstants.CLOSE_ANSWERING_MODAL });\r\n    };\r\n}\r\n\r\nfunction searchUsers(rooms) {\r\n    return dispatch => {\r\n        dispatch({ type: chatConstants.SEARCH_USERS, rooms });\r\n    };\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}