{"ast":null,"code":"import { authHeader } from '../helpers/auth-header';\nimport axios from 'axios';\nexport const userService = {\n  login,\n  logout,\n  register,\n  getAll,\n  getById,\n  update,\n  delete: _delete\n};\n\nasync function login(username, password) {\n  return await axios.request({\n    url: '/users/signin',\n    method: \"post\",\n    data: {\n      \"email\": username,\n      \"password\": password\n    }\n  }) // .then(handleResponse)\n  .then(user => {\n    // store user details and jwt token in local storage to keep user logged in between page refreshes\n    setTimeout(function () {\n      localStorage.setItem('user', user);\n    }, 50);\n    return JSON.stringify(user); // resolve(user)\n  }).catch(error => console.log(error));\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('user');\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(`http://localhost:8000/users`, requestOptions).then(handleResponse);\n}\n\nfunction getById(id) {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(`http://localhost:8000/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction register(user) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`http://localhost:8000/users/signup`, requestOptions).then(handleResponse);\n}\n\nfunction update(user) {\n  const requestOptions = {\n    method: 'PUT',\n    headers: { ...authHeader(),\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`http://localhost:8000/users/${user.id}`, requestOptions).then(handleResponse);\n  ;\n} // prefixed function name with underscore because delete is a reserved word in javascript\n\n\nfunction _delete(id) {\n  const requestOptions = {\n    method: 'DELETE',\n    headers: authHeader()\n  };\n  return fetch(`http://localhost:8000/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.status === 200) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout(); // location.reload(true);\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["D:/LVTN/LVTN/cuisine-net/src/services/user.service.js"],"names":["authHeader","axios","userService","login","logout","register","getAll","getById","update","delete","_delete","username","password","request","url","method","data","then","user","setTimeout","localStorage","setItem","JSON","stringify","catch","error","console","log","removeItem","requestOptions","headers","fetch","handleResponse","id","body","response","text","parse","status","message","statusText","Promise","reject"],"mappings":"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","sourcesContent":["import { authHeader } from '../helpers/auth-header';\r\nimport axios from 'axios';\r\nexport const userService = {\r\n    login,\r\n    logout,\r\n    register,\r\n    getAll,\r\n    getById,\r\n    update,\r\n    delete: _delete\r\n};\r\n\r\nasync function  login(username, password) {\r\n        return await axios.request({\r\n                url: '/users/signin',\r\n                method: \"post\",\r\n                data: {\r\n                    \"email\" : username, \r\n                    \"password\": password\r\n                }\r\n                \r\n            })\r\n            // .then(handleResponse)\r\n            .then((user) => {\r\n                // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n                setTimeout(function(){localStorage.setItem('user', user)},50);\r\n                return JSON.stringify(user);\r\n                // resolve(user)\r\n            })\r\n            .catch(\r\n                (error)=>console.log(error)\r\n            );\r\n}\r\n\r\nfunction logout() {\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem('user');\r\n}\r\n\r\nfunction getAll() {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: authHeader()\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction getById(id) {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: authHeader()\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users/${id}`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction register(user) {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(user)\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users/signup`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction update(user) {\r\n    const requestOptions = {\r\n        method: 'PUT',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(user)\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users/${user.id}`, requestOptions).then(handleResponse);;\r\n}\r\n\r\n// prefixed function name with underscore because delete is a reserved word in javascript\r\nfunction _delete(id) {\r\n    const requestOptions = {\r\n        method: 'DELETE',\r\n        headers: authHeader()\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users/${id}`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction handleResponse(response) {\r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.status===200) {\r\n            if (response.status === 401) {\r\n                // auto logout if 401 response returned from api\r\n                logout();\r\n                // location.reload(true);\r\n            }\r\n\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}