{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nexport function transformBinaryCoords(binaryFeatures, fn) {\n  for (var _i = 0, _Object$values = Object.values(binaryFeatures); _i < _Object$values.length; _i++) {\n    var binaryFeature = _Object$values[_i];\n    var positions = binaryFeature.positions;\n\n    for (var i = 0; i < positions.value.length; i += positions.size) {\n      var coord = Array.from(positions.value.subarray(i, i + positions.size));\n      var transformedCoord = fn(coord);\n      positions.value.set(transformedCoord, i);\n    }\n  }\n\n  return binaryFeatures;\n}\nexport function transformGeoJsonCoords(features, fn) {\n  var _iterator = _createForOfIteratorHelper(features),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var feature = _step.value;\n      feature.geometry.coordinates = coordMap(feature.geometry.coordinates, fn);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return features;\n}\n\nfunction coordMap(array, fn) {\n  if (isCoord(array)) {\n    return fn(array);\n  }\n\n  return array.map(function (item) {\n    return coordMap(item, fn);\n  });\n}\n\nfunction isCoord(array) {\n  return Number.isFinite(array[0]) && Number.isFinite(array[1]);\n}","map":{"version":3,"sources":["../../../src/lib/transform.js"],"names":["binaryFeature","Object","positions","i","coord","Array","transformedCoord","fn","feature","coordMap","isCoord","Number","array"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,OAAO,SAAA,qBAAA,CAAA,cAAA,EAAA,EAAA,EAAmD;AAExD,OAAA,IAAA,EAAA,GAAA,CAAA,EAAA,cAAA,GAA4BC,MAAM,CAANA,MAAAA,CAA5B,cAA4BA,CAA5B,EAAA,EAAA,GAAA,cAAA,CAAA,MAAA,EAAA,EAAA,EAAA,EAA2D;AAAtD,QAAMD,aAAa,GAAA,cAAA,CAAnB,EAAmB,CAAnB;AAAsD,QAClDE,SADkD,GACrCF,aADqC,CAAA,SAAA;;AAEzD,SAAK,IAAIG,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGD,SAAS,CAATA,KAAAA,CAApB,MAAA,EAA4CC,CAAC,IAAID,SAAS,CAA1D,IAAA,EAAiE;AAC/D,UAAME,KAAK,GAAGC,KAAK,CAALA,IAAAA,CAAWH,SAAS,CAATA,KAAAA,CAAAA,QAAAA,CAAAA,CAAAA,EAA4BC,CAAC,GAAGD,SAAS,CAAlE,IAAyBA,CAAXG,CAAd;AACA,UAAMC,gBAAgB,GAAGC,EAAE,CAA3B,KAA2B,CAA3B;AACAL,MAAAA,SAAS,CAATA,KAAAA,CAAAA,GAAAA,CAAAA,gBAAAA,EAAAA,CAAAA;AACD;AACF;;AACD,SAAA,cAAA;AACD;AASD,OAAO,SAAA,sBAAA,CAAA,QAAA,EAAA,EAAA,EAA8C;AAAA,MAAA,SAAA,GAAA,0BAAA,CAAA,QAAA,CAAA;AAAA,MAAA,KAAA;;AAAA,MAAA;AACnD,SAAA,SAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAgC;AAAA,UAArBM,OAAqB,GAAA,KAAA,CAAA,KAAA;AAC9BA,MAAAA,OAAO,CAAPA,QAAAA,CAAAA,WAAAA,GAA+BC,QAAQ,CAACD,OAAO,CAAPA,QAAAA,CAAD,WAAA,EAAvCA,EAAuC,CAAvCA;AACD;AAHkD,GAAA,CAAA,OAAA,GAAA,EAAA;AAAA,IAAA,SAAA,CAAA,CAAA,CAAA,GAAA;AAAA,GAAA,SAAA;AAAA,IAAA,SAAA,CAAA,CAAA;AAAA;;AAInD,SAAA,QAAA;AACD;;AAED,SAAA,QAAA,CAAA,KAAA,EAAA,EAAA,EAA6B;AAC3B,MAAIE,OAAO,CAAX,KAAW,CAAX,EAAoB;AAClB,WAAOH,EAAE,CAAT,KAAS,CAAT;AACD;;AAED,SAAO,KAAK,CAAL,GAAA,CAAU,UAAA,IAAA,EAAQ;AACvB,WAAOE,QAAQ,CAAA,IAAA,EAAf,EAAe,CAAf;AADF,GAAO,CAAP;AAGD;;AAED,SAAA,OAAA,CAAA,KAAA,EAAwB;AACtB,SAAOE,MAAM,CAANA,QAAAA,CAAgBC,KAAK,CAArBD,CAAqB,CAArBA,KAA6BA,MAAM,CAANA,QAAAA,CAAgBC,KAAK,CAAzD,CAAyD,CAArBD,CAApC;AACD","sourcesContent":["/**\n * Apply transformation to every coordinate of binary features\n *\n * @param  binaryFeatures binary features\n * @param  fn       Function to call on each coordinate\n * @return          Transformed binary features\n */\nexport function transformBinaryCoords(binaryFeatures, fn) {\n  // Expect binaryFeatures to have points, lines, and polygons keys\n  for (const binaryFeature of Object.values(binaryFeatures)) {\n    const {positions} = binaryFeature;\n    for (let i = 0; i < positions.value.length; i += positions.size) {\n      const coord = Array.from(positions.value.subarray(i, i + positions.size));\n      const transformedCoord = fn(coord);\n      positions.value.set(transformedCoord, i);\n    }\n  }\n  return binaryFeatures;\n}\n\n/**\n * Apply transformation to every coordinate of GeoJSON features\n *\n * @param  features Array of GeoJSON features\n * @param  fn       Function to call on each coordinate\n * @return          Transformed GeoJSON features\n */\nexport function transformGeoJsonCoords(features, fn) {\n  for (const feature of features) {\n    feature.geometry.coordinates = coordMap(feature.geometry.coordinates, fn);\n  }\n  return features;\n}\n\nfunction coordMap(array, fn) {\n  if (isCoord(array)) {\n    return fn(array);\n  }\n\n  return array.map(item => {\n    return coordMap(item, fn);\n  });\n}\n\nfunction isCoord(array) {\n  return Number.isFinite(array[0]) && Number.isFinite(array[1]);\n}\n"]},"metadata":{},"sourceType":"module"}