{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { getAccessorTypeFromSize, getComponentTypeFromArray } from './gltf-utils';\nexport function getGLTFAccessors(attributes) {\n  var jsonAccessors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var accessors = {};\n\n  for (var name in attributes) {\n    var attribute = attributes[name];\n\n    if (name !== 'indices') {\n      var glTFAccessor = getGLTFAccessor(attribute, jsonAccessors[name] || {});\n      accessors[name] = glTFAccessor;\n    }\n  }\n\n  return accessors;\n}\nexport function getGLTFAccessor(attribute) {\n  var jsonAccessor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _getAccessorData = getAccessorData(attribute),\n      buffer = _getAccessorData.buffer,\n      size = _getAccessorData.size,\n      count = _getAccessorData.count;\n\n  var glTFAccessor = _objectSpread(_objectSpread({}, jsonAccessor), {}, {\n    value: buffer,\n    size: size,\n    bufferView: null,\n    byteOffset: 0,\n    count: count,\n    type: getAccessorTypeFromSize(size),\n    componentType: getComponentTypeFromArray(buffer)\n  });\n\n  return glTFAccessor;\n}\nexport function getGLTFAttribute(data, gltfAttributeName) {\n  return data.attributes[data.glTFAttributeMap[gltfAttributeName]];\n}\n\nfunction getAccessorData(attribute) {\n  var buffer = attribute;\n  var size = 1;\n  var count = 0;\n\n  if (attribute && attribute.value) {\n    buffer = attribute.value;\n    size = attribute.size || 1;\n  }\n\n  if (buffer) {\n    if (!ArrayBuffer.isView(buffer)) {\n      buffer = toTypedArray(buffer, Float32Array);\n    }\n\n    count = buffer.length / size;\n  }\n\n  return {\n    buffer: buffer,\n    size: size,\n    count: count\n  };\n}\n\nfunction toTypedArray(array, ArrayType) {\n  var convertTypedArrays = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (!array) {\n    return null;\n  }\n\n  if (Array.isArray(array)) {\n    return new ArrayType(array);\n  }\n\n  if (convertTypedArrays && !(array instanceof ArrayType)) {\n    return new ArrayType(array);\n  }\n\n  return array;\n}","map":{"version":3,"sources":["../../../../src/lib/gltf-utils/gltf-attribute-utils.js"],"names":["jsonAccessors","accessors","attribute","attributes","name","glTFAccessor","getGLTFAccessor","jsonAccessor","buffer","size","count","getAccessorData","value","bufferView","byteOffset","type","getAccessorTypeFromSize","componentType","getComponentTypeFromArray","data","ArrayBuffer","toTypedArray","convertTypedArrays","Array","array"],"mappings":"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","sourcesContent":["// TODO - remove\nimport {getAccessorTypeFromSize, getComponentTypeFromArray} from './gltf-utils';\n\n// Returns a fresh attributes object with glTF-standardized attributes names\n// Attributes that cannot be identified will not be included\n// Removes `indices` if present, as it should be stored separately from the attributes\nexport function getGLTFAccessors(attributes, jsonAccessors = {}) {\n  const accessors = {};\n  for (const name in attributes) {\n    const attribute = attributes[name];\n    if (name !== 'indices') {\n      const glTFAccessor = getGLTFAccessor(attribute, jsonAccessors[name] || {});\n      accessors[name] = glTFAccessor;\n    }\n  }\n  return accessors;\n}\n\n// Fix up a single accessor.\n// Input: typed array or a partial accessor object\n// Return: accessor object\nexport function getGLTFAccessor(attribute, jsonAccessor = {}) {\n  const {buffer, size, count} = getAccessorData(attribute);\n\n  const glTFAccessor = {\n    ...jsonAccessor,\n    // TODO: Deprecate `value` in favor of bufferView?\n    value: buffer,\n    size, // Decoded `type` (e.g. SCALAR)\n\n    // glTF Accessor values\n    // TODO: Instead of a bufferView index we could have an actual buffer (typed array)\n    bufferView: null,\n    byteOffset: 0,\n    count,\n    type: getAccessorTypeFromSize(size),\n    componentType: getComponentTypeFromArray(buffer)\n  };\n\n  return glTFAccessor;\n}\n\nexport function getGLTFAttribute(data, gltfAttributeName) {\n  return data.attributes[data.glTFAttributeMap[gltfAttributeName]];\n}\n\nfunction getAccessorData(attribute) {\n  let buffer = attribute;\n  let size = 1;\n  let count = 0;\n\n  if (attribute && attribute.value) {\n    buffer = attribute.value;\n    size = attribute.size || 1;\n  }\n\n  if (buffer) {\n    if (!ArrayBuffer.isView(buffer)) {\n      buffer = toTypedArray(buffer, Float32Array);\n    }\n    count = buffer.length / size;\n  }\n\n  return {buffer, size, count};\n}\n\n// Convert non-typed arrays to arrays of specified format\nfunction toTypedArray(array, ArrayType, convertTypedArrays = false) {\n  if (!array) {\n    return null;\n  }\n  if (Array.isArray(array)) {\n    return new ArrayType(array);\n  }\n  if (convertTypedArrays && !(array instanceof ArrayType)) {\n    return new ArrayType(array);\n  }\n  return array;\n}\n"]},"metadata":{},"sourceType":"module"}