{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport ShaderModule from './shader-module';\nimport { assert } from '../utils';\nexport function resolveModules(modules) {\n  return getShaderDependencies(instantiateModules(modules));\n}\n\nfunction getShaderDependencies(modules) {\n  var moduleMap = {};\n  var moduleDepth = {};\n  getDependencyGraph({\n    modules: modules,\n    level: 0,\n    moduleMap: moduleMap,\n    moduleDepth: moduleDepth\n  });\n  return Object.keys(moduleDepth).sort(function (a, b) {\n    return moduleDepth[b] - moduleDepth[a];\n  }).map(function (name) {\n    return moduleMap[name];\n  });\n}\n\nfunction getDependencyGraph(_ref) {\n  var modules = _ref.modules,\n      level = _ref.level,\n      moduleMap = _ref.moduleMap,\n      moduleDepth = _ref.moduleDepth;\n\n  if (level >= 5) {\n    throw new Error('Possible loop in shader dependency graph');\n  }\n\n  var _iterator = _createForOfIteratorHelper(modules),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var module = _step.value;\n      moduleMap[module.name] = module;\n\n      if (moduleDepth[module.name] === undefined || moduleDepth[module.name] < level) {\n        moduleDepth[module.name] = level;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var _iterator2 = _createForOfIteratorHelper(modules),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _module = _step2.value;\n\n      if (_module.dependencies) {\n        getDependencyGraph({\n          modules: _module.dependencies,\n          level: level + 1,\n          moduleMap: moduleMap,\n          moduleDepth: moduleDepth\n        });\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n}\n\nfunction instantiateModules(modules, seen) {\n  return modules.map(function (module) {\n    if (module instanceof ShaderModule) {\n      return module;\n    }\n\n    assert(typeof module !== 'string', \"Shader module use by name is deprecated. Import shader module '\".concat(module, \"' and use it directly.\"));\n    assert(module.name, 'shader module has no name');\n    module = new ShaderModule(module);\n    module.dependencies = instantiateModules(module.dependencies);\n    return module;\n  });\n}\n\nexport var TEST_EXPORTS = {\n  getShaderDependencies: getShaderDependencies,\n  getDependencyGraph: getDependencyGraph\n};","map":{"version":3,"sources":["../../../src/lib/resolve-modules.js"],"names":["getShaderDependencies","instantiateModules","moduleMap","moduleDepth","getDependencyGraph","modules","level","module","assert","TEST_EXPORTS"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,YAAA,MAAA,iBAAA;AACA,SAAA,MAAA,QAAA,UAAA;AAGA,OAAO,SAAA,cAAA,CAAA,OAAA,EAAiC;AACtC,SAAOA,qBAAqB,CAACC,kBAAkB,CAA/C,OAA+C,CAAnB,CAA5B;AACD;;AAcD,SAAA,qBAAA,CAAA,OAAA,EAAwC;AACtC,MAAMC,SAAS,GAAf,EAAA;AACA,MAAMC,WAAW,GAAjB,EAAA;AACAC,EAAAA,kBAAkB,CAAC;AAACC,IAAAA,OAAO,EAAR,OAAA;AAAUC,IAAAA,KAAK,EAAf,CAAA;AAAoBJ,IAAAA,SAAS,EAA7B,SAAA;AAA+BC,IAAAA,WAAW,EAAXA;AAA/B,GAAD,CAAlBC;AAGA,SAAO,MAAM,CAAN,IAAA,CAAA,WAAA,EAAA,IAAA,CACC,UAAA,CAAA,EAAA,CAAA,EAAA;AAAA,WAAUD,WAAW,CAAXA,CAAW,CAAXA,GAAiBA,WAAW,CAAtC,CAAsC,CAAtC;AADD,GAAA,EAAA,GAAA,CAEA,UAAA,IAAA,EAAI;AAAA,WAAID,SAAS,CAAb,IAAa,CAAb;AAFX,GAAO,CAAP;AAGD;;AAcD,SAAA,kBAAA,CAAA,IAAA,EAAsE;AAAA,MAAzCG,OAAyC,GAAA,IAAA,CAAzCA,OAAyC;AAAA,MAAhCC,KAAgC,GAAA,IAAA,CAAhCA,KAAgC;AAAA,MAAzBJ,SAAyB,GAAA,IAAA,CAAzBA,SAAyB;AAAA,MAAdC,WAAc,GAAA,IAAA,CAAdA,WAAc;;AACpE,MAAIG,KAAK,IAAT,CAAA,EAAgB;AACd,UAAM,IAAA,KAAA,CAAN,0CAAM,CAAN;AACD;;AAHmE,MAAA,SAAA,GAAA,0BAAA,CAAA,OAAA,CAAA;AAAA,MAAA,KAAA;;AAAA,MAAA;AAMpE,SAAA,SAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAA8B;AAAA,UAAnBC,MAAmB,GAAA,KAAA,CAAA,KAAA;AAC5BL,MAAAA,SAAS,CAACK,MAAM,CAAhBL,IAAS,CAATA,GAAAA,MAAAA;;AACA,UAAIC,WAAW,CAACI,MAAM,CAAlBJ,IAAW,CAAXA,KAAAA,SAAAA,IAA0CA,WAAW,CAACI,MAAM,CAAlBJ,IAAW,CAAXA,GAA9C,KAAA,EAAgF;AAC9EA,QAAAA,WAAW,CAACI,MAAM,CAAlBJ,IAAW,CAAXA,GAAAA,KAAAA;AACD;AACF;AAXmE,GAAA,CAAA,OAAA,GAAA,EAAA;AAAA,IAAA,SAAA,CAAA,CAAA,CAAA,GAAA;AAAA,GAAA,SAAA;AAAA,IAAA,SAAA,CAAA,CAAA;AAAA;;AAAA,MAAA,UAAA,GAAA,0BAAA,CAAA,OAAA,CAAA;AAAA,MAAA,MAAA;;AAAA,MAAA;AAcpE,SAAA,UAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,MAAA,GAAA,UAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAA8B;AAAA,UAAnBI,OAAmB,GAAA,MAAA,CAAA,KAAA;;AAC5B,UAAIA,OAAM,CAAV,YAAA,EAAyB;AACvBH,QAAAA,kBAAkB,CAAC;AAACC,UAAAA,OAAO,EAAEE,OAAM,CAAhB,YAAA;AAA+BD,UAAAA,KAAK,EAAEA,KAAK,GAA3C,CAAA;AAAiDJ,UAAAA,SAAS,EAA1D,SAAA;AAA4DC,UAAAA,WAAW,EAAXA;AAA5D,SAAD,CAAlBC;AACD;AACF;AAlBmE,GAAA,CAAA,OAAA,GAAA,EAAA;AAAA,IAAA,UAAA,CAAA,CAAA,CAAA,GAAA;AAAA,GAAA,SAAA;AAAA,IAAA,UAAA,CAAA,CAAA;AAAA;AAmBrE;;AAED,SAAA,kBAAA,CAAA,OAAA,EAAA,IAAA,EAA2C;AACzC,SAAO,OAAO,CAAP,GAAA,CAAY,UAAA,MAAA,EAAU;AAC3B,QAAIG,MAAM,YAAV,YAAA,EAAoC;AAClC,aAAA,MAAA;AACD;;AAEDC,IAAAA,MAAM,CACJ,OAAA,MAAA,KADI,QAAA,EAAA,kEAAA,MAAA,CAAA,MAAA,EAANA,wBAAM,CAAA,CAANA;AAIAA,IAAAA,MAAM,CAACD,MAAM,CAAP,IAAA,EAANC,2BAAM,CAANA;AAEAD,IAAAA,MAAM,GAAG,IAAA,YAAA,CAATA,MAAS,CAATA;AACAA,IAAAA,MAAM,CAANA,YAAAA,GAAsBN,kBAAkB,CAACM,MAAM,CAA/CA,YAAwC,CAAxCA;AAEA,WAAA,MAAA;AAdF,GAAO,CAAP;AAgBD;;AAED,OAAO,IAAME,YAAY,GAAG;AAC1BT,EAAAA,qBAAqB,EADK,qBAAA;AAE1BI,EAAAA,kBAAkB,EAAlBA;AAF0B,CAArB","sourcesContent":["import ShaderModule from './shader-module';\nimport {assert} from '../utils';\n\n// Instantiate shader modules and any dependencies resolve dependencies\nexport function resolveModules(modules) {\n  return getShaderDependencies(instantiateModules(modules));\n}\n\n/**\n * Takes a list of shader module names and returns a new list of\n * shader module names that includes all dependencies, sorted so\n * that modules that are dependencies of other modules come first.\n *\n * If the shader glsl code from the returned modules is concatenated\n * in the reverse order, it is guaranteed that all functions be resolved and\n * that all function and variable definitions come before use.\n *\n * @param {String[]} modules - Array of modules (inline modules or module names)\n * @return {String[]} - Array of modules\n */\nfunction getShaderDependencies(modules) {\n  const moduleMap = {};\n  const moduleDepth = {};\n  getDependencyGraph({modules, level: 0, moduleMap, moduleDepth});\n\n  // Return a reverse sort so that dependencies come before the modules that use them\n  return Object.keys(moduleDepth)\n    .sort((a, b) => moduleDepth[b] - moduleDepth[a])\n    .map(name => moduleMap[name]);\n}\n\n/**\n * Recursively checks module dpendencies to calculate dependency\n * level of each module.\n *\n * @param {object} options\n * @param {object[]} options.modules - Array of modules\n * @param {number} options.level - Current level\n * @param {object} options.moduleMap -\n * @param {object} options.moduleDepth - Current level\n * @return {object} - Map of module name to its level\n */\n// Adds another level of dependencies to the result map\nfunction getDependencyGraph({modules, level, moduleMap, moduleDepth}) {\n  if (level >= 5) {\n    throw new Error('Possible loop in shader dependency graph');\n  }\n\n  // Update level on all current modules\n  for (const module of modules) {\n    moduleMap[module.name] = module;\n    if (moduleDepth[module.name] === undefined || moduleDepth[module.name] < level) {\n      moduleDepth[module.name] = level;\n    }\n  }\n\n  // Recurse\n  for (const module of modules) {\n    if (module.dependencies) {\n      getDependencyGraph({modules: module.dependencies, level: level + 1, moduleMap, moduleDepth});\n    }\n  }\n}\n\nfunction instantiateModules(modules, seen) {\n  return modules.map(module => {\n    if (module instanceof ShaderModule) {\n      return module;\n    }\n\n    assert(\n      typeof module !== 'string',\n      `Shader module use by name is deprecated. Import shader module '${module}' and use it directly.`\n    );\n    assert(module.name, 'shader module has no name');\n\n    module = new ShaderModule(module);\n    module.dependencies = instantiateModules(module.dependencies);\n\n    return module;\n  });\n}\n\nexport const TEST_EXPORTS = {\n  getShaderDependencies,\n  getDependencyGraph\n};\n"]},"metadata":{},"sourceType":"module"}