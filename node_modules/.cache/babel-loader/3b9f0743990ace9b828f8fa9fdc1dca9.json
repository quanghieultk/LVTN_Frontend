{"ast":null,"code":"import { authHeader } from '../helpers/auth-header';\nimport axios from 'axios';\nexport const userService = {\n  login,\n  logout,\n  register,\n  getAll,\n  getById,\n  update,\n  delete: _delete\n};\n\nfunction login(username, password) {\n  let email = username;\n  return new Promise((resolve, reject) => {\n    axios.request({\n      url: '/users/signin',\n      method: \"post\",\n      data: {\n        \"email\": email,\n        \"password\": password\n      }\n    }) // .then(handleResponse)\n    .then(user => {\n      // store user details and jwt token in local storage to keep user logged in between page refreshes\n      // setTimeout(function(){localStorage.setItem('user', user)},50);\n      // return JSON.stringify(user);\n      resolve(user);\n    }).catch(error => reject(error));\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('user');\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(`http://localhost:8000/users`, requestOptions).then(handleResponse);\n}\n\nfunction getById(id) {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(`http://localhost:8000/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction register(user) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`http://localhost:8000/users/signup`, requestOptions).then(handleResponse);\n}\n\nfunction update(user) {\n  const requestOptions = {\n    method: 'PUT',\n    headers: { ...authHeader(),\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`http://localhost:8000/users/${user.id}`, requestOptions).then(handleResponse);\n  ;\n} // prefixed function name with underscore because delete is a reserved word in javascript\n\n\nfunction _delete(id) {\n  const requestOptions = {\n    method: 'DELETE',\n    headers: authHeader()\n  };\n  return fetch(`http://localhost:8000/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.status === 200) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout(); // location.reload(true);\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["D:/LVTN/LVTN/cuisine-net/src/services/user.service.js"],"names":["authHeader","axios","userService","login","logout","register","getAll","getById","update","delete","_delete","username","password","email","Promise","resolve","reject","request","url","method","data","then","user","catch","error","localStorage","removeItem","requestOptions","headers","fetch","handleResponse","id","body","JSON","stringify","response","text","parse","status","message","statusText"],"mappings":"AAAA,SAASA,UAAT,QAA2B,wBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,MAAMC,WAAW,GAAG;AACvBC,EAAAA,KADuB;AAEvBC,EAAAA,MAFuB;AAGvBC,EAAAA,QAHuB;AAIvBC,EAAAA,MAJuB;AAKvBC,EAAAA,OALuB;AAMvBC,EAAAA,MANuB;AAOvBC,EAAAA,MAAM,EAAEC;AAPe,CAApB;;AAUP,SAAUP,KAAV,CAAgBQ,QAAhB,EAA0BC,QAA1B,EAAoC;AAC5B,MAAIC,KAAK,GAACF,QAAV;AACA,SAAQ,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAASC,MAAT,KAAkB;AAClCf,IAAAA,KAAK,CAACgB,OAAN,CAAc;AACVC,MAAAA,GAAG,EAAE,eADK;AAEVC,MAAAA,MAAM,EAAE,MAFE;AAGVC,MAAAA,IAAI,EAAE;AACN,iBAAUP,KADJ;AAEN,oBAAYD;AAFN;AAHI,KAAd,EASA;AATA,KAUCS,IAVD,CAUOC,IAAD,IAAU;AACZ;AACA;AACA;AACAP,MAAAA,OAAO,CAACO,IAAD,CAAP;AACH,KAfD,EAgBCC,KAhBD,CAiBKC,KAAD,IAASR,MAAM,CAACQ,KAAD,CAjBnB;AAmBH,GApBO,CAAR;AAqBP;;AAED,SAASpB,MAAT,GAAkB;AACd;AACAqB,EAAAA,YAAY,CAACC,UAAb,CAAwB,MAAxB;AACH;;AAED,SAASpB,MAAT,GAAkB;AACd,QAAMqB,cAAc,GAAG;AACnBR,IAAAA,MAAM,EAAE,KADW;AAEnBS,IAAAA,OAAO,EAAE5B,UAAU;AAFA,GAAvB;AAKA,SAAO6B,KAAK,CAAE,6BAAF,EAAgCF,cAAhC,CAAL,CAAqDN,IAArD,CAA0DS,cAA1D,CAAP;AACH;;AAED,SAASvB,OAAT,CAAiBwB,EAAjB,EAAqB;AACjB,QAAMJ,cAAc,GAAG;AACnBR,IAAAA,MAAM,EAAE,KADW;AAEnBS,IAAAA,OAAO,EAAE5B,UAAU;AAFA,GAAvB;AAKA,SAAO6B,KAAK,CAAE,+BAA8BE,EAAG,EAAnC,EAAsCJ,cAAtC,CAAL,CAA2DN,IAA3D,CAAgES,cAAhE,CAAP;AACH;;AAED,SAASzB,QAAT,CAAkBiB,IAAlB,EAAwB;AACpB,QAAMK,cAAc,GAAG;AACnBR,IAAAA,MAAM,EAAE,MADW;AAEnBS,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFU;AAGnBI,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeZ,IAAf;AAHa,GAAvB;AAMA,SAAOO,KAAK,CAAE,oCAAF,EAAuCF,cAAvC,CAAL,CAA4DN,IAA5D,CAAiES,cAAjE,CAAP;AACH;;AAED,SAAStB,MAAT,CAAgBc,IAAhB,EAAsB;AAClB,QAAMK,cAAc,GAAG;AACnBR,IAAAA,MAAM,EAAE,KADW;AAEnBS,IAAAA,OAAO,EAAE,EAAE,GAAG5B,UAAU,EAAf;AAAmB,sBAAgB;AAAnC,KAFU;AAGnBgC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeZ,IAAf;AAHa,GAAvB;AAMA,SAAOO,KAAK,CAAE,+BAA8BP,IAAI,CAACS,EAAG,EAAxC,EAA2CJ,cAA3C,CAAL,CAAgEN,IAAhE,CAAqES,cAArE,CAAP;AAA4F;AAC/F,C,CAED;;;AACA,SAASpB,OAAT,CAAiBqB,EAAjB,EAAqB;AACjB,QAAMJ,cAAc,GAAG;AACnBR,IAAAA,MAAM,EAAE,QADW;AAEnBS,IAAAA,OAAO,EAAE5B,UAAU;AAFA,GAAvB;AAKA,SAAO6B,KAAK,CAAE,+BAA8BE,EAAG,EAAnC,EAAsCJ,cAAtC,CAAL,CAA2DN,IAA3D,CAAgES,cAAhE,CAAP;AACH;;AAED,SAASA,cAAT,CAAwBK,QAAxB,EAAkC;AAC9B,SAAOA,QAAQ,CAACC,IAAT,GAAgBf,IAAhB,CAAqBe,IAAI,IAAI;AAChC,UAAMhB,IAAI,GAAGgB,IAAI,IAAIH,IAAI,CAACI,KAAL,CAAWD,IAAX,CAArB;;AACA,QAAI,CAACD,QAAQ,CAACG,MAAV,KAAmB,GAAvB,EAA4B;AACxB,UAAIH,QAAQ,CAACG,MAAT,KAAoB,GAAxB,EAA6B;AACzB;AACAlC,QAAAA,MAAM,GAFmB,CAGzB;AACH;;AAED,YAAMoB,KAAK,GAAIJ,IAAI,IAAIA,IAAI,CAACmB,OAAd,IAA0BJ,QAAQ,CAACK,UAAjD;AACA,aAAO1B,OAAO,CAACE,MAAR,CAAeQ,KAAf,CAAP;AACH;;AACD,WAAOJ,IAAP;AACH,GAbM,CAAP;AAcH","sourcesContent":["import { authHeader } from '../helpers/auth-header';\r\nimport axios from 'axios';\r\nexport const userService = {\r\n    login,\r\n    logout,\r\n    register,\r\n    getAll,\r\n    getById,\r\n    update,\r\n    delete: _delete\r\n};\r\n\r\nfunction  login(username, password) {\r\n        let email=username;\r\n        return  new Promise((resolve,reject)=>{\r\n            axios.request({\r\n                url: '/users/signin',\r\n                method: \"post\",\r\n                data: {\r\n                \"email\" : email, \r\n                \"password\": password\r\n                }\r\n                \r\n            })\r\n            // .then(handleResponse)\r\n            .then((user) => {\r\n                // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n                // setTimeout(function(){localStorage.setItem('user', user)},50);\r\n                // return JSON.stringify(user);\r\n                resolve(user)\r\n            })\r\n            .catch(\r\n                (error)=>reject(error)\r\n            );\r\n        })\r\n}\r\n\r\nfunction logout() {\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem('user');\r\n}\r\n\r\nfunction getAll() {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: authHeader()\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction getById(id) {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: authHeader()\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users/${id}`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction register(user) {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(user)\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users/signup`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction update(user) {\r\n    const requestOptions = {\r\n        method: 'PUT',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(user)\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users/${user.id}`, requestOptions).then(handleResponse);;\r\n}\r\n\r\n// prefixed function name with underscore because delete is a reserved word in javascript\r\nfunction _delete(id) {\r\n    const requestOptions = {\r\n        method: 'DELETE',\r\n        headers: authHeader()\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users/${id}`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction handleResponse(response) {\r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.status===200) {\r\n            if (response.status === 401) {\r\n                // auto logout if 401 response returned from api\r\n                logout();\r\n                // location.reload(true);\r\n            }\r\n\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}