{"ast":null,"code":"var _jsxFileName = \"D:\\\\LVTN\\\\LVTN\\\\cuisine-net\\\\src\\\\components\\\\commentPost\\\\CommentPost.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { red } from '@material-ui/core/colors';\nimport { commentService } from './../../services/comment.service';\nimport { Comment } from 'antd';\nimport { CommentChildren } from './CommentChildren';\nimport { MessageInput, Avatar } from \"@chatscope/chat-ui-kit-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  avatar: {\n    backgroundColor: red[500]\n  }\n}));\nexport function CommentPost(props) {\n  _s();\n\n  var idPost = props.idPost; //comment\n\n  const [dataComment, setDataComment] = useState([]);\n  let mounted = true;\n  useEffect(() => {\n    commentService.getAllCommentPost(idPost).then(items => {\n      if (mounted) {\n        mounted = false;\n        setDataComment(items);\n      }\n    });\n    return () => mounted = false;\n  }, []);\n  const [messageInputValue, setMessageInputValue] = useState(\"\");\n\n  const sendMessage = messageInputValue => {\n    let userId = JSON.parse(localStorage.getItem('user'))._id;\n\n    let authorId = props.authorId;\n    commentService.createComment(idPost, messageInputValue, userId, authorId);\n    setMessageInputValue(\"\");\n    commentService.getAllCommentPost(idPost).then(items => {\n      if (mounted) {\n        mounted = false;\n        setDataComment(items);\n      }\n    });\n    return () => mounted = false;\n  };\n\n  const [isShowCommentReplyTo, setIsShowCommentReplyTo] = useState(false);\n  const [idCommentParent, setIdCommentParent] = useState();\n\n  const handleReplyTo = value => {\n    setIsShowCommentReplyTo(true);\n    setIdCommentParent(value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MessageInput, {\n      attachButton: false,\n      onChange: val => setMessageInputValue(val),\n      onSend: messageInputValue => sendMessage(messageInputValue)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), dataComment ? dataComment.map(value => {\n      return /*#__PURE__*/_jsxDEV(Comment, {\n        actions: [/*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: () => handleReplyTo(value._id),\n          children: \"Reply to\"\n        }, \"comment-nested-reply-to\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 35\n        }, this)],\n        author: /*#__PURE__*/_jsxDEV(\"a\", {\n          children: value.author.firstname + value.author.lastname\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 33\n        }, this),\n        avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n          src: value.author.photo,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 29\n        }, this),\n        content: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: value.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 29\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(CommentChildren, {\n          idComment: value._id,\n          isShowInput: isShowCommentReplyTo && idCommentParent == value._id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 28\n      }, this);\n    }) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CommentPost, \"5tsgY7difY9tDG5kY/FMsANFkHc=\");\n\n_c = CommentPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentPost\");","map":{"version":3,"sources":["D:/LVTN/LVTN/cuisine-net/src/components/commentPost/CommentPost.js"],"names":["React","useEffect","useState","makeStyles","red","commentService","Comment","CommentChildren","MessageInput","Avatar","useStyles","theme","avatar","backgroundColor","CommentPost","props","idPost","dataComment","setDataComment","mounted","getAllCommentPost","then","items","messageInputValue","setMessageInputValue","sendMessage","userId","JSON","parse","localStorage","getItem","_id","authorId","createComment","isShowCommentReplyTo","setIsShowCommentReplyTo","idCommentParent","setIdCommentParent","handleReplyTo","value","val","map","author","firstname","lastname","photo","text"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { red } from '@material-ui/core/colors';\r\nimport { commentService } from './../../services/comment.service';\r\nimport { Comment } from 'antd';\r\nimport { CommentChildren } from './CommentChildren'\r\nimport {\r\n    MessageInput,\r\n    Avatar\r\n} from \"@chatscope/chat-ui-kit-react\";\r\nconst useStyles = makeStyles((theme) => ({\r\n    avatar: {\r\n        backgroundColor: red[500],\r\n    },\r\n}));\r\n\r\nexport function CommentPost(props) {\r\n    var idPost = props.idPost;\r\n    //comment\r\n    const [dataComment, setDataComment] = useState([]);\r\n    let mounted = true;\r\n    useEffect(() => {\r\n        commentService.getAllCommentPost(idPost)\r\n            .then(items => {\r\n                if (mounted) {\r\n                    mounted = false;\r\n                    setDataComment(items);\r\n                }\r\n            })\r\n        return () => mounted = false;\r\n    }, []);\r\n    const [messageInputValue, setMessageInputValue] = useState(\"\");\r\n    const sendMessage = (messageInputValue) => {\r\n        let userId=JSON.parse(localStorage.getItem('user'))._id;\r\n        let authorId=props.authorId\r\n        commentService.createComment(idPost, messageInputValue,userId,authorId);\r\n\r\n        setMessageInputValue(\"\");\r\n        commentService.getAllCommentPost(idPost)\r\n            .then(items => {\r\n                if (mounted) {\r\n                    mounted = false;\r\n                    setDataComment(items);\r\n                }\r\n\r\n            })\r\n        return () => mounted = false;\r\n    };\r\n    \r\n    const [isShowCommentReplyTo, setIsShowCommentReplyTo] = useState(false);\r\n    const [idCommentParent, setIdCommentParent] = useState();\r\n    const handleReplyTo = (value) => {\r\n        setIsShowCommentReplyTo(true);\r\n        setIdCommentParent(value);\r\n    };\r\n    \r\n    return (\r\n        <div>\r\n            <MessageInput attachButton = {false} onChange={val => setMessageInputValue(val)}\r\n                onSend={(messageInputValue) => sendMessage(messageInputValue)}  />\r\n            {\r\n                dataComment?dataComment.map((value) => {\r\n                    return <Comment\r\n                        actions={[<span key=\"comment-nested-reply-to\" onClick={() => handleReplyTo(value._id)} >Reply to</span>]}\r\n                        author={<a>{value.author.firstname+ value.author.lastname}</a>}\r\n                        avatar={\r\n                            <Avatar\r\n                                src={value.author.photo}\r\n                                alt=\"\"\r\n                            />\r\n                        }\r\n                        content={\r\n                            <p>\r\n                                {value.text}\r\n                            </p>\r\n                        }\r\n                    >\r\n                        <CommentChildren idComment={value._id} isShowInput = {isShowCommentReplyTo&&idCommentParent == value._id}></CommentChildren>\r\n                    </Comment>\r\n                }):null\r\n            }\r\n        </div>\r\n\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}