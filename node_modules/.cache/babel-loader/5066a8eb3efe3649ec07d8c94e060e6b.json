{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { clamp, Vector2 } from 'math.gl';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport { TRANSITION_EVENTS } from './transition-manager';\nimport { mod } from '../utils/math-utils';\nvar DEFAULT_STATE = {\n  orbitAxis: 'Z',\n  rotationX: 0,\n  rotationOrbit: 0,\n  zoom: 0,\n  target: [0, 0, 0],\n  minRotationX: -90,\n  maxRotationX: 90,\n  minZoom: -Infinity,\n  maxZoom: Infinity\n};\nvar LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: function transitionEasing(t) {\n    return t;\n  },\n  transitionInterpolator: new LinearInterpolator(['target', 'zoom', 'rotationX', 'rotationOrbit']),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\nvar zoom2Scale = function zoom2Scale(zoom) {\n  return Math.pow(2, zoom);\n};\n\nexport var OrbitState = function (_ViewState) {\n  _inherits(OrbitState, _ViewState);\n\n  var _super = _createSuper(OrbitState);\n\n  function OrbitState(_ref) {\n    var _this;\n\n    var makeViewport = _ref.makeViewport,\n        width = _ref.width,\n        height = _ref.height,\n        _ref$orbitAxis = _ref.orbitAxis,\n        orbitAxis = _ref$orbitAxis === void 0 ? DEFAULT_STATE.orbitAxis : _ref$orbitAxis,\n        _ref$rotationX = _ref.rotationX,\n        rotationX = _ref$rotationX === void 0 ? DEFAULT_STATE.rotationX : _ref$rotationX,\n        _ref$rotationOrbit = _ref.rotationOrbit,\n        rotationOrbit = _ref$rotationOrbit === void 0 ? DEFAULT_STATE.rotationOrbit : _ref$rotationOrbit,\n        _ref$target = _ref.target,\n        target = _ref$target === void 0 ? DEFAULT_STATE.target : _ref$target,\n        _ref$zoom = _ref.zoom,\n        zoom = _ref$zoom === void 0 ? DEFAULT_STATE.zoom : _ref$zoom,\n        _ref$minRotationX = _ref.minRotationX,\n        minRotationX = _ref$minRotationX === void 0 ? DEFAULT_STATE.minRotationX : _ref$minRotationX,\n        _ref$maxRotationX = _ref.maxRotationX,\n        maxRotationX = _ref$maxRotationX === void 0 ? DEFAULT_STATE.maxRotationX : _ref$maxRotationX,\n        _ref$minZoom = _ref.minZoom,\n        minZoom = _ref$minZoom === void 0 ? DEFAULT_STATE.minZoom : _ref$minZoom,\n        _ref$maxZoom = _ref.maxZoom,\n        maxZoom = _ref$maxZoom === void 0 ? DEFAULT_STATE.maxZoom : _ref$maxZoom,\n        startPanPosition = _ref.startPanPosition,\n        startTarget = _ref.startTarget,\n        startRotatePos = _ref.startRotatePos,\n        startRotationX = _ref.startRotationX,\n        startRotationOrbit = _ref.startRotationOrbit,\n        startZoomPosition = _ref.startZoomPosition,\n        startZoom = _ref.startZoom;\n\n    _classCallCheck(this, OrbitState);\n\n    _this = _super.call(this, {\n      width: width,\n      height: height,\n      orbitAxis: orbitAxis,\n      rotationX: rotationX,\n      rotationOrbit: rotationOrbit,\n      target: target,\n      zoom: zoom,\n      minRotationX: minRotationX,\n      maxRotationX: maxRotationX,\n      minZoom: minZoom,\n      maxZoom: maxZoom\n    });\n    _this._state = {\n      startPanPosition: startPanPosition,\n      startTarget: startTarget,\n      startRotatePos: startRotatePos,\n      startRotationX: startRotationX,\n      startRotationOrbit: startRotationOrbit,\n      startZoomPosition: startZoomPosition,\n      startZoom: startZoom\n    };\n    _this.makeViewport = makeViewport;\n    return _this;\n  }\n\n  _createClass(OrbitState, [{\n    key: \"panStart\",\n    value: function panStart(_ref2) {\n      var pos = _ref2.pos;\n      var target = this._viewportProps.target;\n      return this._getUpdatedState({\n        startPanPosition: pos,\n        startTarget: target\n      });\n    }\n  }, {\n    key: \"pan\",\n    value: function pan(_ref3) {\n      var pos = _ref3.pos,\n          startPos = _ref3.startPos;\n      var _this$_state = this._state,\n          startPanPosition = _this$_state.startPanPosition,\n          startTarget = _this$_state.startTarget;\n      var delta = new Vector2(pos).subtract(startPanPosition);\n      return this._getUpdatedState({\n        target: this._calculateNewTarget({\n          startTarget: startTarget,\n          pixelOffset: delta\n        })\n      });\n    }\n  }, {\n    key: \"panEnd\",\n    value: function panEnd() {\n      return this._getUpdatedState({\n        startPanPosition: null,\n        startTarget: null\n      });\n    }\n  }, {\n    key: \"rotateStart\",\n    value: function rotateStart(_ref4) {\n      var pos = _ref4.pos;\n      return this._getUpdatedState({\n        startRotatePos: pos,\n        startRotationX: this._viewportProps.rotationX,\n        startRotationOrbit: this._viewportProps.rotationOrbit\n      });\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(_ref5) {\n      var pos = _ref5.pos,\n          _ref5$deltaAngleX = _ref5.deltaAngleX,\n          deltaAngleX = _ref5$deltaAngleX === void 0 ? 0 : _ref5$deltaAngleX,\n          _ref5$deltaAngleY = _ref5.deltaAngleY,\n          deltaAngleY = _ref5$deltaAngleY === void 0 ? 0 : _ref5$deltaAngleY;\n      var _this$_state2 = this._state,\n          startRotatePos = _this$_state2.startRotatePos,\n          startRotationX = _this$_state2.startRotationX,\n          startRotationOrbit = _this$_state2.startRotationOrbit;\n      var _this$_viewportProps = this._viewportProps,\n          width = _this$_viewportProps.width,\n          height = _this$_viewportProps.height;\n\n      if (!startRotatePos || !Number.isFinite(startRotationX) || !Number.isFinite(startRotationOrbit)) {\n        return this;\n      }\n\n      var newRotation;\n\n      if (pos) {\n        var deltaScaleX = (pos[0] - startRotatePos[0]) / width;\n        var deltaScaleY = (pos[1] - startRotatePos[1]) / height;\n\n        if (startRotationX < -90 || startRotationX > 90) {\n          deltaScaleX *= -1;\n        }\n\n        newRotation = {\n          rotationX: startRotationX + deltaScaleY * 180,\n          rotationOrbit: startRotationOrbit + deltaScaleX * 180\n        };\n      } else {\n        newRotation = {\n          rotationX: startRotationX + deltaAngleY,\n          rotationOrbit: startRotationOrbit + deltaAngleX\n        };\n      }\n\n      return this._getUpdatedState(newRotation);\n    }\n  }, {\n    key: \"rotateEnd\",\n    value: function rotateEnd() {\n      return this._getUpdatedState({\n        startRotationX: null,\n        startRotationOrbit: null\n      });\n    }\n  }, {\n    key: \"shortestPathFrom\",\n    value: function shortestPathFrom(viewState) {\n      var fromProps = viewState.getViewportProps();\n      var props = Object.assign({}, this._viewportProps);\n      var rotationOrbit = props.rotationOrbit;\n\n      if (Math.abs(rotationOrbit - fromProps.rotationOrbit) > 180) {\n        props.rotationOrbit = rotationOrbit < 0 ? rotationOrbit + 360 : rotationOrbit - 360;\n      }\n\n      return props;\n    }\n  }, {\n    key: \"zoomStart\",\n    value: function zoomStart(_ref6) {\n      var pos = _ref6.pos;\n      return this._getUpdatedState({\n        startZoomPosition: pos,\n        startTarget: this._viewportProps.target,\n        startZoom: this._viewportProps.zoom\n      });\n    }\n  }, {\n    key: \"zoom\",\n    value: function zoom(_ref7) {\n      var pos = _ref7.pos,\n          startPos = _ref7.startPos,\n          scale = _ref7.scale;\n      var _this$_viewportProps2 = this._viewportProps,\n          zoom = _this$_viewportProps2.zoom,\n          width = _this$_viewportProps2.width,\n          height = _this$_viewportProps2.height,\n          target = _this$_viewportProps2.target;\n      var _this$_state3 = this._state,\n          startZoom = _this$_state3.startZoom,\n          startZoomPosition = _this$_state3.startZoomPosition,\n          startTarget = _this$_state3.startTarget;\n\n      if (!Number.isFinite(startZoom)) {\n        startZoom = zoom;\n        startTarget = target;\n        startZoomPosition = startPos || pos;\n      }\n\n      var newZoom = this._calculateNewZoom({\n        scale: scale,\n        startZoom: startZoom\n      });\n\n      var startScale = zoom2Scale(startZoom);\n      var newScale = zoom2Scale(newZoom);\n      var dX = (width / 2 - startZoomPosition[0]) * (newScale / startScale - 1);\n      var dY = (height / 2 - startZoomPosition[1]) * (newScale / startScale - 1);\n      return this._getUpdatedState({\n        zoom: newZoom,\n        target: this._calculateNewTarget({\n          startTarget: startTarget,\n          zoom: newZoom,\n          pixelOffset: [dX, dY]\n        })\n      });\n    }\n  }, {\n    key: \"zoomEnd\",\n    value: function zoomEnd() {\n      return this._getUpdatedState({\n        startZoomPosition: null,\n        startTarget: null,\n        startZoom: null\n      });\n    }\n  }, {\n    key: \"zoomIn\",\n    value: function zoomIn() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n      return this._getUpdatedState({\n        zoom: this._calculateNewZoom({\n          scale: speed\n        })\n      });\n    }\n  }, {\n    key: \"zoomOut\",\n    value: function zoomOut() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n      return this._getUpdatedState({\n        zoom: this._calculateNewZoom({\n          scale: 1 / speed\n        })\n      });\n    }\n  }, {\n    key: \"moveLeft\",\n    value: function moveLeft() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n      var pixelOffset = [-speed, 0];\n      return this._getUpdatedState({\n        target: this._calculateNewTarget({\n          pixelOffset: pixelOffset\n        })\n      });\n    }\n  }, {\n    key: \"moveRight\",\n    value: function moveRight() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n      var pixelOffset = [speed, 0];\n      return this._getUpdatedState({\n        target: this._calculateNewTarget({\n          pixelOffset: pixelOffset\n        })\n      });\n    }\n  }, {\n    key: \"moveUp\",\n    value: function moveUp() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n      var pixelOffset = [0, -speed];\n      return this._getUpdatedState({\n        target: this._calculateNewTarget({\n          pixelOffset: pixelOffset\n        })\n      });\n    }\n  }, {\n    key: \"moveDown\",\n    value: function moveDown() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n      var pixelOffset = [0, speed];\n      return this._getUpdatedState({\n        target: this._calculateNewTarget({\n          pixelOffset: pixelOffset\n        })\n      });\n    }\n  }, {\n    key: \"rotateLeft\",\n    value: function rotateLeft() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n      return this._getUpdatedState({\n        rotationOrbit: this._viewportProps.rotationOrbit - speed\n      });\n    }\n  }, {\n    key: \"rotateRight\",\n    value: function rotateRight() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n      return this._getUpdatedState({\n        rotationOrbit: this._viewportProps.rotationOrbit + speed\n      });\n    }\n  }, {\n    key: \"rotateUp\",\n    value: function rotateUp() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      return this._getUpdatedState({\n        rotationX: this._viewportProps.rotationX - speed\n      });\n    }\n  }, {\n    key: \"rotateDown\",\n    value: function rotateDown() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      return this._getUpdatedState({\n        rotationX: this._viewportProps.rotationX + speed\n      });\n    }\n  }, {\n    key: \"_calculateNewZoom\",\n    value: function _calculateNewZoom(_ref8) {\n      var scale = _ref8.scale,\n          startZoom = _ref8.startZoom;\n      var _this$_viewportProps3 = this._viewportProps,\n          maxZoom = _this$_viewportProps3.maxZoom,\n          minZoom = _this$_viewportProps3.minZoom;\n\n      if (!Number.isFinite(startZoom)) {\n        startZoom = this._viewportProps.zoom;\n      }\n\n      var zoom = startZoom + Math.log2(scale);\n      return clamp(zoom, minZoom, maxZoom);\n    }\n  }, {\n    key: \"_calculateNewTarget\",\n    value: function _calculateNewTarget(_ref9) {\n      var startTarget = _ref9.startTarget,\n          zoom = _ref9.zoom,\n          pixelOffset = _ref9.pixelOffset;\n      var viewportProps = Object.assign({}, this._viewportProps);\n\n      if (Number.isFinite(zoom)) {\n        viewportProps.zoom = zoom;\n      }\n\n      if (startTarget) {\n        viewportProps.target = startTarget;\n      }\n\n      var viewport = this.makeViewport(viewportProps);\n      var center = viewport.project(viewportProps.target);\n      return viewport.unproject([center[0] - pixelOffset[0], center[1] - pixelOffset[1], center[2]]);\n    }\n  }, {\n    key: \"_getUpdatedState\",\n    value: function _getUpdatedState(newProps) {\n      return new OrbitState(Object.assign({}, this._viewportProps, this._state, newProps));\n    }\n  }, {\n    key: \"_applyConstraints\",\n    value: function _applyConstraints(props) {\n      var maxZoom = props.maxZoom,\n          minZoom = props.minZoom,\n          zoom = props.zoom,\n          maxRotationX = props.maxRotationX,\n          minRotationX = props.minRotationX,\n          rotationOrbit = props.rotationOrbit;\n      props.zoom = clamp(zoom, minZoom, maxZoom);\n      props.rotationX = clamp(props.rotationX, minRotationX, maxRotationX);\n\n      if (rotationOrbit < -180 || rotationOrbit > 180) {\n        props.rotationOrbit = mod(rotationOrbit + 180, 360) - 180;\n      }\n\n      return props;\n    }\n  }]);\n\n  return OrbitState;\n}(ViewState);\n\nvar OrbitController = function (_Controller) {\n  _inherits(OrbitController, _Controller);\n\n  var _super2 = _createSuper(OrbitController);\n\n  function OrbitController(props) {\n    _classCallCheck(this, OrbitController);\n\n    return _super2.call(this, OrbitState, props);\n  }\n\n  _createClass(OrbitController, [{\n    key: \"_getTransitionProps\",\n    value: function _getTransitionProps() {\n      return LINEAR_TRANSITION_PROPS;\n    }\n  }]);\n\n  return OrbitController;\n}(Controller);\n\nexport { OrbitController as default };","map":{"version":3,"sources":["../../../src/controllers/orbit-controller.js"],"names":["DEFAULT_STATE","orbitAxis","rotationX","rotationOrbit","zoom","target","minRotationX","maxRotationX","minZoom","maxZoom","Infinity","LINEAR_TRANSITION_PROPS","transitionDuration","transitionEasing","transitionInterpolator","transitionInterruption","TRANSITION_EVENTS","BREAK","zoom2Scale","Math","OrbitState","makeViewport","width","height","startPanPosition","startTarget","startRotatePos","startRotationX","startRotationOrbit","startZoomPosition","startZoom","pos","startPos","delta","pixelOffset","deltaAngleX","deltaAngleY","Number","deltaScaleX","deltaScaleY","newRotation","fromProps","viewState","props","Object","scale","newZoom","startScale","newScale","dX","dY","speed","clamp","viewportProps","viewport","center","mod","OrbitController","Controller"],"mappings":"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","sourcesContent":["import {clamp, Vector2} from 'math.gl';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport {TRANSITION_EVENTS} from './transition-manager';\nimport {mod} from '../utils/math-utils';\n\nconst DEFAULT_STATE = {\n  orbitAxis: 'Z',\n  rotationX: 0,\n  rotationOrbit: 0,\n  zoom: 0,\n  target: [0, 0, 0],\n  minRotationX: -90,\n  maxRotationX: 90,\n  minZoom: -Infinity,\n  maxZoom: Infinity\n};\n\nconst LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(['target', 'zoom', 'rotationX', 'rotationOrbit']),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\n/* Helpers */\n\nconst zoom2Scale = zoom => Math.pow(2, zoom);\n\nexport class OrbitState extends ViewState {\n  constructor({\n    makeViewport,\n\n    /* Viewport arguments */\n    width, // Width of viewport\n    height, // Height of viewport\n    orbitAxis = DEFAULT_STATE.orbitAxis,\n    rotationX = DEFAULT_STATE.rotationX, // Rotation around x axis\n    rotationOrbit = DEFAULT_STATE.rotationOrbit, // Rotation around orbit axis\n    target = DEFAULT_STATE.target,\n    zoom = DEFAULT_STATE.zoom,\n\n    /* Viewport constraints */\n    minRotationX = DEFAULT_STATE.minRotationX,\n    maxRotationX = DEFAULT_STATE.maxRotationX,\n    minZoom = DEFAULT_STATE.minZoom,\n    maxZoom = DEFAULT_STATE.maxZoom,\n\n    /** Interaction states, required to calculate change during transform */\n    // Model state when the pan operation first started\n    startPanPosition,\n    startTarget,\n    // Model state when the rotate operation first started\n    startRotatePos,\n    startRotationX,\n    startRotationOrbit,\n    // Model state when the zoom operation first started\n    startZoomPosition,\n    startZoom\n  }) {\n    super({\n      width,\n      height,\n      orbitAxis,\n      rotationX,\n      rotationOrbit,\n      target,\n      zoom,\n      minRotationX,\n      maxRotationX,\n      minZoom,\n      maxZoom\n    });\n\n    this._state = {\n      startPanPosition,\n      startTarget,\n      startRotatePos,\n      startRotationX,\n      startRotationOrbit,\n      startZoomPosition,\n      startZoom\n    };\n\n    this.makeViewport = makeViewport;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    const {target} = this._viewportProps;\n\n    return this._getUpdatedState({\n      startPanPosition: pos,\n      startTarget: target\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan({pos, startPos}) {\n    const {startPanPosition, startTarget} = this._state;\n    const delta = new Vector2(pos).subtract(startPanPosition);\n\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({startTarget, pixelOffset: delta})\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanPosition: null,\n      startTarget: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startRotationX: this._viewportProps.rotationX,\n      startRotationOrbit: this._viewportProps.rotationOrbit\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({pos, deltaAngleX = 0, deltaAngleY = 0}) {\n    const {startRotatePos, startRotationX, startRotationOrbit} = this._state;\n    const {width, height} = this._viewportProps;\n\n    if (\n      !startRotatePos ||\n      !Number.isFinite(startRotationX) ||\n      !Number.isFinite(startRotationOrbit)\n    ) {\n      return this;\n    }\n\n    let newRotation;\n    if (pos) {\n      let deltaScaleX = (pos[0] - startRotatePos[0]) / width;\n      const deltaScaleY = (pos[1] - startRotatePos[1]) / height;\n\n      if (startRotationX < -90 || startRotationX > 90) {\n        // When looking at the \"back\" side of the scene, invert horizontal drag\n        // so that the camera movement follows user input\n        deltaScaleX *= -1;\n      }\n      newRotation = {\n        rotationX: startRotationX + deltaScaleY * 180,\n        rotationOrbit: startRotationOrbit + deltaScaleX * 180\n      };\n    } else {\n      newRotation = {\n        rotationX: startRotationX + deltaAngleY,\n        rotationOrbit: startRotationOrbit + deltaAngleX\n      };\n    }\n\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startRotationX: null,\n      startRotationOrbit: null\n    });\n  }\n\n  // shortest path between two view states\n  shortestPathFrom(viewState) {\n    const fromProps = viewState.getViewportProps();\n    const props = Object.assign({}, this._viewportProps);\n    const {rotationOrbit} = props;\n\n    if (Math.abs(rotationOrbit - fromProps.rotationOrbit) > 180) {\n      props.rotationOrbit = rotationOrbit < 0 ? rotationOrbit + 360 : rotationOrbit - 360;\n    }\n\n    return props;\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedState({\n      startZoomPosition: pos,\n      startTarget: this._viewportProps.target,\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current target is\n   * @param {[Number, Number]} startPos - the target position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    const {zoom, width, height, target} = this._viewportProps;\n    let {startZoom, startZoomPosition, startTarget} = this._state;\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = zoom;\n      startTarget = target;\n      startZoomPosition = startPos || pos;\n    }\n\n    const newZoom = this._calculateNewZoom({scale, startZoom});\n    const startScale = zoom2Scale(startZoom);\n    const newScale = zoom2Scale(newZoom);\n\n    const dX = (width / 2 - startZoomPosition[0]) * (newScale / startScale - 1);\n    const dY = (height / 2 - startZoomPosition[1]) * (newScale / startScale - 1);\n\n    return this._getUpdatedState({\n      zoom: newZoom,\n      target: this._calculateNewTarget({startTarget, zoom: newZoom, pixelOffset: [dX, dY]})\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomPosition: null,\n      startTarget: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn(speed = 2) {\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({scale: speed})\n    });\n  }\n\n  zoomOut(speed = 2) {\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({scale: 1 / speed})\n    });\n  }\n\n  moveLeft(speed = 50) {\n    const pixelOffset = [-speed, 0];\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({pixelOffset})\n    });\n  }\n\n  moveRight(speed = 50) {\n    const pixelOffset = [speed, 0];\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({pixelOffset})\n    });\n  }\n\n  moveUp(speed = 50) {\n    const pixelOffset = [0, -speed];\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({pixelOffset})\n    });\n  }\n\n  moveDown(speed = 50) {\n    const pixelOffset = [0, speed];\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({pixelOffset})\n    });\n  }\n\n  rotateLeft(speed = 15) {\n    return this._getUpdatedState({\n      rotationOrbit: this._viewportProps.rotationOrbit - speed\n    });\n  }\n\n  rotateRight(speed = 15) {\n    return this._getUpdatedState({\n      rotationOrbit: this._viewportProps.rotationOrbit + speed\n    });\n  }\n\n  rotateUp(speed = 10) {\n    return this._getUpdatedState({\n      rotationX: this._viewportProps.rotationX - speed\n    });\n  }\n\n  rotateDown(speed = 10) {\n    return this._getUpdatedState({\n      rotationX: this._viewportProps.rotationX + speed\n    });\n  }\n\n  /* Private methods */\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    if (!Number.isFinite(startZoom)) {\n      startZoom = this._viewportProps.zoom;\n    }\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  _calculateNewTarget({startTarget, zoom, pixelOffset}) {\n    const viewportProps = Object.assign({}, this._viewportProps);\n    if (Number.isFinite(zoom)) {\n      viewportProps.zoom = zoom;\n    }\n    if (startTarget) {\n      viewportProps.target = startTarget;\n    }\n    const viewport = this.makeViewport(viewportProps);\n    const center = viewport.project(viewportProps.target);\n    return viewport.unproject([center[0] - pixelOffset[0], center[1] - pixelOffset[1], center[2]]);\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new OrbitState(Object.assign({}, this._viewportProps, this._state, newProps));\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom, maxRotationX, minRotationX, rotationOrbit} = props;\n\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n    props.rotationX = clamp(props.rotationX, minRotationX, maxRotationX);\n    if (rotationOrbit < -180 || rotationOrbit > 180) {\n      props.rotationOrbit = mod(rotationOrbit + 180, 360) - 180;\n    }\n\n    return props;\n  }\n}\n\nexport default class OrbitController extends Controller {\n  constructor(props) {\n    super(OrbitState, props);\n  }\n\n  _getTransitionProps() {\n    // Enables Transitions on double-tap and key-down events.\n    return LINEAR_TRANSITION_PROPS;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}