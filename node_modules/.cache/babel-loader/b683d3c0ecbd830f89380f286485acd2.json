{"ast":null,"code":"import { chatConstants } from \"../constants/chat.constants\";\nexport function chat(state = {\n  rooms: [],\n  currentRoom: null,\n  roomsFetching: false,\n  roomId: null,\n  callingModal: false,\n  answeringModal: {\n    isOpen: false\n  },\n  searchedRooms: null\n}, action) {\n  switch (action.type) {\n    case chatConstants.TYPING:\n      if (state[action.roomId]) {\n        return { ...state,\n          [action.roomId]: { ...state[action.roomId],\n            isTyping: true\n          }\n        };\n      } else {\n        return { ...state\n        };\n      }\n\n    case chatConstants.STOPPED_TYPING:\n      if (state[action.roomId]) {\n        return { ...state,\n          [action.roomId]: { ...state[action.roomId],\n            isTyping: false\n          }\n        };\n      } else {\n        return { ...state\n        };\n      }\n\n    case chatConstants.CHANGE_ROOM:\n      return { ...state,\n        currentRoom: action.room,\n        roomId: action.room._id\n      };\n\n    case chatConstants.INIT_MESSAGE_ARRAY:\n      state.rooms.push({\n        [action.roomId]: {\n          messages: [],\n          initialMessagesFetchig: false,\n          messageFetching: false,\n          isTyping: false\n        }\n      });\n\n      if (!state.rooms[action.roomId]) {\n        return { ...state\n        };\n      } else {\n        return { ...state\n        };\n      }\n\n    case chatConstants.GET_ROOMS_REQUEST:\n      return { ...state,\n        roomsFetching: true\n      };\n\n    case chatConstants.GET_ROOMS_SUCCESS:\n      return { ...state,\n        rooms: action.rooms,\n        roomsFetching: false\n      };\n\n    case chatConstants.ADD_NEW_ROOM:\n      return { ...state,\n        rooms: [action.room, ...state.rooms]\n      };\n\n    case chatConstants.GET_MESSAGES_INITIAL_REQUEST:\n      return { ...state,\n        [action.roomId]: { ...state[action.roomId],\n          initialMessagesFetchig: true\n        }\n      };\n\n    case chatConstants.GET_MESSAGES_REQUEST:\n      return { ...state,\n        [action.roomId]: { ...state[action.roomId],\n          messageFetching: true\n        }\n      };\n\n    case chatConstants.GET_MESSAGES_SUCCESS:\n      let messages = action.data.messages;\n      let prev = null;\n\n      for (let i = 0; i < messages.length; i++) {\n        if (prev !== messages[i].sender) {\n          messages[i].picture = true;\n          prev = messages[i].sender;\n        } else {\n          messages[i].picture = false;\n        }\n      }\n\n      return { ...state,\n        [action.data.roomId]: { ...state[action.data.roomId],\n          messages: [...action.data.messages, ...state[action.data.roomId].messages],\n          messageFetching: false,\n          initialMessagesFetchig: false\n        }\n      };\n\n    case chatConstants.SEND_MESSAGE_REQUEST:\n      let currentRoom = state.currentRoom;\n\n      if (currentRoom && state.currentRoom._id === action.message.roomId) {\n        currentRoom = { ...state.currentRoom,\n          messages: state.currentRoom.messages + 1\n        };\n      }\n\n      if (state[action.message.roomId]) {\n        const messages = state[action.message.roomId].messages;\n        if (!messages.length) action.message.picture = true;else if (messages[messages.length - 1].sender !== action.message.sender) action.message.picture = true;else action.message.picture = false;\n        return { ...state,\n          [action.message.roomId]: { ...state[action.message.roomId],\n            messages: [...state[action.message.roomId].messages, action.message]\n          },\n          rooms: state.rooms.map(room => {\n            if (room._id === action.message.roomId) {\n              return { ...room,\n                messages: room.messages + 1\n              };\n            } else {\n              return room;\n            }\n          }),\n          currentRoom\n        };\n      } else {\n        return { ...state\n        };\n      }\n\n    case chatConstants.SEND_MESSAGE_SUCCESS:\n      if (state[action.message.roomId]) {\n        const index = state.rooms.findIndex(room => room._id === action.message.roomId);\n        const newRoom = state.rooms[index];\n        const messages = state[action.message.roomId].messages;\n        if (messages.length <= 1) action.message.picture = true;else if (messages[messages.length - 2].sender !== action.message.sender) action.message.picture = true;else action.message.picture = false;\n        return { ...state,\n          [action.message.roomId]: { ...state[action.message.roomId],\n            messages: state[action.message.roomId].messages.map(message => {\n              if (message.uuid === action.message.uuid) {\n                return action.message;\n              } else {\n                return message;\n              }\n            })\n          },\n          rooms: [{ ...newRoom,\n            //messages: newRoom.messages + 1,\n            lastMessage: [action.message]\n          }, ...state.rooms.filter(room => room._id !== action.message.roomId)]\n        };\n      } else {\n        return { ...state\n        };\n      }\n\n    case chatConstants.NEW_MESSAGE:\n      if (state[action.message.roomId]) {\n        const index = state.rooms.findIndex(room => room._id === action.message.roomId);\n        const newRoom = state.rooms[index];\n        const messages = state[action.message.roomId].messages;\n        if (!messages.length) action.message.picture = true;else if (messages[messages.length - 1].sender !== action.message.sender) action.message.picture = true;else action.message.picture = false;\n        let currentRoom = state.currentRoom;\n\n        if (currentRoom && state.currentRoom._id === action.message.roomId) {\n          currentRoom = { ...state.currentRoom,\n            messages: state.currentRoom.messages + 1\n          };\n        }\n\n        return { ...state,\n          [action.message.roomId]: { ...state[action.message.roomId],\n            messages: [...state[action.message.roomId].messages, action.message]\n          },\n          currentRoom,\n          rooms: [{ ...newRoom,\n            messages: newRoom.messages + 1,\n            lastMessage: [action.message]\n          }, ...state.rooms.filter(room => room._id !== action.message.roomId)]\n        };\n      } else {\n        return { ...state\n        };\n      }\n\n    case chatConstants.READ_MESSAGES:\n      return { ...state,\n        [action.roomId]: { ...state[action.roomId],\n          messages: state[action.roomId].messages.map(message => {\n            if (action.messageIds.includes(message._id)) {\n              return { ...message,\n                read: true\n              };\n            } else {\n              return { ...message\n              };\n            }\n          })\n        }\n      };\n\n    case chatConstants.CHANGE_ACTIVITY_STATUS:\n      return { ...state,\n        rooms: state.rooms.map(room => {\n          if (room.members[0]._id === action.user.user) {\n            room.members[0].activityStatus = action.user.activityStatus;\n            return { ...room\n            };\n          } else if (room.members[1]._id === action.user.user) {\n            room.members[1].activityStatus = action.user.activityStatus;\n            return { ...room\n            };\n          } else {\n            return { ...room\n            };\n          }\n        })\n      };\n\n    case chatConstants.RECEIVE_READ_MESSAGES:\n      if (state[action.data.roomId]) {\n        return { ...state,\n          [action.data.roomId]: { ...state[action.data.roomId],\n            messages: state[action.data.roomId].messages.map(message => {\n              if (action.data.messageIds.includes(message._id)) {\n                return { ...message,\n                  read: true\n                };\n              } else {\n                return { ...message\n                };\n              }\n            })\n          }\n        };\n      } else {\n        return { ...state\n        };\n      }\n\n    case chatConstants.OPEN_CALLING_MODAL:\n      return { ...state,\n        callingModal: true\n      };\n\n    case chatConstants.CLOSE_CALLING_MODAL:\n      return { ...state,\n        callingModal: false\n      };\n\n    case chatConstants.OPEN_ANSWERING_MODAL:\n      return { ...state,\n        answeringModal: { ...state.answeringModal,\n          isOpen: true,\n          webRtc: { ...state.webRtc,\n            ...action.data.webRtc\n          },\n          caller: { ...state.caller,\n            ...action.data.caller\n          },\n          room: { ...state.room,\n            ...action.data.room\n          }\n        }\n      };\n\n    case chatConstants.CLOSE_ANSWERING_MODAL:\n      return { ...state,\n        answeringModal: { ...state.answeringModal,\n          isOpen: false,\n          webRtc: {},\n          caller: {},\n          room: {}\n        }\n      };\n\n    case chatConstants.SEARCH_USERS:\n      return { ...state,\n        searchedRooms: action.rooms\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["D:/LVTN/LVTN/cuisine-net/src/reducers/chat.reducer.js"],"names":["chatConstants","chat","state","rooms","currentRoom","roomsFetching","roomId","callingModal","answeringModal","isOpen","searchedRooms","action","type","TYPING","isTyping","STOPPED_TYPING","CHANGE_ROOM","room","_id","INIT_MESSAGE_ARRAY","push","messages","initialMessagesFetchig","messageFetching","GET_ROOMS_REQUEST","GET_ROOMS_SUCCESS","ADD_NEW_ROOM","GET_MESSAGES_INITIAL_REQUEST","GET_MESSAGES_REQUEST","GET_MESSAGES_SUCCESS","data","prev","i","length","sender","picture","SEND_MESSAGE_REQUEST","message","map","SEND_MESSAGE_SUCCESS","index","findIndex","newRoom","uuid","lastMessage","filter","NEW_MESSAGE","READ_MESSAGES","messageIds","includes","read","CHANGE_ACTIVITY_STATUS","members","user","activityStatus","RECEIVE_READ_MESSAGES","OPEN_CALLING_MODAL","CLOSE_CALLING_MODAL","OPEN_ANSWERING_MODAL","webRtc","caller","CLOSE_ANSWERING_MODAL","SEARCH_USERS"],"mappings":"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","sourcesContent":["import { chatConstants } from \"../constants/chat.constants\";\r\n\r\nexport function chat(\r\n    state = {\r\n        rooms: [],\r\n        currentRoom: null,\r\n        roomsFetching: false,\r\n        roomId: null,\r\n        callingModal: false,\r\n        answeringModal: {\r\n            isOpen: false,\r\n        },\r\n        searchedRooms: null,\r\n    },\r\n    action\r\n) {\r\n    switch (action.type) {\r\n        case chatConstants.TYPING:\r\n            if (state[action.roomId]) {\r\n                return {\r\n                    ...state,\r\n                    [action.roomId]: {\r\n                        ...state[action.roomId],\r\n                        isTyping: true,\r\n                    },\r\n                };\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                };\r\n            }\r\n        case chatConstants.STOPPED_TYPING:\r\n            if (state[action.roomId]) {\r\n                return {\r\n                    ...state,\r\n                    [action.roomId]: {\r\n                        ...state[action.roomId],\r\n                        isTyping: false,\r\n                    },\r\n                };\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                };\r\n            }\r\n        case chatConstants.CHANGE_ROOM:\r\n            return {\r\n                ...state,\r\n                currentRoom: action.room,\r\n                roomId: action.room._id,\r\n            };\r\n        case chatConstants.INIT_MESSAGE_ARRAY:\r\n            state.rooms.push({\r\n                [action.roomId]: {\r\n                    messages: [],\r\n                    initialMessagesFetchig: false,\r\n                    messageFetching: false,\r\n                    isTyping: false,\r\n                }\r\n            })\r\n            if (!state.rooms[action.roomId]) {\r\n                return {\r\n                    ...state\r\n                };\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                };\r\n            }\r\n\r\n        case chatConstants.GET_ROOMS_REQUEST:\r\n            return {\r\n                ...state,\r\n                roomsFetching: true,\r\n            };\r\n        case chatConstants.GET_ROOMS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                rooms: action.rooms,\r\n                roomsFetching: false,\r\n            };\r\n        case chatConstants.ADD_NEW_ROOM:\r\n            return {\r\n                ...state,\r\n                rooms: [action.room, ...state.rooms],\r\n            };\r\n        case chatConstants.GET_MESSAGES_INITIAL_REQUEST:\r\n            return {\r\n                ...state,\r\n                [action.roomId]: {\r\n                    ...state[action.roomId],\r\n                    initialMessagesFetchig: true,\r\n                },\r\n            };\r\n        case chatConstants.GET_MESSAGES_REQUEST:\r\n            return {\r\n                ...state,\r\n                [action.roomId]: {\r\n                    ...state[action.roomId],\r\n                    messageFetching: true,\r\n                },\r\n            };\r\n        case chatConstants.GET_MESSAGES_SUCCESS:\r\n            let messages = action.data.messages;\r\n            let prev = null;\r\n\r\n            for (let i = 0; i < messages.length; i++) {\r\n                if (prev !== messages[i].sender) {\r\n                    messages[i].picture = true;\r\n                    prev = messages[i].sender;\r\n                } else {\r\n                    messages[i].picture = false;\r\n                }\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                [action.data.roomId]: {\r\n                    ...state[action.data.roomId],\r\n                    messages: [\r\n                        ...action.data.messages,\r\n                        ...state[action.data.roomId].messages,\r\n                    ],\r\n                    messageFetching: false,\r\n                    initialMessagesFetchig: false,\r\n                },\r\n            };\r\n        case chatConstants.SEND_MESSAGE_REQUEST:\r\n            let currentRoom = state.currentRoom;\r\n            if (currentRoom && state.currentRoom._id === action.message.roomId) {\r\n                currentRoom = {\r\n                    ...state.currentRoom,\r\n                    messages: state.currentRoom.messages + 1,\r\n                };\r\n            }\r\n\r\n            if (state[action.message.roomId]) {\r\n                const messages = state[action.message.roomId].messages;\r\n                if (!messages.length) action.message.picture = true;\r\n                else if (messages[messages.length - 1].sender !== action.message.sender)\r\n                    action.message.picture = true;\r\n                else action.message.picture = false;\r\n\r\n                return {\r\n                    ...state,\r\n                    [action.message.roomId]: {\r\n                        ...state[action.message.roomId],\r\n                        messages: [\r\n                            ...state[action.message.roomId].messages,\r\n                            action.message,\r\n                        ],\r\n                    },\r\n                    rooms: state.rooms.map((room) => {\r\n                        if (room._id === action.message.roomId) {\r\n                            return {\r\n                                ...room,\r\n                                messages: room.messages + 1,\r\n                            };\r\n                        } else {\r\n                            return room;\r\n                        }\r\n                    }),\r\n                    currentRoom,\r\n                };\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                };\r\n            }\r\n        case chatConstants.SEND_MESSAGE_SUCCESS:\r\n            if (state[action.message.roomId]) {\r\n                const index = state.rooms.findIndex(\r\n                    (room) => room._id === action.message.roomId\r\n                );\r\n                const newRoom = state.rooms[index];\r\n\r\n                const messages = state[action.message.roomId].messages;\r\n                if (messages.length <= 1) action.message.picture = true;\r\n                else if (messages[messages.length - 2].sender !== action.message.sender)\r\n                    action.message.picture = true;\r\n                else action.message.picture = false;\r\n\r\n                return {\r\n                    ...state,\r\n                    [action.message.roomId]: {\r\n                        ...state[action.message.roomId],\r\n                        messages: state[action.message.roomId].messages.map((message) => {\r\n                            if (message.uuid === action.message.uuid) {\r\n                                return action.message;\r\n                            } else {\r\n                                return message;\r\n                            }\r\n                        }),\r\n                    },\r\n                    rooms: [\r\n                        {\r\n                            ...newRoom,\r\n                            //messages: newRoom.messages + 1,\r\n                            lastMessage: [action.message],\r\n                        },\r\n                        ...state.rooms.filter((room) => room._id !== action.message.roomId),\r\n                    ],\r\n                };\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                };\r\n            }\r\n        case chatConstants.NEW_MESSAGE:\r\n            if (state[action.message.roomId]) {\r\n                const index = state.rooms.findIndex(\r\n                    (room) => room._id === action.message.roomId\r\n                );\r\n                const newRoom = state.rooms[index];\r\n\r\n                const messages = state[action.message.roomId].messages;\r\n                if (!messages.length) action.message.picture = true;\r\n                else if (messages[messages.length - 1].sender !== action.message.sender)\r\n                    action.message.picture = true;\r\n                else action.message.picture = false;\r\n\r\n                let currentRoom = state.currentRoom;\r\n                if (currentRoom && state.currentRoom._id === action.message.roomId) {\r\n                    currentRoom = {\r\n                        ...state.currentRoom,\r\n                        messages: state.currentRoom.messages + 1,\r\n                    };\r\n                }\r\n                return {\r\n                    ...state,\r\n                    [action.message.roomId]: {\r\n                        ...state[action.message.roomId],\r\n                        messages: [\r\n                            ...state[action.message.roomId].messages,\r\n                            action.message,\r\n                        ],\r\n                    },\r\n                    currentRoom,\r\n                    rooms: [\r\n                        {\r\n                            ...newRoom,\r\n                            messages: newRoom.messages + 1,\r\n                            lastMessage: [action.message],\r\n                        },\r\n                        ...state.rooms.filter((room) => room._id !== action.message.roomId),\r\n                    ],\r\n                };\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                };\r\n            }\r\n        case chatConstants.READ_MESSAGES:\r\n            return {\r\n                ...state,\r\n                [action.roomId]: {\r\n                    ...state[action.roomId],\r\n                    messages: state[action.roomId].messages.map((message) => {\r\n                        if (action.messageIds.includes(message._id)) {\r\n                            return {\r\n                                ...message,\r\n                                read: true,\r\n                            };\r\n                        } else {\r\n                            return {\r\n                                ...message,\r\n                            };\r\n                        }\r\n                    }),\r\n                },\r\n            };\r\n        case chatConstants.CHANGE_ACTIVITY_STATUS:\r\n            return {\r\n                ...state,\r\n                rooms: state.rooms.map((room) => {\r\n                    if (room.members[0]._id === action.user.user) {\r\n                        room.members[0].activityStatus = action.user.activityStatus;\r\n                        return {\r\n                            ...room,\r\n                        };\r\n                    } else if (room.members[1]._id === action.user.user) {\r\n                        room.members[1].activityStatus = action.user.activityStatus;\r\n                        return {\r\n                            ...room,\r\n                        };\r\n                    } else {\r\n                        return {\r\n                            ...room,\r\n                        };\r\n                    }\r\n                }),\r\n            };\r\n        case chatConstants.RECEIVE_READ_MESSAGES:\r\n            if (state[action.data.roomId]) {\r\n                return {\r\n                    ...state,\r\n                    [action.data.roomId]: {\r\n                        ...state[action.data.roomId],\r\n                        messages: state[action.data.roomId].messages.map((message) => {\r\n                            if (action.data.messageIds.includes(message._id)) {\r\n                                return {\r\n                                    ...message,\r\n                                    read: true,\r\n                                };\r\n                            } else {\r\n                                return {\r\n                                    ...message,\r\n                                };\r\n                            }\r\n                        }),\r\n                    },\r\n                };\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                };\r\n            }\r\n        case chatConstants.OPEN_CALLING_MODAL:\r\n            return {\r\n                ...state,\r\n                callingModal: true,\r\n            };\r\n        case chatConstants.CLOSE_CALLING_MODAL:\r\n            return {\r\n                ...state,\r\n                callingModal: false,\r\n            };\r\n        case chatConstants.OPEN_ANSWERING_MODAL:\r\n            return {\r\n                ...state,\r\n                answeringModal: {\r\n                    ...state.answeringModal,\r\n                    isOpen: true,\r\n                    webRtc: {\r\n                        ...state.webRtc,\r\n                        ...action.data.webRtc,\r\n                    },\r\n                    caller: {\r\n                        ...state.caller,\r\n                        ...action.data.caller,\r\n                    },\r\n                    room: {\r\n                        ...state.room,\r\n                        ...action.data.room,\r\n                    },\r\n                },\r\n            };\r\n        case chatConstants.CLOSE_ANSWERING_MODAL:\r\n            return {\r\n                ...state,\r\n                answeringModal: {\r\n                    ...state.answeringModal,\r\n                    isOpen: false,\r\n                    webRtc: {},\r\n                    caller: {},\r\n                    room: {},\r\n                },\r\n            };\r\n        case chatConstants.SEARCH_USERS:\r\n            return {\r\n                ...state,\r\n                searchedRooms: action.rooms,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}