{"ast":null,"code":"import { notificationConstants } from \"../constants/notification.constants\";\nimport { userConstants } from \"../constants/user.constants\";\nexport function notification(state = {\n  isOpen: false,\n  notifications: [],\n  allNotificationsCount: 0\n}, action) {\n  switch (action.type) {\n    case notificationConstants.FETCH_NOTIFICATIONS_SUCCESS:\n      console.log(\"fetch ok\");\n\n      if (action.inialFetch) {\n        return { ...state,\n          notifications: action.notifications,\n          allNotificationsCount: action.total.count\n        };\n      }\n\n      return { ...state,\n        notifications: [...state.notifications, ...action.notifications]\n      };\n      break;\n\n    case notificationConstants.CLOSE_NOTIFICATION_POPUP:\n      return { ...state,\n        isOpen: false\n      };\n\n    case notificationConstants.TOGGLE_NOTIFICATION_POPUP:\n      return { ...state,\n        isOpen: !state.isOpen\n      };\n\n    case notificationConstants.ADD_NOTIFICATION:\n      return { ...state,\n        notifications: [action.data.notification, ...state.notifications],\n        allNotificationsCount: state.allNotificationsCount + 1\n      };\n\n    case notificationConstants.READ_NOTIFICATIOS:\n      return { ...state,\n        notifications: state.notifications.map(e => {\n          return { ...e,\n            read: true\n          };\n        })\n      };\n\n    case userConstants.GETUSER_SUCCESS:\n      return { ...state,\n        allNotificationsCount: action.user.allNotifications\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["D:/LVTN/LVTN/cuisine-net/src/reducers/notification.reducer.js"],"names":["notificationConstants","userConstants","notification","state","isOpen","notifications","allNotificationsCount","action","type","FETCH_NOTIFICATIONS_SUCCESS","console","log","inialFetch","total","count","CLOSE_NOTIFICATION_POPUP","TOGGLE_NOTIFICATION_POPUP","ADD_NOTIFICATION","data","READ_NOTIFICATIOS","map","e","read","GETUSER_SUCCESS","user","allNotifications"],"mappings":"AAAA,SAASA,qBAAT,QAAsC,qCAAtC;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,OAAO,SAASC,YAAT,CACHC,KAAK,GAAG;AACJC,EAAAA,MAAM,EAAE,KADJ;AAEJC,EAAAA,aAAa,EAAE,EAFX;AAGJC,EAAAA,qBAAqB,EAAE;AAHnB,CADL,EAMHC,MANG,EAOL;AACE,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKR,qBAAqB,CAACS,2BAA3B;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;;AACA,UAAIJ,MAAM,CAACK,UAAX,EAAuB;AACnB,eAAO,EACH,GAAGT,KADA;AAEHE,UAAAA,aAAa,EAAEE,MAAM,CAACF,aAFnB;AAGHC,UAAAA,qBAAqB,EAAEC,MAAM,CAACM,KAAP,CAAaC;AAHjC,SAAP;AAKH;;AACD,aAAO,EACH,GAAGX,KADA;AAEHE,QAAAA,aAAa,EAAE,CAAC,GAAGF,KAAK,CAACE,aAAV,EAAyB,GAAGE,MAAM,CAACF,aAAnC;AAFZ,OAAP;AAIA;;AACJ,SAAKL,qBAAqB,CAACe,wBAA3B;AACI,aAAO,EACH,GAAGZ,KADA;AAEHC,QAAAA,MAAM,EAAE;AAFL,OAAP;;AAIJ,SAAKJ,qBAAqB,CAACgB,yBAA3B;AACI,aAAO,EACH,GAAGb,KADA;AAEHC,QAAAA,MAAM,EAAE,CAACD,KAAK,CAACC;AAFZ,OAAP;;AAIJ,SAAKJ,qBAAqB,CAACiB,gBAA3B;AACI,aAAO,EACH,GAAGd,KADA;AAEHE,QAAAA,aAAa,EAAE,CAACE,MAAM,CAACW,IAAP,CAAYhB,YAAb,EAA2B,GAAGC,KAAK,CAACE,aAApC,CAFZ;AAGHC,QAAAA,qBAAqB,EAAEH,KAAK,CAACG,qBAAN,GAA8B;AAHlD,OAAP;;AAKJ,SAAKN,qBAAqB,CAACmB,iBAA3B;AACI,aAAO,EACH,GAAGhB,KADA;AAEHE,QAAAA,aAAa,EAAEF,KAAK,CAACE,aAAN,CAAoBe,GAApB,CAAwBC,CAAC,IAAI;AACxC,iBAAO,EACH,GAAGA,CADA;AAEHC,YAAAA,IAAI,EAAE;AAFH,WAAP;AAIH,SALc;AAFZ,OAAP;;AASJ,SAAKrB,aAAa,CAACsB,eAAnB;AACI,aAAO,EACH,GAAGpB,KADA;AAEHG,QAAAA,qBAAqB,EAAEC,MAAM,CAACiB,IAAP,CAAYC;AAFhC,OAAP;;AAIJ;AACI,aAAOtB,KAAP;AA/CR;AAiDH","sourcesContent":["import { notificationConstants } from \"../constants/notification.constants\";\r\nimport { userConstants } from \"../constants/user.constants\";\r\nexport function notification(\r\n    state = {\r\n        isOpen: false,\r\n        notifications: [],\r\n        allNotificationsCount: 0\r\n    },\r\n    action\r\n) {\r\n    switch (action.type) {\r\n        case notificationConstants.FETCH_NOTIFICATIONS_SUCCESS:\r\n            console.log(\"fetch ok\")\r\n            if (action.inialFetch) {\r\n                return {\r\n                    ...state,\r\n                    notifications: action.notifications,\r\n                    allNotificationsCount: action.total.count\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                notifications: [...state.notifications, ...action.notifications]\r\n            }\r\n            break;\r\n        case notificationConstants.CLOSE_NOTIFICATION_POPUP:\r\n            return {\r\n                ...state,\r\n                isOpen: false\r\n            }\r\n        case notificationConstants.TOGGLE_NOTIFICATION_POPUP:\r\n            return {\r\n                ...state,\r\n                isOpen: !state.isOpen\r\n            }\r\n        case notificationConstants.ADD_NOTIFICATION:\r\n            return {\r\n                ...state,\r\n                notifications: [action.data.notification, ...state.notifications],\r\n                allNotificationsCount: state.allNotificationsCount + 1\r\n            }\r\n        case notificationConstants.READ_NOTIFICATIOS:\r\n            return {\r\n                ...state,\r\n                notifications: state.notifications.map(e => {\r\n                    return {\r\n                        ...e,\r\n                        read: true\r\n                    };\r\n                })\r\n            };\r\n        case userConstants.GETUSER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                allNotificationsCount: action.user.allNotifications\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}