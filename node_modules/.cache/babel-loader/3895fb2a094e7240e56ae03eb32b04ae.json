{"ast":null,"code":"\"use strict\";\n\nlet csvToJson = require(\"./src/csvToJson.js\");\n\nconst encodingOps = {\n  utf8: 'utf8',\n  ucs2: 'ucs2',\n  utf16le: 'utf16le',\n  latin1: 'latin1',\n  ascii: 'ascii',\n  base64: 'base64',\n  hex: 'hex'\n};\n/**\n * Prints a digit as Number type (for example 32 instead of '32')\n */\n\nexports.formatValueByType = function (active = true) {\n  csvToJson.formatValueByType(active);\n  return this;\n};\n/**\n * Defines the field delimiter which will be used to split the fields\n */\n\n\nexports.fieldDelimiter = function (delimiter) {\n  csvToJson.fieldDelimiter(delimiter);\n  return this;\n};\n/**\n * Defines how to match and parse a sub array\n */\n\n\nexports.parseSubArray = function (delimiter, separator) {\n  csvToJson.parseSubArray(delimiter, separator);\n  return this;\n};\n/**\n * Defines a custom encoding to decode a file\n */\n\n\nexports.customEncoding = function (encoding) {\n  csvToJson.encoding = encoding;\n  return this;\n};\n/**\n * Defines a custom encoding to decode a file\n */\n\n\nexports.utf8Encoding = function utf8Encoding() {\n  csvToJson.encoding = encodingOps.utf8;\n  return this;\n};\n/**\n * Defines ucs2 encoding to decode a file\n */\n\n\nexports.ucs2Encoding = function () {\n  csvToJson.encoding = encodingOps.ucs2;\n  return this;\n};\n/**\n * Defines utf16le encoding to decode a file\n */\n\n\nexports.utf16leEncoding = function () {\n  csvToJson.encoding = encodingOps.utf16le;\n  return this;\n};\n/**\n * Defines latin1 encoding to decode a file\n */\n\n\nexports.latin1Encoding = function () {\n  csvToJson.encoding = encodingOps.latin1;\n  return this;\n};\n/**\n * Defines ascii encoding to decode a file\n */\n\n\nexports.asciiEncoding = function () {\n  csvToJson.encoding = encodingOps.ascii;\n  return this;\n};\n/**\n * Defines base64 encoding to decode a file\n */\n\n\nexports.base64Encoding = function () {\n  this.csvToJson = encodingOps.base64;\n  return this;\n};\n/**\n * Defines hex encoding to decode a file\n */\n\n\nexports.hexEncoding = function () {\n  this.csvToJson = encodingOps.hex;\n  return this;\n};\n/**\n * Parses .csv file and put its content into a file in json format.\n * @param {inputFileName} path/filename\n * @param {outputFileName} path/filename\n *\n */\n\n\nexports.generateJsonFileFromCsv = function (inputFileName, outputFileName) {\n  if (!inputFileName) {\n    throw new Error(\"inputFileName is not defined!!!\");\n  }\n\n  if (!outputFileName) {\n    throw new Error(\"outputFileName is not defined!!!\");\n  }\n\n  csvToJson.generateJsonFileFromCsv(inputFileName, outputFileName);\n};\n/**\n * Parses .csv file and put its content into an Array of Object in json format.\n * @param {inputFileName} path/filename\n * @return {Array} Array of Object in json format\n *\n */\n\n\nexports.getJsonFromCsv = function (inputFileName) {\n  if (!inputFileName) {\n    throw new Error(\"inputFileName is not defined!!!\");\n  }\n\n  return csvToJson.getJsonFromCsv(inputFileName);\n};\n\nexports.csvStringToJson = function (csvString) {\n  return csvToJson.csvStringToJson(csvString);\n};\n/**\n * Parses .csv file and put its content into a file in json format.\n * @param {inputFileName} path/filename\n * @param {outputFileName} path/filename\n *\n * @deprecated Use generateJsonFileFromCsv()\n */\n\n\nexports.jsonToCsv = function (inputFileName, outputFileName) {\n  csvToJson.generateJsonFileFromCsv(inputFileName, outputFileName);\n};","map":{"version":3,"sources":["D:/LVTN/deploy_frontend/DEPLOYFRONTEND/node_modules/convert-csv-to-json/index.js"],"names":["csvToJson","require","encodingOps","utf8","ucs2","utf16le","latin1","ascii","base64","hex","exports","formatValueByType","active","fieldDelimiter","delimiter","parseSubArray","separator","customEncoding","encoding","utf8Encoding","ucs2Encoding","utf16leEncoding","latin1Encoding","asciiEncoding","base64Encoding","hexEncoding","generateJsonFileFromCsv","inputFileName","outputFileName","Error","getJsonFromCsv","csvStringToJson","csvString","jsonToCsv"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,oBAAD,CAAvB;;AAEA,MAAMC,WAAW,GAAG;AAChBC,EAAAA,IAAI,EAAE,MADU;AAEhBC,EAAAA,IAAI,EAAE,MAFU;AAGhBC,EAAAA,OAAO,EAAE,SAHO;AAIhBC,EAAAA,MAAM,EAAE,QAJQ;AAKhBC,EAAAA,KAAK,EAAE,OALS;AAMhBC,EAAAA,MAAM,EAAE,QANQ;AAOhBC,EAAAA,GAAG,EAAE;AAPW,CAApB;AAUA;AACA;AACA;;AACAC,OAAO,CAACC,iBAAR,GAA4B,UAAUC,MAAM,GAAG,IAAnB,EAAyB;AACnDZ,EAAAA,SAAS,CAACW,iBAAV,CAA4BC,MAA5B;AACA,SAAO,IAAP;AACD,CAHD;AAKA;AACA;AACA;;;AACAF,OAAO,CAACG,cAAR,GAAyB,UAAUC,SAAV,EAAqB;AAC5Cd,EAAAA,SAAS,CAACa,cAAV,CAAyBC,SAAzB;AACA,SAAO,IAAP;AACD,CAHD;AAKA;AACA;AACA;;;AACAJ,OAAO,CAACK,aAAR,GAAwB,UAAUD,SAAV,EAAqBE,SAArB,EAAgC;AACtDhB,EAAAA,SAAS,CAACe,aAAV,CAAwBD,SAAxB,EAAmCE,SAAnC;AACA,SAAO,IAAP;AACD,CAHD;AAKA;AACA;AACA;;;AACAN,OAAO,CAACO,cAAR,GAAyB,UAAUC,QAAV,EAAoB;AAC3ClB,EAAAA,SAAS,CAACkB,QAAV,GAAqBA,QAArB;AACA,SAAO,IAAP;AACD,CAHD;AAKA;AACA;AACA;;;AACAR,OAAO,CAACS,YAAR,GAAuB,SAASA,YAAT,GAAwB;AAC7CnB,EAAAA,SAAS,CAACkB,QAAV,GAAqBhB,WAAW,CAACC,IAAjC;AACA,SAAO,IAAP;AACD,CAHD;AAKA;AACA;AACA;;;AACAO,OAAO,CAACU,YAAR,GAAuB,YAAY;AACjCpB,EAAAA,SAAS,CAACkB,QAAV,GAAqBhB,WAAW,CAACE,IAAjC;AACA,SAAO,IAAP;AACD,CAHD;AAKA;AACA;AACA;;;AACAM,OAAO,CAACW,eAAR,GAA0B,YAAY;AACpCrB,EAAAA,SAAS,CAACkB,QAAV,GAAqBhB,WAAW,CAACG,OAAjC;AACA,SAAO,IAAP;AACD,CAHD;AAKA;AACA;AACA;;;AACAK,OAAO,CAACY,cAAR,GAAyB,YAAY;AACnCtB,EAAAA,SAAS,CAACkB,QAAV,GAAqBhB,WAAW,CAACI,MAAjC;AACA,SAAO,IAAP;AACD,CAHD;AAKA;AACA;AACA;;;AACAI,OAAO,CAACa,aAAR,GAAwB,YAAY;AAClCvB,EAAAA,SAAS,CAACkB,QAAV,GAAqBhB,WAAW,CAACK,KAAjC;AACA,SAAO,IAAP;AACD,CAHD;AAKA;AACA;AACA;;;AACAG,OAAO,CAACc,cAAR,GAAyB,YAAY;AACnC,OAAKxB,SAAL,GAAiBE,WAAW,CAACM,MAA7B;AACA,SAAO,IAAP;AACD,CAHD;AAKA;AACA;AACA;;;AACAE,OAAO,CAACe,WAAR,GAAsB,YAAY;AAChC,OAAKzB,SAAL,GAAiBE,WAAW,CAACO,GAA7B;AACA,SAAO,IAAP;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;;;AACAC,OAAO,CAACgB,uBAAR,GAAkC,UAASC,aAAT,EAAwBC,cAAxB,EAAwC;AACxE,MAAI,CAACD,aAAL,EAAoB;AAClB,UAAM,IAAIE,KAAJ,CAAU,iCAAV,CAAN;AACD;;AACD,MAAI,CAACD,cAAL,EAAqB;AACnB,UAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;AACD;;AACD7B,EAAAA,SAAS,CAAC0B,uBAAV,CAAkCC,aAAlC,EAAiDC,cAAjD;AACD,CARD;AAUA;AACA;AACA;AACA;AACA;AACA;;;AACAlB,OAAO,CAACoB,cAAR,GAAyB,UAASH,aAAT,EAAwB;AAC/C,MAAI,CAACA,aAAL,EAAoB;AAClB,UAAM,IAAIE,KAAJ,CAAU,iCAAV,CAAN;AACD;;AACD,SAAO7B,SAAS,CAAC8B,cAAV,CAAyBH,aAAzB,CAAP;AACD,CALD;;AAOAjB,OAAO,CAACqB,eAAR,GAA0B,UAASC,SAAT,EAAoB;AAC5C,SAAOhC,SAAS,CAAC+B,eAAV,CAA0BC,SAA1B,CAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAtB,OAAO,CAACuB,SAAR,GAAoB,UAASN,aAAT,EAAwBC,cAAxB,EAAwC;AAC1D5B,EAAAA,SAAS,CAAC0B,uBAAV,CAAkCC,aAAlC,EAAiDC,cAAjD;AACD,CAFD","sourcesContent":["\"use strict\";\n\nlet csvToJson = require(\"./src/csvToJson.js\");\n\nconst encodingOps = {\n    utf8: 'utf8',\n    ucs2: 'ucs2',\n    utf16le: 'utf16le',\n    latin1: 'latin1',\n    ascii: 'ascii',\n    base64: 'base64',\n    hex: 'hex'\n};\n\n/**\n * Prints a digit as Number type (for example 32 instead of '32')\n */\nexports.formatValueByType = function (active = true) {\n  csvToJson.formatValueByType(active);\n  return this;\n};\n\n/**\n * Defines the field delimiter which will be used to split the fields\n */\nexports.fieldDelimiter = function (delimiter) {\n  csvToJson.fieldDelimiter(delimiter);\n  return this;\n};\n\n/**\n * Defines how to match and parse a sub array\n */\nexports.parseSubArray = function (delimiter, separator) {\n  csvToJson.parseSubArray(delimiter, separator);\n  return this;\n};\n\n/**\n * Defines a custom encoding to decode a file\n */\nexports.customEncoding = function (encoding) {\n  csvToJson.encoding = encoding;\n  return this;\n};\n\n/**\n * Defines a custom encoding to decode a file\n */\nexports.utf8Encoding = function utf8Encoding() {\n  csvToJson.encoding = encodingOps.utf8;\n  return this;\n};\n\n/**\n * Defines ucs2 encoding to decode a file\n */\nexports.ucs2Encoding = function () {\n  csvToJson.encoding = encodingOps.ucs2;\n  return this;\n};\n\n/**\n * Defines utf16le encoding to decode a file\n */\nexports.utf16leEncoding = function () {\n  csvToJson.encoding = encodingOps.utf16le;\n  return this;\n};\n\n/**\n * Defines latin1 encoding to decode a file\n */\nexports.latin1Encoding = function () {\n  csvToJson.encoding = encodingOps.latin1;\n  return this;\n};\n\n/**\n * Defines ascii encoding to decode a file\n */\nexports.asciiEncoding = function () {\n  csvToJson.encoding = encodingOps.ascii;\n  return this;\n};\n\n/**\n * Defines base64 encoding to decode a file\n */\nexports.base64Encoding = function () {\n  this.csvToJson = encodingOps.base64;\n  return this;\n};\n\n/**\n * Defines hex encoding to decode a file\n */\nexports.hexEncoding = function () {\n  this.csvToJson = encodingOps.hex;\n  return this;\n};\n\n/**\n * Parses .csv file and put its content into a file in json format.\n * @param {inputFileName} path/filename\n * @param {outputFileName} path/filename\n *\n */\nexports.generateJsonFileFromCsv = function(inputFileName, outputFileName) {\n  if (!inputFileName) {\n    throw new Error(\"inputFileName is not defined!!!\");\n  }\n  if (!outputFileName) {\n    throw new Error(\"outputFileName is not defined!!!\");\n  }\n  csvToJson.generateJsonFileFromCsv(inputFileName, outputFileName);\n};\n\n/**\n * Parses .csv file and put its content into an Array of Object in json format.\n * @param {inputFileName} path/filename\n * @return {Array} Array of Object in json format\n *\n */\nexports.getJsonFromCsv = function(inputFileName) {\n  if (!inputFileName) {\n    throw new Error(\"inputFileName is not defined!!!\");\n  }\n  return csvToJson.getJsonFromCsv(inputFileName);\n};\n\nexports.csvStringToJson = function(csvString) {\n  return csvToJson.csvStringToJson(csvString);\n};\n\n/**\n * Parses .csv file and put its content into a file in json format.\n * @param {inputFileName} path/filename\n * @param {outputFileName} path/filename\n *\n * @deprecated Use generateJsonFileFromCsv()\n */\nexports.jsonToCsv = function(inputFileName, outputFileName) {\n  csvToJson.generateJsonFileFromCsv(inputFileName, outputFileName);\n};\n"]},"metadata":{},"sourceType":"script"}