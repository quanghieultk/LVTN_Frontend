{"ast":null,"code":"import { notificationConstants } from \"../constants/notification.constants\";\nimport { notificatonService } from \"../services/notification.service\";\nexport const notificationActions = {\n  toggleNotificationPopup,\n  closeNotificationPopup,\n  addNotification,\n  fetchNotifications,\n  removeNotification\n};\n\nfunction readNotifications(notificationIds) {\n  notificatonService.readNotifications(notificationIds).then(res => {\n    console.log(res);\n  }).catch(error => {\n    console.log(error);\n  });\n}\n\nfunction fetchNotifications(queryOptions, notificationIds) {\n  return dispatch => {\n    notificatonService.fetchNotifications(queryOptions).then(response => {\n      console.log(response);\n\n      if (queryOptions.initialFetch) {\n        const notifications = response.data.data.data;\n        const total = notifications.length;\n        dispatch(success(notifications, total, queryOptions.initialFetch));\n        const ids = notifications.filter(e => !e.read).map(e => e._id).concat(notificationIds);\n        const uniqueIds = ids.filter((item, index) => ids.indexOf(item) === index).filter(item => item !== undefined);\n        console.log(uniqueIds);\n        readNotifications(uniqueIds); // if (uniqueIds[0] !== undefined) {\n        //     dispatch({\n        //         type: notificationConstants.READ_NOTIFICATIOS,\n        //         readCount: uniqueIds.length\n        //     });\n        // }\n      } else {\n        const notifications = response.data.data.data;\n        const total = notifications.length;\n        dispatch(success(notifications));\n        const ids = notifications.filter(e => !e.read).map(e => e._id).concat(notificationIds);\n        const uniqueIds = ids.filter((item, index) => ids.indexOf(item) === index).filter(item => item !== undefined);\n        console.log(uniqueIds);\n        readNotifications(uniqueIds); // if (uniqueIds[0] !== undefined) {\n        //     dispatch({\n        //         type: notificationConstants.READ_NOTIFICATIOS,\n        //         readCount: uniqueIds.length\n        //     });\n        // }\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  function success(notifications, total, initialFetch) {\n    return {\n      type: notificationConstants.FETCH_NOTIFICATIONS_SUCCESS,\n      notifications,\n      total,\n      initialFetch\n    };\n  }\n}\n\nfunction toggleNotificationPopup() {\n  return dispatch => {\n    dispatch({\n      type: notificationConstants.TOGGLE_NOTIFICATION_POPUP\n    });\n  };\n}\n\nfunction closeNotificationPopup() {\n  return dispatch => {\n    dispatch({\n      type: notificationConstants.CLOSE_NOTIFICATION_POPUP\n    });\n  };\n}\n\nfunction addNotification(data) {\n  return dispatch => {\n    dispatch({\n      type: notificationConstants.ADD_NOTIFICATION,\n      data\n    });\n  };\n}\n\nfunction removeNotification(data) {\n  return dispatch => {\n    dispatch({\n      type: notificationConstants.REMOVE_NOTIFICATION,\n      data\n    });\n  };\n}","map":{"version":3,"sources":["D:/LVTN/LVTN/cuisine-net/src/actions/notification.action.js"],"names":["notificationConstants","notificatonService","notificationActions","toggleNotificationPopup","closeNotificationPopup","addNotification","fetchNotifications","removeNotification","readNotifications","notificationIds","then","res","console","log","catch","error","queryOptions","dispatch","response","initialFetch","notifications","data","total","length","success","ids","filter","e","read","map","_id","concat","uniqueIds","item","index","indexOf","undefined","err","type","FETCH_NOTIFICATIONS_SUCCESS","TOGGLE_NOTIFICATION_POPUP","CLOSE_NOTIFICATION_POPUP","ADD_NOTIFICATION","REMOVE_NOTIFICATION"],"mappings":"AAAA,SAASA,qBAAT,QAAsC,qCAAtC;AACA,SAASC,kBAAT,QAAmC,kCAAnC;AAEA,OAAO,MAAMC,mBAAmB,GAAG;AAC/BC,EAAAA,uBAD+B;AAE/BC,EAAAA,sBAF+B;AAG/BC,EAAAA,eAH+B;AAI/BC,EAAAA,kBAJ+B;AAK/BC,EAAAA;AAL+B,CAA5B;;AAQP,SAASC,iBAAT,CAA2BC,eAA3B,EAA4C;AACxCR,EAAAA,kBAAkB,CAACO,iBAAnB,CAAqCC,eAArC,EAAsDC,IAAtD,CACKC,GAAD,IAAS;AAAEC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAAkB,GADjC,EAEEG,KAFF,CAEQC,KAAK,IAAI;AACbH,IAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACH,GAJD;AAKH;;AAED,SAAST,kBAAT,CAA4BU,YAA5B,EAA0CP,eAA1C,EAA2D;AACvD,SAAOQ,QAAQ,IAAI;AACfhB,IAAAA,kBAAkB,CAACK,kBAAnB,CAAsCU,YAAtC,EAAoDN,IAApD,CACIQ,QAAQ,IAAI;AACRN,MAAAA,OAAO,CAACC,GAAR,CAAYK,QAAZ;;AACA,UAAIF,YAAY,CAACG,YAAjB,EAA+B;AAC3B,cAAMC,aAAa,GAAGF,QAAQ,CAACG,IAAT,CAAcA,IAAd,CAAmBA,IAAzC;AACA,cAAMC,KAAK,GAAGF,aAAa,CAACG,MAA5B;AACAN,QAAAA,QAAQ,CAACO,OAAO,CAACJ,aAAD,EAAgBE,KAAhB,EAAuBN,YAAY,CAACG,YAApC,CAAR,CAAR;AACA,cAAMM,GAAG,GAAGL,aAAa,CACpBM,MADO,CACAC,CAAC,IAAI,CAACA,CAAC,CAACC,IADR,EAEPC,GAFO,CAEHF,CAAC,IAAIA,CAAC,CAACG,GAFJ,EAGPC,MAHO,CAGAtB,eAHA,CAAZ;AAIA,cAAMuB,SAAS,GAAGP,GAAG,CAChBC,MADa,CACN,CAACO,IAAD,EAAOC,KAAP,KAAiBT,GAAG,CAACU,OAAJ,CAAYF,IAAZ,MAAsBC,KADjC,EAEbR,MAFa,CAENO,IAAI,IAAIA,IAAI,KAAKG,SAFX,CAAlB;AAGAxB,QAAAA,OAAO,CAACC,GAAR,CAAYmB,SAAZ;AACAxB,QAAAA,iBAAiB,CAACwB,SAAD,CAAjB,CAZ2B,CAc3B;AACA;AACA;AACA;AACA;AACA;AACH,OApBD,MAoBO;AACH,cAAMZ,aAAa,GAAGF,QAAQ,CAACG,IAAT,CAAcA,IAAd,CAAmBA,IAAzC;AACA,cAAMC,KAAK,GAAGF,aAAa,CAACG,MAA5B;AACAN,QAAAA,QAAQ,CAACO,OAAO,CAACJ,aAAD,CAAR,CAAR;AACA,cAAMK,GAAG,GAAGL,aAAa,CACpBM,MADO,CACAC,CAAC,IAAI,CAACA,CAAC,CAACC,IADR,EAEPC,GAFO,CAEHF,CAAC,IAAIA,CAAC,CAACG,GAFJ,EAGPC,MAHO,CAGAtB,eAHA,CAAZ;AAIA,cAAMuB,SAAS,GAAGP,GAAG,CAChBC,MADa,CACN,CAACO,IAAD,EAAOC,KAAP,KAAiBT,GAAG,CAACU,OAAJ,CAAYF,IAAZ,MAAsBC,KADjC,EAEbR,MAFa,CAENO,IAAI,IAAIA,IAAI,KAAKG,SAFX,CAAlB;AAGAxB,QAAAA,OAAO,CAACC,GAAR,CAAYmB,SAAZ;AACAxB,QAAAA,iBAAiB,CAACwB,SAAD,CAAjB,CAZG,CAcH;AACA;AACA;AACA;AACA;AACA;AACH;AACJ,KA5CL,EA6CElB,KA7CF,CA6CSuB,GAAD,IAAS;AACbzB,MAAAA,OAAO,CAACC,GAAR,CAAYwB,GAAZ;AACH,KA/CD;AAgDH,GAjDD;;AAkDA,WAASb,OAAT,CAAiBJ,aAAjB,EAAgCE,KAAhC,EAAuCH,YAAvC,EAAqD;AACjD,WAAO;AACHmB,MAAAA,IAAI,EAAEtC,qBAAqB,CAACuC,2BADzB;AAEHnB,MAAAA,aAFG;AAGHE,MAAAA,KAHG;AAIHH,MAAAA;AAJG,KAAP;AAMH;AACJ;;AAED,SAAShB,uBAAT,GAAmC;AAC/B,SAAOc,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAAC;AACLqB,MAAAA,IAAI,EAAEtC,qBAAqB,CAACwC;AADvB,KAAD,CAAR;AAGH,GAJD;AAKH;;AAED,SAASpC,sBAAT,GAAkC;AAC9B,SAAOa,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAAC;AAAEqB,MAAAA,IAAI,EAAEtC,qBAAqB,CAACyC;AAA9B,KAAD,CAAR;AACH,GAFD;AAGH;;AAED,SAASpC,eAAT,CAAyBgB,IAAzB,EAA+B;AAC3B,SAAOJ,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAAC;AAAEqB,MAAAA,IAAI,EAAEtC,qBAAqB,CAAC0C,gBAA9B;AAAgDrB,MAAAA;AAAhD,KAAD,CAAR;AACH,GAFD;AAGH;;AAED,SAASd,kBAAT,CAA4Bc,IAA5B,EAAiC;AAC7B,SAAOJ,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAAC;AAACqB,MAAAA,IAAI,EAAEtC,qBAAqB,CAAC2C,mBAA7B;AAAkDtB,MAAAA;AAAlD,KAAD,CAAR;AACH,GAFD;AAGH","sourcesContent":["import { notificationConstants } from \"../constants/notification.constants\";\r\nimport { notificatonService } from \"../services/notification.service\";\r\n\r\nexport const notificationActions = {\r\n    toggleNotificationPopup,\r\n    closeNotificationPopup,\r\n    addNotification,\r\n    fetchNotifications,\r\n    removeNotification\r\n}\r\n\r\nfunction readNotifications(notificationIds) {\r\n    notificatonService.readNotifications(notificationIds).then(\r\n        (res) => { console.log(res) }\r\n    ).catch(error => {\r\n        console.log(error);\r\n    });\r\n}\r\n\r\nfunction fetchNotifications(queryOptions, notificationIds) {\r\n    return dispatch => {\r\n        notificatonService.fetchNotifications(queryOptions).then(\r\n            response => {\r\n                console.log(response);\r\n                if (queryOptions.initialFetch) {\r\n                    const notifications = response.data.data.data;\r\n                    const total = notifications.length;\r\n                    dispatch(success(notifications, total, queryOptions.initialFetch));\r\n                    const ids = notifications\r\n                        .filter(e => !e.read)\r\n                        .map(e => e._id)\r\n                        .concat(notificationIds);\r\n                    const uniqueIds = ids\r\n                        .filter((item, index) => ids.indexOf(item) === index)\r\n                        .filter(item => item !== undefined);\r\n                    console.log(uniqueIds)\r\n                    readNotifications(uniqueIds);\r\n\r\n                    // if (uniqueIds[0] !== undefined) {\r\n                    //     dispatch({\r\n                    //         type: notificationConstants.READ_NOTIFICATIOS,\r\n                    //         readCount: uniqueIds.length\r\n                    //     });\r\n                    // }\r\n                } else {\r\n                    const notifications = response.data.data.data;\r\n                    const total = notifications.length;\r\n                    dispatch(success(notifications));\r\n                    const ids = notifications\r\n                        .filter(e => !e.read)\r\n                        .map(e => e._id)\r\n                        .concat(notificationIds);\r\n                    const uniqueIds = ids\r\n                        .filter((item, index) => ids.indexOf(item) === index)\r\n                        .filter(item => item !== undefined);\r\n                    console.log(uniqueIds)\r\n                    readNotifications(uniqueIds);\r\n\r\n                    // if (uniqueIds[0] !== undefined) {\r\n                    //     dispatch({\r\n                    //         type: notificationConstants.READ_NOTIFICATIOS,\r\n                    //         readCount: uniqueIds.length\r\n                    //     });\r\n                    // }\r\n                }\r\n            }\r\n        ).catch((err) => {\r\n            console.log(err)\r\n        })\r\n    }\r\n    function success(notifications, total, initialFetch) {\r\n        return {\r\n            type: notificationConstants.FETCH_NOTIFICATIONS_SUCCESS,\r\n            notifications,\r\n            total,\r\n            initialFetch\r\n        };\r\n    }\r\n}\r\n\r\nfunction toggleNotificationPopup() {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: notificationConstants.TOGGLE_NOTIFICATION_POPUP\r\n        });\r\n    };\r\n}\r\n\r\nfunction closeNotificationPopup() {\r\n    return dispatch => {\r\n        dispatch({ type: notificationConstants.CLOSE_NOTIFICATION_POPUP });\r\n    };\r\n}\r\n\r\nfunction addNotification(data) {\r\n    return dispatch => {\r\n        dispatch({ type: notificationConstants.ADD_NOTIFICATION, data });\r\n    };\r\n}\r\n\r\nfunction removeNotification(data){\r\n    return dispatch => {\r\n        dispatch({type: notificationConstants.REMOVE_NOTIFICATION, data})\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}