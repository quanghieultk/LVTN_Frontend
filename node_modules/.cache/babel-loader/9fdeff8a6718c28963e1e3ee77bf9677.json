{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = _regeneratorRuntime.mark(makePrimitiveIterator);\n\nimport { GL } from '../constants';\nimport { getPrimitiveModeType } from '../primitives/modes';\nimport { assert } from '@loaders.gl/loader-utils';\nexport function makePrimitiveIterator(_ref) {\n  var indices, attributes, mode, _ref$start, start, end, info, i;\n\n  return _regeneratorRuntime.wrap(function makePrimitiveIterator$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          indices = _ref.indices, attributes = _ref.attributes, mode = _ref.mode, _ref$start = _ref.start, start = _ref$start === void 0 ? 0 : _ref$start, end = _ref.end;\n\n          if (indices) {\n            indices = indices.values || indices.value || indices;\n          }\n\n          if (end === undefined) {\n            end = indices ? indices.length : start;\n          }\n\n          info = {\n            attributes: attributes,\n            type: getPrimitiveModeType(mode),\n            i1: 0,\n            i2: 0,\n            i3: 0\n          };\n          i = start;\n\n        case 5:\n          if (!(i < end)) {\n            _context.next = 44;\n            break;\n          }\n\n          _context.t0 = mode;\n          _context.next = _context.t0 === GL.POINTS ? 9 : _context.t0 === GL.LINES ? 12 : _context.t0 === GL.LINE_STRIP ? 16 : _context.t0 === GL.LINE_LOOP ? 20 : _context.t0 === GL.TRIANGLES ? 24 : _context.t0 === GL.TRIANGLE_STRIP ? 29 : _context.t0 === GL.TRIANGLE_FAN ? 33 : 38;\n          break;\n\n        case 9:\n          info.i1 = i;\n          i += 1;\n          return _context.abrupt(\"break\", 39);\n\n        case 12:\n          info.i1 = i;\n          info.i2 = i + 1;\n          i += 2;\n          return _context.abrupt(\"break\", 39);\n\n        case 16:\n          info.i1 = i;\n          info.i2 = i + 1;\n          i += 1;\n          return _context.abrupt(\"break\", 39);\n\n        case 20:\n          info.i1 = i;\n          info.i2 = i + 1;\n          i += 1;\n          return _context.abrupt(\"break\", 39);\n\n        case 24:\n          info.i1 = i;\n          info.i2 = i + 1;\n          info.i3 = i + 2;\n          i += 3;\n          return _context.abrupt(\"break\", 39);\n\n        case 29:\n          info.i1 = i;\n          info.i2 = i + 1;\n          i += 1;\n          return _context.abrupt(\"break\", 39);\n\n        case 33:\n          info.i1 = 1;\n          info.i2 = i;\n          info.i3 = i + 1;\n          i += 1;\n          return _context.abrupt(\"break\", 39);\n\n        case 38:\n          assert(false);\n\n        case 39:\n          if (indices) {\n            if ('i1' in info) {\n              info.i1 = indices[info.i1];\n              info.i2 = indices[info.i2];\n              info.i3 = indices[info.i3];\n            }\n          }\n\n          _context.next = 42;\n          return info;\n\n        case 42:\n          _context.next = 5;\n          break;\n\n        case 44:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"sources":["../../../../src/geometry/iterators/primitive-iterator.js"],"names":["makePrimitiveIterator","indices","attributes","mode","start","end","info","type","getPrimitiveModeType","i1","i2","i3","i","GL","assert"],"mappings":"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","sourcesContent":["/** @typedef {import('./primitive-iterator')} types */\nimport {GL} from '../constants';\nimport {getPrimitiveModeType} from '../primitives/modes';\nimport {assert} from '@loaders.gl/loader-utils';\n\n// Will iterate over each primitive, expanding (dereferencing) indices\n/** @type {types['makePrimitiveIterator']} */\n// eslint-disable-next-line complexity\nexport function* makePrimitiveIterator({indices, attributes, mode, start = 0, end}) {\n  // support indices being an object with a values array\n  if (indices) {\n    indices = indices.values || indices.value || indices;\n  }\n\n  // Autodeduce length from indices\n  if (end === undefined) {\n    end = indices ? indices.length : start;\n  }\n\n  // iteration info\n  const info = {\n    attributes,\n    type: getPrimitiveModeType(mode),\n    i1: 0,\n    i2: 0,\n    i3: 0\n  };\n\n  let i = start;\n  // @ts-ignore\n  while (i < end) {\n    switch (mode) {\n      case GL.POINTS: // draw single points.\n        info.i1 = i;\n        i += 1;\n        break;\n      case GL.LINES: // draw lines. Each set of two vertices is treated as a separate line segment.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 2;\n        break;\n      case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLES: // draw triangles. Each set of three vertices creates a separate triangle.\n        info.i1 = i;\n        info.i2 = i + 1;\n        info.i3 = i + 2;\n        i += 3;\n        break;\n      case GL.TRIANGLE_STRIP: // draw a connected group of triangles.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n        info.i1 = 1;\n        info.i2 = i;\n        info.i3 = i + 1;\n        i += 1;\n        break;\n\n      default:\n        assert(false);\n    }\n\n    // if indices are present, lookup actual vertices in indices\n    if (indices) {\n      if ('i1' in info) {\n        info.i1 = indices[info.i1];\n        info.i2 = indices[info.i2];\n        info.i3 = indices[info.i3];\n      }\n    }\n\n    yield info;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}