{"ast":null,"code":"var _jsxFileName = \"D:\\\\LVTN\\\\LVTN\\\\cuisine-net\\\\src\\\\services\\\\gmap.js\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport \"react-map-gl-geocoder/dist/mapbox-gl-geocoder.css\";\nimport React, { useState, useRef, useCallback, useEffect, Component } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport MapGL, { Marker, NavigationControl, FullscreenControl } from \"react-map-gl\";\nimport Geocoder from \"react-map-gl-geocoder\";\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport { locationActions } from './../actions/location.actions'; // Please be a decent human and don't abuse my Mapbox API token.\n// If you fork this sandbox, replace my API token with your own.\n// Ways to set Mapbox token: https://uber.github.io/react-map-gl/#/Documentation/getting-started/about-mapbox-tokens\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoidG9hbmRvIiwiYSI6ImNrbThscTh4cjBrNnQycHF5MWJqd29jaDQifQ.LNubsbmqGfZhCCRymL-A2g'; // export default function GMap() {\n// \tconst locate=useSelector(state=>state.location);\n// \tconst dispatch=useDispatch();\n// \tconst [viewport, setViewport] = useState({\n// \t\twidth: \"100%\",\n// \t\theight: \"100%\",\n// \t\tlatitude: 0,\n// \t\tlongitude: 0,\n// \t\tzoom: 15\n// \t});\n// \tconst [position, setPosition] = useState({\n// \t\tlatitude: 0,\n// \t\tlongitude: 0\n// \t})\n// \tconst navStyle = {\n// \t\tposition: \"absolute\",\n// \t\ttop: 36,\n// \t\tleft: 0,\n// \t\tpadding: \"10px\"\n// \t};\n// \tconst fullscreenControlStyle = {\n// \t\tposition: \"absolute\",\n// \t\ttop: 0,\n// \t\tleft: 0,\n// \t\tpadding: \"10px\"\n// \t};\n// \tconst mapRef = useRef();\n// \tconst geocoderContainerRef = useRef();\n// \tconst handleViewportChange = useCallback(\n// \t\t(newViewport) => setViewport(newViewport),\n// \t\t[]\n// \t);\n// \tconst handleGeocoderViewportChange = useCallback(\n// \t\t(newViewport) => {\n// \t\t\tconst geocoderDefaultOverrides = { transitionDuration: 1000 };\n// \t\t\treturn handleViewportChange({\n// \t\t\t\t...newViewport,\n// \t\t\t\t...geocoderDefaultOverrides\n// \t\t\t});\n// \t\t},\n// \t\t[handleViewportChange]\n// \t);\n// \tfunction makerOnClick(e) {\n// \t\tsetPosition({\n// \t\t\tlatitude: e.lngLat[1],\n// \t\t\tlongitude: e.lngLat[0]\n// \t\t})\n// \t}\n// \tuseEffect(() => {\n//         navigator.geolocation.getCurrentPosition(\n// \t\t\tfunction (position) {\n// \t\t\t\tconsole.log(position);\n// \t\t\t\tsetViewport({\n// \t\t\t\t\tlatitude: position.coords.latitude,\n// \t\t\t\t\tlongitude: position.coords.longitude,\n// \t\t\t\t\tzoom: 15\n// \t\t\t\t})\n// \t\t\t\tsetPosition({\n// \t\t\t\t\tlatitude: position.coords.latitude,\n// \t\t\t\t\tlongitude: position.coords.longitude,\n// \t\t\t\t})\n// \t\t\t},\n// \t\t\tfunction (error) {\n// \t\t\t\tconsole.error(\"Error Code = \" + error.code + \" - \" + error.message);\n// \t\t\t}\n// \t\t);\n//     }, []);\n// \treturn (\n// \t\t<div style={{ height: \"100%\" }}>\n// \t\t\t<MapGL\n// \t\t\t\tref={mapRef}\n// \t\t\t\t{...viewport}\n// \t\t\t\twidth=\"100%\"\n// \t\t\t\theight=\"100%\"\n// \t\t\t\tonViewportChange={handleViewportChange}\n// \t\t\t\tmapboxApiAccessToken={MAPBOX_TOKEN}\n// \t\t\t>\n// \t\t\t\t<div className=\"nav\" style={navStyle}>\n// \t\t\t\t\t<NavigationControl />\n// \t\t\t\t</div>\n// \t\t\t\t<div className=\"fullscreen\" style={fullscreenControlStyle}>\n// \t\t\t\t\t<FullscreenControl />\n// \t\t\t\t</div>\n// \t\t\t\t<Geocoder\n// \t\t\t\t\tmapRef={mapRef}\n// \t\t\t\t\tonViewportChange={handleGeocoderViewportChange}\n// \t\t\t\t\tcontainerRef={geocoderContainerRef}\n// \t\t\t\t\tmapboxApiAccessToken={MAPBOX_TOKEN}\n// \t\t\t\t\tposition=\"top-right\"\n// \t\t\t\t\t// onResult={(result)=>dispatch(locationActions.setLocation(result.result.center,result.result.place_name))}\n// \t\t\t\t/>\n// \t\t\t\t<Marker\n// \t\t\t\t\tkey=\"marker_1\"\n// \t\t\t\t\tlongitude={position.longitude}\n// \t\t\t\t\tlatitude={position.latitude}\n// \t\t\t\t>\n// \t\t\t\t\t<LocationOnIcon></LocationOnIcon>\n// \t\t\t\t</Marker>\n// \t\t\t</MapGL>\n// \t\t</div>\n// \t);\n// };\n\nexport default class Gmap extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      viewport: {\n        width: 400,\n        height: 400,\n        latitude: 37.7577,\n        longitude: -122.4376,\n        zoom: 8\n      },\n      searchResultLayer: null\n    };\n    this.mapRef = /*#__PURE__*/React.createRef();\n\n    this.resize = () => {\n      this.handleViewportChange({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    };\n\n    this.handleViewportChange = viewport => {\n      this.setState({\n        viewport: { ...this.state.viewport,\n          ...viewport\n        }\n      });\n    };\n\n    this.handleGeocoderViewportChange = viewport => {\n      const geocoderDefaultOverrides = {\n        transitionDuration: 1000\n      };\n      return this.handleViewportChange({ ...viewport,\n        ...geocoderDefaultOverrides\n      });\n    };\n\n    this.handleOnResult = event => {\n      this.setState({\n        searchResultLayer: new GeoJsonLayer({\n          id: \"search-result\",\n          data: event.result.geometry,\n          getFillColor: [255, 0, 0, 128],\n          getRadius: 1000,\n          pointRadiusMinPixels: 10\n        })\n      });\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.resize);\n    this.resize();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.resize);\n  }\n\n  render() {\n    const {\n      viewport,\n      searchResultLayer\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(MapGL, {\n      ref: this.mapRef,\n      ...viewport,\n      onViewportChange: this.handleViewportChange,\n      mapboxApiAccessToken: MAPBOX_TOKEN,\n      children: /*#__PURE__*/_jsxDEV(Geocoder, {\n        mapRef: this.mapRef,\n        onResult: this.handleOnResult,\n        onViewportChange: this.handleGeocoderViewportChange,\n        mapboxApiAccessToken: MAPBOX_TOKEN\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 3\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["D:/LVTN/LVTN/cuisine-net/src/services/gmap.js"],"names":["React","useState","useRef","useCallback","useEffect","Component","useDispatch","useSelector","MapGL","Marker","NavigationControl","FullscreenControl","Geocoder","LocationOnIcon","locationActions","MAPBOX_TOKEN","Gmap","state","viewport","width","height","latitude","longitude","zoom","searchResultLayer","mapRef","createRef","resize","handleViewportChange","window","innerWidth","innerHeight","setState","handleGeocoderViewportChange","geocoderDefaultOverrides","transitionDuration","handleOnResult","event","GeoJsonLayer","id","data","result","geometry","getFillColor","getRadius","pointRadiusMinPixels","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render"],"mappings":"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","sourcesContent":["import \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport \"react-map-gl-geocoder/dist/mapbox-gl-geocoder.css\";\r\nimport React, { useState, useRef, useCallback ,useEffect, Component } from \"react\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport MapGL, { Marker, NavigationControl, FullscreenControl } from \"react-map-gl\";\r\nimport Geocoder from \"react-map-gl-geocoder\";\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\r\n\r\nimport  {locationActions} from './../actions/location.actions';\r\n// Please be a decent human and don't abuse my Mapbox API token.\r\n// If you fork this sandbox, replace my API token with your own.\r\n// Ways to set Mapbox token: https://uber.github.io/react-map-gl/#/Documentation/getting-started/about-mapbox-tokens\r\nconst MAPBOX_TOKEN =\r\n\t'pk.eyJ1IjoidG9hbmRvIiwiYSI6ImNrbThscTh4cjBrNnQycHF5MWJqd29jaDQifQ.LNubsbmqGfZhCCRymL-A2g';\r\n\r\n// export default function GMap() {\r\n\r\n// \tconst locate=useSelector(state=>state.location);\r\n// \tconst dispatch=useDispatch();\r\n// \tconst [viewport, setViewport] = useState({\r\n// \t\twidth: \"100%\",\r\n// \t\theight: \"100%\",\r\n// \t\tlatitude: 0,\r\n// \t\tlongitude: 0,\r\n// \t\tzoom: 15\r\n// \t});\r\n// \tconst [position, setPosition] = useState({\r\n// \t\tlatitude: 0,\r\n// \t\tlongitude: 0\r\n// \t})\r\n// \tconst navStyle = {\r\n// \t\tposition: \"absolute\",\r\n// \t\ttop: 36,\r\n// \t\tleft: 0,\r\n// \t\tpadding: \"10px\"\r\n// \t};\r\n// \tconst fullscreenControlStyle = {\r\n// \t\tposition: \"absolute\",\r\n// \t\ttop: 0,\r\n// \t\tleft: 0,\r\n// \t\tpadding: \"10px\"\r\n// \t};\r\n// \tconst mapRef = useRef();\r\n// \tconst geocoderContainerRef = useRef();\r\n// \tconst handleViewportChange = useCallback(\r\n// \t\t(newViewport) => setViewport(newViewport),\r\n// \t\t[]\r\n// \t);\r\n\t\r\n// \tconst handleGeocoderViewportChange = useCallback(\r\n// \t\t(newViewport) => {\r\n// \t\t\tconst geocoderDefaultOverrides = { transitionDuration: 1000 };\r\n\r\n// \t\t\treturn handleViewportChange({\r\n// \t\t\t\t...newViewport,\r\n// \t\t\t\t...geocoderDefaultOverrides\r\n// \t\t\t});\r\n// \t\t},\r\n// \t\t[handleViewportChange]\r\n// \t);\r\n// \tfunction makerOnClick(e) {\r\n// \t\tsetPosition({\r\n// \t\t\tlatitude: e.lngLat[1],\r\n// \t\t\tlongitude: e.lngLat[0]\r\n// \t\t})\r\n// \t}\r\n\r\n// \tuseEffect(() => {\r\n//         navigator.geolocation.getCurrentPosition(\r\n// \t\t\tfunction (position) {\r\n// \t\t\t\tconsole.log(position);\r\n// \t\t\t\tsetViewport({\r\n// \t\t\t\t\tlatitude: position.coords.latitude,\r\n// \t\t\t\t\tlongitude: position.coords.longitude,\r\n// \t\t\t\t\tzoom: 15\r\n// \t\t\t\t})\r\n// \t\t\t\tsetPosition({\r\n// \t\t\t\t\tlatitude: position.coords.latitude,\r\n// \t\t\t\t\tlongitude: position.coords.longitude,\r\n// \t\t\t\t})\r\n// \t\t\t},\r\n// \t\t\tfunction (error) {\r\n// \t\t\t\tconsole.error(\"Error Code = \" + error.code + \" - \" + error.message);\r\n// \t\t\t}\r\n// \t\t);\r\n//     }, []);\r\n\r\n// \treturn (\r\n// \t\t<div style={{ height: \"100%\" }}>\r\n// \t\t\t<MapGL\r\n// \t\t\t\tref={mapRef}\r\n// \t\t\t\t{...viewport}\r\n// \t\t\t\twidth=\"100%\"\r\n// \t\t\t\theight=\"100%\"\r\n// \t\t\t\tonViewportChange={handleViewportChange}\r\n// \t\t\t\tmapboxApiAccessToken={MAPBOX_TOKEN}\r\n\r\n// \t\t\t>\r\n// \t\t\t\t<div className=\"nav\" style={navStyle}>\r\n// \t\t\t\t\t<NavigationControl />\r\n// \t\t\t\t</div>\r\n// \t\t\t\t<div className=\"fullscreen\" style={fullscreenControlStyle}>\r\n// \t\t\t\t\t<FullscreenControl />\r\n// \t\t\t\t</div>\r\n// \t\t\t\t<Geocoder\r\n// \t\t\t\t\tmapRef={mapRef}\r\n// \t\t\t\t\tonViewportChange={handleGeocoderViewportChange}\r\n// \t\t\t\t\tcontainerRef={geocoderContainerRef}\r\n// \t\t\t\t\tmapboxApiAccessToken={MAPBOX_TOKEN}\r\n// \t\t\t\t\tposition=\"top-right\"\r\n// \t\t\t\t\t// onResult={(result)=>dispatch(locationActions.setLocation(result.result.center,result.result.place_name))}\r\n// \t\t\t\t/>\r\n// \t\t\t\t<Marker\r\n// \t\t\t\t\tkey=\"marker_1\"\r\n// \t\t\t\t\tlongitude={position.longitude}\r\n// \t\t\t\t\tlatitude={position.latitude}\r\n// \t\t\t\t>\r\n// \t\t\t\t\t<LocationOnIcon></LocationOnIcon>\r\n// \t\t\t\t</Marker>\r\n// \t\t\t</MapGL>\r\n// \t\t</div>\r\n// \t);\r\n// };\r\n\r\n\r\nexport default class Gmap extends Component {\r\n\tstate = {\r\n\t  viewport: {\r\n\t\twidth: 400,\r\n\t\theight: 400,\r\n\t\tlatitude: 37.7577,\r\n\t\tlongitude: -122.4376,\r\n\t\tzoom: 8\r\n\t  },\r\n\t  searchResultLayer: null\r\n\t};\r\n  \r\n\tmapRef = React.createRef();\r\n  \r\n\tcomponentDidMount() {\r\n\t  window.addEventListener(\"resize\", this.resize);\r\n\t  this.resize();\r\n\t}\r\n  \r\n\tcomponentWillUnmount() {\r\n\t  window.removeEventListener(\"resize\", this.resize);\r\n\t}\r\n  \r\n\tresize = () => {\r\n\t  this.handleViewportChange({\r\n\t\twidth: window.innerWidth,\r\n\t\theight: window.innerHeight\r\n\t  });\r\n\t};\r\n  \r\n\thandleViewportChange = (viewport) => {\r\n\t  this.setState({\r\n\t\tviewport: { ...this.state.viewport, ...viewport }\r\n\t  });\r\n\t};\r\n  \r\n\t// if you are happy with Geocoder default settings, you can just use handleViewportChange directly\r\n\thandleGeocoderViewportChange = (viewport) => {\r\n\t  const geocoderDefaultOverrides = { transitionDuration: 1000 };\r\n  \r\n\t  return this.handleViewportChange({\r\n\t\t...viewport,\r\n\t\t...geocoderDefaultOverrides\r\n\t  });\r\n\t};\r\n  \r\n\thandleOnResult = (event) => {\r\n\t  this.setState({\r\n\t\tsearchResultLayer: new GeoJsonLayer({\r\n\t\t  id: \"search-result\",\r\n\t\t  data: event.result.geometry,\r\n\t\t  getFillColor: [255, 0, 0, 128],\r\n\t\t  getRadius: 1000,\r\n\t\t  pointRadiusMinPixels: 10\r\n\t\t})\r\n\t  });\r\n\t};\r\n  \r\n\trender() {\r\n\t  const { viewport, searchResultLayer } = this.state;\r\n  \r\n\t  return (\r\n\t\t<MapGL\r\n\t\t  ref={this.mapRef}\r\n\t\t  {...viewport}\r\n\t\t  onViewportChange={this.handleViewportChange}\r\n\t\t  mapboxApiAccessToken={MAPBOX_TOKEN}\r\n\t\t>\r\n\t\t  <Geocoder\r\n\t\t\tmapRef={this.mapRef}\r\n\t\t\tonResult={this.handleOnResult}\r\n\t\t\tonViewportChange={this.handleGeocoderViewportChange}\r\n\t\t\tmapboxApiAccessToken={MAPBOX_TOKEN}\r\n\t\t  />\r\n\t\t  {/* <DeckGL {...viewport} layers={[searchResultLayer]} /> */}\r\n\t\t</MapGL>\r\n\t  );\r\n\t}\r\n  }\r\n"]},"metadata":{},"sourceType":"module"}