{"ast":null,"code":"import { authHeader } from '../helpers/auth-header';\nimport axios from 'axios';\nexport const userService = {\n  login,\n  logout,\n  register,\n  getAll,\n  getById,\n  update,\n  delete: _delete\n};\n\nfunction login(username, password) {\n  let email = username;\n  return axios.post('/users/signin', {\n    \"email\": email,\n    \"password\": password\n  }, {\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(handleResponse).then(user => {\n    // store user details and jwt token in local storage to keep user logged in between page refreshes\n    setTimeout(function () {\n      localStorage.setItem('user', user);\n    }, 50);\n    return JSON.stringify(user);\n  }).catch(err => {});\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('user');\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(`http://localhost:8000/users`, requestOptions).then(handleResponse);\n}\n\nfunction getById(id) {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(`http://localhost:8000/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction register(user) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`http://localhost:8000/users/signup`, requestOptions).then(handleResponse);\n}\n\nfunction update(user) {\n  const requestOptions = {\n    method: 'PUT',\n    headers: { ...authHeader(),\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`http://localhost:8000/users/${user.id}`, requestOptions).then(handleResponse);\n  ;\n} // prefixed function name with underscore because delete is a reserved word in javascript\n\n\nfunction _delete(id) {\n  const requestOptions = {\n    method: 'DELETE',\n    headers: authHeader()\n  };\n  return fetch(`http://localhost:8000/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.status === 200) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout(); // location.reload(true);\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["D:/LVTN/LVTN/cuisine-net/src/services/user.service.js"],"names":["authHeader","axios","userService","login","logout","register","getAll","getById","update","delete","_delete","username","password","email","post","headers","Accept","then","handleResponse","user","setTimeout","localStorage","setItem","JSON","stringify","catch","err","removeItem","requestOptions","method","fetch","id","body","response","text","data","parse","status","error","message","statusText","Promise","reject"],"mappings":"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","sourcesContent":["import { authHeader } from '../helpers/auth-header';\r\nimport axios from 'axios';\r\nexport const userService = {\r\n    login,\r\n    logout,\r\n    register,\r\n    getAll,\r\n    getById,\r\n    update,\r\n    delete: _delete\r\n};\r\n\r\nfunction  login(username, password) {\r\n    let email=username;\r\n    return  axios.post('/users/signin', {\r\n                \"email\" : email, \r\n                \"password\": password\r\n            },{\r\n                headers:{\r\n                  Accept: 'application/json',\r\n                 'Content-Type': 'application/json',\r\n              }\r\n            }\r\n    )\r\n    .then(handleResponse)\r\n        .then((user) => {\r\n            // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n            setTimeout(function(){localStorage.setItem('user', user)},50);\r\n            return JSON.stringify(user);\r\n        })\r\n        .catch((err)=>{\r\n        });\r\n}\r\n\r\nfunction logout() {\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem('user');\r\n}\r\n\r\nfunction getAll() {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: authHeader()\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction getById(id) {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: authHeader()\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users/${id}`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction register(user) {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(user)\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users/signup`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction update(user) {\r\n    const requestOptions = {\r\n        method: 'PUT',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(user)\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users/${user.id}`, requestOptions).then(handleResponse);;\r\n}\r\n\r\n// prefixed function name with underscore because delete is a reserved word in javascript\r\nfunction _delete(id) {\r\n    const requestOptions = {\r\n        method: 'DELETE',\r\n        headers: authHeader()\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users/${id}`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction handleResponse(response) {\r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.status===200) {\r\n            if (response.status === 401) {\r\n                // auto logout if 401 response returned from api\r\n                logout();\r\n                // location.reload(true);\r\n            }\r\n\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}