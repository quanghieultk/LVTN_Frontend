{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _asyncIterator from \"@babel/runtime/helpers/esm/asyncIterator\";\nimport { concatenateArrayBuffers, resolvePath } from '@loaders.gl/loader-utils';\nimport { isBrowser } from '@loaders.gl/loader-utils';\nimport { writeFile } from '../fetch/write-file';\nimport { fetchFile } from '../fetch/fetch-file';\n\nfunction getTemporaryFilename(filename) {\n  return \"/tmp/\".concat(filename);\n}\n\nexport function encode(_x, _x2, _x3, _x4) {\n  return _encode.apply(this, arguments);\n}\n\nfunction _encode() {\n  _encode = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(data, writer, options, url) {\n    var batches, chunks, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, batch, tmpInputFilename, tmpOutputFilename, outputFilename, response;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!writer.encode) {\n              _context.next = 4;\n              break;\n            }\n\n            _context.next = 3;\n            return writer.encode(data, options);\n\n          case 3:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 4:\n            if (!writer.encodeSync) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\", writer.encodeSync(data, options));\n\n          case 6:\n            if (!writer.encodeText) {\n              _context.next = 12;\n              break;\n            }\n\n            _context.t0 = new TextEncoder();\n            _context.next = 10;\n            return writer.encodeText(data, options);\n\n          case 10:\n            _context.t1 = _context.sent;\n            return _context.abrupt(\"return\", _context.t0.encode.call(_context.t0, _context.t1));\n\n          case 12:\n            if (!writer.encodeInBatches) {\n              _context.next = 51;\n              break;\n            }\n\n            batches = encodeInBatches(data, writer, options);\n            chunks = [];\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 17;\n            _iterator = _asyncIterator(batches);\n\n          case 19:\n            _context.next = 21;\n            return _iterator.next();\n\n          case 21:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 25;\n            return _step.value;\n\n          case 25:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 32;\n              break;\n            }\n\n            batch = _value;\n            chunks.push(batch);\n\n          case 29:\n            _iteratorNormalCompletion = true;\n            _context.next = 19;\n            break;\n\n          case 32:\n            _context.next = 38;\n            break;\n\n          case 34:\n            _context.prev = 34;\n            _context.t2 = _context[\"catch\"](17);\n            _didIteratorError = true;\n            _iteratorError = _context.t2;\n\n          case 38:\n            _context.prev = 38;\n            _context.prev = 39;\n\n            if (!(!_iteratorNormalCompletion && _iterator[\"return\"] != null)) {\n              _context.next = 43;\n              break;\n            }\n\n            _context.next = 43;\n            return _iterator[\"return\"]();\n\n          case 43:\n            _context.prev = 43;\n\n            if (!_didIteratorError) {\n              _context.next = 46;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 46:\n            return _context.finish(43);\n\n          case 47:\n            return _context.finish(38);\n\n          case 48:\n            _context.next = 50;\n            return concatenateArrayBuffers.apply(void 0, chunks);\n\n          case 50:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 51:\n            if (!(!isBrowser && writer.encodeURLtoURL)) {\n              _context.next = 63;\n              break;\n            }\n\n            tmpInputFilename = getTemporaryFilename('input');\n            _context.next = 55;\n            return writeFile(tmpInputFilename, data);\n\n          case 55:\n            tmpOutputFilename = getTemporaryFilename('output');\n            _context.next = 58;\n            return encodeURLtoURL(tmpInputFilename, tmpOutputFilename, writer, options);\n\n          case 58:\n            outputFilename = _context.sent;\n            _context.next = 61;\n            return fetchFile(outputFilename);\n\n          case 61:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response.arrayBuffer());\n\n          case 63:\n            throw new Error('Writer could not encode data');\n\n          case 64:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[17, 34, 38, 48], [39,, 43, 47]]);\n  }));\n  return _encode.apply(this, arguments);\n}\n\nexport function encodeSync(data, writer, options, url) {\n  if (writer.encodeSync) {\n    return writer.encodeSync(data, options);\n  }\n\n  throw new Error('Writer could not synchronously encode data');\n}\nexport function encodeText(_x5, _x6, _x7, _x8) {\n  return _encodeText.apply(this, arguments);\n}\n\nfunction _encodeText() {\n  _encodeText = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(data, writer, options, url) {\n    var arrayBuffer;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(writer.text && writer.encodeText)) {\n              _context2.next = 4;\n              break;\n            }\n\n            _context2.next = 3;\n            return writer.encodeText(data, options);\n\n          case 3:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 4:\n            if (!(writer.text && (writer.encode || writer.encodeInBatches))) {\n              _context2.next = 9;\n              break;\n            }\n\n            _context2.next = 7;\n            return encode(data, writer, options);\n\n          case 7:\n            arrayBuffer = _context2.sent;\n            return _context2.abrupt(\"return\", new TextDecoder().decode(arrayBuffer));\n\n          case 9:\n            throw new Error('Writer could not encode data as text');\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _encodeText.apply(this, arguments);\n}\n\nexport function encodeInBatches(data, writer, options, url) {\n  if (writer.encodeInBatches) {\n    var dataIterator = getIterator(data);\n    return writer.encodeInBatches(dataIterator, options);\n  }\n\n  throw new Error('Writer could not encode data in batches');\n}\n\nfunction getIterator(data) {\n  var dataIterator = [{\n    table: data,\n    start: 0,\n    end: data.length\n  }];\n  return dataIterator;\n}\n\nexport function encodeURLtoURL(_x9, _x10, _x11, _x12) {\n  return _encodeURLtoURL.apply(this, arguments);\n}\n\nfunction _encodeURLtoURL() {\n  _encodeURLtoURL = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(inputUrl, outputUrl, writer, options) {\n    var outputFilename;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            inputUrl = resolvePath(inputUrl);\n            outputUrl = resolvePath(outputUrl);\n\n            if (!(isBrowser || !writer.encodeURLtoURL)) {\n              _context3.next = 4;\n              break;\n            }\n\n            throw new Error();\n\n          case 4:\n            _context3.next = 6;\n            return writer.encodeURLtoURL(inputUrl, outputUrl, options);\n\n          case 6:\n            outputFilename = _context3.sent;\n            return _context3.abrupt(\"return\", outputFilename);\n\n          case 8:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _encodeURLtoURL.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/api/encode.js"],"names":["writer","batches","encodeInBatches","chunks","batch","concatenateArrayBuffers","tmpInputFilename","getTemporaryFilename","writeFile","tmpOutputFilename","outputFilename","encodeURLtoURL","response","fetchFile","arrayBuffer","encode","dataIterator","getIterator","table","start","end","data","length","inputUrl","resolvePath","outputUrl","isBrowser"],"mappings":"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","sourcesContent":["/* global TextEncoder, TextDecoder */\n/** @typedef {import('./encode')} types */\nimport {concatenateArrayBuffers, resolvePath} from '@loaders.gl/loader-utils';\nimport {isBrowser} from '@loaders.gl/loader-utils';\nimport {writeFile} from '../fetch/write-file';\nimport {fetchFile} from '../fetch/fetch-file';\n\n/**\n * @param {string} filename\n * @returns {string}\n * @todo Move to utils\n */\nfunction getTemporaryFilename(filename) {\n  return `/tmp/${filename}`;\n}\n\nexport async function encode(data, writer, options, url) {\n  if (writer.encode) {\n    return await writer.encode(data, options);\n  }\n\n  if (writer.encodeSync) {\n    return writer.encodeSync(data, options);\n  }\n\n  if (writer.encodeText) {\n    return new TextEncoder().encode(await writer.encodeText(data, options));\n  }\n\n  if (writer.encodeInBatches) {\n    // Create an iterator representing the data\n    // TODO - Assumes this is a table\n    const batches = encodeInBatches(data, writer, options);\n\n    // Concatenate the output\n    const chunks = [];\n    for await (const batch of batches) {\n      chunks.push(batch);\n    }\n    // @ts-ignore\n    return await concatenateArrayBuffers(...chunks);\n  }\n\n  if (!isBrowser && writer.encodeURLtoURL) {\n    // TODO - how to generate filenames with correct extensions?\n    const tmpInputFilename = getTemporaryFilename('input');\n    await writeFile(tmpInputFilename, data);\n\n    const tmpOutputFilename = getTemporaryFilename('output');\n\n    const outputFilename = await encodeURLtoURL(\n      tmpInputFilename,\n      tmpOutputFilename,\n      writer,\n      options\n    );\n\n    const response = await fetchFile(outputFilename);\n    return response.arrayBuffer();\n  }\n\n  throw new Error('Writer could not encode data');\n}\n\nexport function encodeSync(data, writer, options, url) {\n  if (writer.encodeSync) {\n    return writer.encodeSync(data, options);\n  }\n  throw new Error('Writer could not synchronously encode data');\n}\n\nexport async function encodeText(data, writer, options, url) {\n  if (writer.text && writer.encodeText) {\n    return await writer.encodeText(data, options);\n  }\n\n  if (writer.text && (writer.encode || writer.encodeInBatches)) {\n    const arrayBuffer = await encode(data, writer, options);\n    return new TextDecoder().decode(arrayBuffer);\n  }\n\n  throw new Error('Writer could not encode data as text');\n}\n\nexport function encodeInBatches(data, writer, options, url) {\n  if (writer.encodeInBatches) {\n    const dataIterator = getIterator(data);\n    return writer.encodeInBatches(dataIterator, options);\n  }\n  // TODO -fall back to atomic encode?\n  throw new Error('Writer could not encode data in batches');\n}\n\nfunction getIterator(data) {\n  // TODO - this is an unacceptable hack!!!\n  const dataIterator = [{table: data, start: 0, end: data.length}];\n  return dataIterator;\n}\n\nexport async function encodeURLtoURL(inputUrl, outputUrl, writer, options) {\n  inputUrl = resolvePath(inputUrl);\n  outputUrl = resolvePath(outputUrl);\n  if (isBrowser || !writer.encodeURLtoURL) {\n    throw new Error();\n  }\n  const outputFilename = await writer.encodeURLtoURL(inputUrl, outputUrl, options);\n  return outputFilename;\n}\n"]},"metadata":{},"sourceType":"module"}