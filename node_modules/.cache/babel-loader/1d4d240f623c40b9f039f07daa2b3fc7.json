{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { getFetchFunction } from './option-utils';\nexport function getLoaderContext(context, options) {\n  var previousContext = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n  if (previousContext) {\n    return previousContext;\n  }\n\n  context = _objectSpread({\n    fetch: getFetchFunction(options || {}, context)\n  }, context);\n\n  if (!Array.isArray(context.loaders)) {\n    context.loaders = null;\n  }\n\n  return context;\n}\nexport function getLoaders(loaders, context) {\n  if (!context && loaders && !Array.isArray(loaders)) {\n    return loaders;\n  }\n\n  var candidateLoaders;\n\n  if (loaders) {\n    candidateLoaders = Array.isArray(loaders) ? loaders : [loaders];\n  }\n\n  if (context && context.loaders) {\n    var contextLoaders = Array.isArray(context.loaders) ? context.loaders : [context.loaders];\n    candidateLoaders = candidateLoaders ? [].concat(_toConsumableArray(candidateLoaders), _toConsumableArray(contextLoaders)) : contextLoaders;\n  }\n\n  return candidateLoaders && candidateLoaders.length ? candidateLoaders : null;\n}","map":{"version":3,"sources":["../../../../src/lib/loader-utils/context-utils.js"],"names":["previousContext","context","fetch","getFetchFunction","options","Array","candidateLoaders","contextLoaders"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,gBAAA,QAAA,gBAAA;AAEA,OAAO,SAAA,gBAAA,CAAA,OAAA,EAAA,OAAA,EAAoE;AAAA,MAAxBA,eAAwB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAN,IAAM;;AAGzE,MAAA,eAAA,EAAqB;AACnB,WAAA,eAAA;AACD;;AAEDC,EAAAA,OAAO,GAAA,aAAA,CAAA;AACLC,IAAAA,KAAK,EAAEC,gBAAgB,CAACC,OAAO,IAAR,EAAA,EAAA,OAAA;AADlB,GAAA,EAAPH,OAAO,CAAPA;;AAMA,MAAI,CAACI,KAAK,CAALA,OAAAA,CAAcJ,OAAO,CAA1B,OAAKI,CAAL,EAAqC;AACnCJ,IAAAA,OAAO,CAAPA,OAAAA,GAAAA,IAAAA;AACD;;AAED,SAAA,OAAA;AACD;AAGD,OAAO,SAAA,UAAA,CAAA,OAAA,EAAA,OAAA,EAAsC;AAE3C,MAAI,CAAA,OAAA,IAAA,OAAA,IAAuB,CAACI,KAAK,CAALA,OAAAA,CAA5B,OAA4BA,CAA5B,EAAoD;AAClD,WAAA,OAAA;AACD;;AAGD,MAAA,gBAAA;;AACA,MAAA,OAAA,EAAa;AACXC,IAAAA,gBAAgB,GAAGD,KAAK,CAALA,OAAAA,CAAAA,OAAAA,IAAAA,OAAAA,GAAmC,CAAtDC,OAAsD,CAAtDA;AACD;;AACD,MAAIL,OAAO,IAAIA,OAAO,CAAtB,OAAA,EAAgC;AAC9B,QAAMM,cAAc,GAAGF,KAAK,CAALA,OAAAA,CAAcJ,OAAO,CAArBI,OAAAA,IAAiCJ,OAAO,CAAxCI,OAAAA,GAAmD,CAACJ,OAAO,CAAlF,OAA0E,CAA1E;AACAK,IAAAA,gBAAgB,GAAGA,gBAAgB,GAAA,GAAA,MAAA,CAAA,kBAAA,CAAA,gBAAA,CAAA,EAAA,kBAAA,CAAA,cAAA,CAAA,CAAA,GAAnCA,cAAAA;AACD;;AAED,SAAOA,gBAAgB,IAAIA,gBAAgB,CAApCA,MAAAA,GAAAA,gBAAAA,GAAP,IAAA;AACD","sourcesContent":["import {getFetchFunction} from './option-utils';\n\nexport function getLoaderContext(context, options, previousContext = null) {\n  // For recursive calls, we already have a context\n  // TODO - add any additional loaders to context?\n  if (previousContext) {\n    return previousContext;\n  }\n\n  context = {\n    fetch: getFetchFunction(options || {}, context),\n    ...context\n  };\n\n  // Recursive loading does not use single loader\n  if (!Array.isArray(context.loaders)) {\n    context.loaders = null;\n  }\n\n  return context;\n}\n\n// eslint-disable-next-line complexity\nexport function getLoaders(loaders, context) {\n  // A single non-array loader is force selected, but only on top-level (context === null)\n  if (!context && loaders && !Array.isArray(loaders)) {\n    return loaders;\n  }\n\n  // Create a merged list\n  let candidateLoaders;\n  if (loaders) {\n    candidateLoaders = Array.isArray(loaders) ? loaders : [loaders];\n  }\n  if (context && context.loaders) {\n    const contextLoaders = Array.isArray(context.loaders) ? context.loaders : [context.loaders];\n    candidateLoaders = candidateLoaders ? [...candidateLoaders, ...contextLoaders] : contextLoaders;\n  }\n  // If no loaders, return null to look in globally registered loaders\n  return candidateLoaders && candidateLoaders.length ? candidateLoaders : null;\n}\n"]},"metadata":{},"sourceType":"module"}