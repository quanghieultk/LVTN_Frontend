{"ast":null,"code":"import { authHeader } from '../helpers/auth-header';\nimport axios from 'axios';\nexport const userService = {\n  login,\n  logout,\n  register,\n  getAll,\n  getById,\n  update,\n  delete: _delete\n}; // function login(username, password) {\n//     let email=username;\n//     return new  Promise((resolve,  reject) =>\n//     {\n//     } \n// }\n\nfunction login(username, password) {\n  let email = username;\n  return new Promise((resolve, reject) => {\n    axios.get('/users/signin', {\n      \"email\": email,\n      \"password\": password\n    }).then(response => resolve(response.data)).catch(err => reject(err)); // .then(handleResponse)\n    // .then((user) => {\n    //     // store user details and jwt token in local storage to keep user logged in between page refreshes\n    //     localStorage.setItem('user', user);\n    //     return JSON.stringify(user);\n    // })\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('user');\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(`http://localhost:8000/users`, requestOptions).then(handleResponse);\n}\n\nfunction getById(id) {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(`http://localhost:8000/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction register(user) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`http://localhost:8000/users/signup`, requestOptions).then(handleResponse);\n}\n\nfunction update(user) {\n  const requestOptions = {\n    method: 'PUT',\n    headers: { ...authHeader(),\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`http://localhost:8000/users/${user.id}`, requestOptions).then(handleResponse);\n  ;\n} // prefixed function name with underscore because delete is a reserved word in javascript\n\n\nfunction _delete(id) {\n  const requestOptions = {\n    method: 'DELETE',\n    headers: authHeader()\n  };\n  return fetch(`http://localhost:8000/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.status === 200) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout(); // location.reload(true);\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["D:/LVTN/LVTN/cuisine-net/src/services/user.service.js"],"names":["authHeader","axios","userService","login","logout","register","getAll","getById","update","delete","_delete","username","password","email","Promise","resolve","reject","get","then","response","data","catch","err","localStorage","removeItem","requestOptions","method","headers","fetch","handleResponse","id","user","body","JSON","stringify","text","parse","status","error","message","statusText"],"mappings":"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","sourcesContent":["import { authHeader } from '../helpers/auth-header';\r\nimport axios from 'axios';\r\nexport const userService = {\r\n    login,\r\n    logout,\r\n    register,\r\n    getAll,\r\n    getById,\r\n    update,\r\n    delete: _delete\r\n};\r\n\r\n// function login(username, password) {\r\n//     let email=username;\r\n//     return new  Promise((resolve,  reject) =>\r\n//     {\r\n        \r\n//     } \r\n// }\r\n\r\nfunction login(username, password){\r\n    let email=username;\r\n    return new Promise((resolve,reject)=>{\r\n        axios.get('/users/signin', {\r\n            \"email\" : email, \r\n            \"password\": password\r\n        })\r\n        .then(response=>resolve(response.data))\r\n        .catch(err=> reject(err))\r\n        // .then(handleResponse)\r\n        // .then((user) => {\r\n        //     // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n        //     localStorage.setItem('user', user);\r\n        //     return JSON.stringify(user);\r\n        // })\r\n    })\r\n}\r\n\r\nfunction logout() {\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem('user');\r\n}\r\n\r\nfunction getAll() {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: authHeader()\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction getById(id) {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: authHeader()\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users/${id}`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction register(user) {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(user)\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users/signup`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction update(user) {\r\n    const requestOptions = {\r\n        method: 'PUT',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(user)\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users/${user.id}`, requestOptions).then(handleResponse);;\r\n}\r\n\r\n// prefixed function name with underscore because delete is a reserved word in javascript\r\nfunction _delete(id) {\r\n    const requestOptions = {\r\n        method: 'DELETE',\r\n        headers: authHeader()\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users/${id}`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction handleResponse(response) {\r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.status===200) {\r\n            if (response.status === 401) {\r\n                // auto logout if 401 response returned from api\r\n                logout();\r\n                // location.reload(true);\r\n            }\r\n\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}