{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { lerp } from 'math.gl';\nvar availableTransformations = {\n  Point: Point,\n  MultiPoint: MultiPoint,\n  LineString: LineString,\n  MultiLineString: MultiLineString,\n  Polygon: Polygon,\n  MultiPolygon: MultiPolygon\n};\n\nfunction Point(_ref, _ref2, viewport) {\n  var _ref3 = _slicedToArray(_ref, 2),\n      pointX = _ref3[0],\n      pointY = _ref3[1];\n\n  var _ref4 = _slicedToArray(_ref2, 2),\n      nw = _ref4[0],\n      se = _ref4[1];\n\n  var x = lerp(nw[0], se[0], pointX);\n  var y = lerp(nw[1], se[1], pointY);\n  return viewport.unprojectFlat([x, y]);\n}\n\nfunction getPoints(geometry, bbox, viewport) {\n  return geometry.map(function (g) {\n    return Point(g, bbox, viewport);\n  });\n}\n\nfunction MultiPoint(multiPoint, bbox, viewport) {\n  return getPoints(multiPoint, bbox, viewport);\n}\n\nfunction LineString(line, bbox, viewport) {\n  return getPoints(line, bbox, viewport);\n}\n\nfunction MultiLineString(multiLineString, bbox, viewport) {\n  return multiLineString.map(function (lineString) {\n    return LineString(lineString, bbox, viewport);\n  });\n}\n\nfunction Polygon(polygon, bbox, viewport) {\n  return polygon.map(function (polygonRing) {\n    return getPoints(polygonRing, bbox, viewport);\n  });\n}\n\nfunction MultiPolygon(multiPolygon, bbox, viewport) {\n  return multiPolygon.map(function (polygon) {\n    return Polygon(polygon, bbox, viewport);\n  });\n}\n\nexport function transform(geometry, bbox, viewport) {\n  var nw = viewport.projectFlat([bbox.west, bbox.north]);\n  var se = viewport.projectFlat([bbox.east, bbox.south]);\n  var projectedBbox = [nw, se];\n  return _objectSpread(_objectSpread({}, geometry), {}, {\n    coordinates: availableTransformations[geometry.type](geometry.coordinates, projectedBbox, viewport)\n  });\n}","map":{"version":3,"sources":["../../../src/mvt-layer/coordinate-transform.js"],"names":["availableTransformations","Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","pointX","pointY","nw","se","x","lerp","y","viewport","getPoints","bbox","projectedBbox","coordinates","geometry"],"mappings":"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","sourcesContent":["import {lerp} from 'math.gl';\n\nconst availableTransformations = {\n  Point,\n  MultiPoint,\n  LineString,\n  MultiLineString,\n  Polygon,\n  MultiPolygon\n};\n\nfunction Point([pointX, pointY], [nw, se], viewport) {\n  const x = lerp(nw[0], se[0], pointX);\n  const y = lerp(nw[1], se[1], pointY);\n\n  return viewport.unprojectFlat([x, y]);\n}\n\nfunction getPoints(geometry, bbox, viewport) {\n  return geometry.map(g => Point(g, bbox, viewport));\n}\n\nfunction MultiPoint(multiPoint, bbox, viewport) {\n  return getPoints(multiPoint, bbox, viewport);\n}\n\nfunction LineString(line, bbox, viewport) {\n  return getPoints(line, bbox, viewport);\n}\n\nfunction MultiLineString(multiLineString, bbox, viewport) {\n  return multiLineString.map(lineString => LineString(lineString, bbox, viewport));\n}\n\nfunction Polygon(polygon, bbox, viewport) {\n  return polygon.map(polygonRing => getPoints(polygonRing, bbox, viewport));\n}\n\nfunction MultiPolygon(multiPolygon, bbox, viewport) {\n  return multiPolygon.map(polygon => Polygon(polygon, bbox, viewport));\n}\n\nexport function transform(geometry, bbox, viewport) {\n  const nw = viewport.projectFlat([bbox.west, bbox.north]);\n  const se = viewport.projectFlat([bbox.east, bbox.south]);\n  const projectedBbox = [nw, se];\n\n  return {\n    ...geometry,\n    coordinates: availableTransformations[geometry.type](\n      geometry.coordinates,\n      projectedBbox,\n      viewport\n    )\n  };\n}\n"]},"metadata":{},"sourceType":"module"}