{"ast":null,"code":"import { authHeader } from '../helpers/auth-header';\nexport const userService = {\n  login,\n  logout,\n  register,\n  getAll,\n  getById,\n  update,\n  delete: _delete\n};\n\nfunction login(username, password) {\n  let email = username;\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  };\n  return fetch(`http://localhost:8000/users/login`, requestOptions).then(handleResponse).then(user => {\n    alert(JSON.stringify(user)); // store user details and jwt token in local storage to keep user logged in between page refreshes\n\n    localStorage.setItem('user', JSON.stringify(user));\n    return JSON.stringify(user);\n  }).catch(err => {\n    alert(\"err2\");\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('user');\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(`http://localhost:8000/users`, requestOptions).then(handleResponse);\n}\n\nfunction getById(id) {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(`http://localhost:8000/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction register(user) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`http://localhost:8000/users/signup`, requestOptions).then(handleResponse);\n}\n\nfunction update(user) {\n  const requestOptions = {\n    method: 'PUT',\n    headers: { ...authHeader(),\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`http://localhost:8000/users/${user.id}`, requestOptions).then(handleResponse);\n  ;\n} // prefixed function name with underscore because delete is a reserved word in javascript\n\n\nfunction _delete(id) {\n  const requestOptions = {\n    method: 'DELETE',\n    headers: authHeader()\n  };\n  return fetch(`http://localhost:8000/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      alert(\"OK\");\n\n      if (response.status === 401) {\n        alert(\"401\"); // auto logout if 401 response returned from api\n\n        logout(); // location.reload(true);\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["D:/LVTN/LVTN/cuisine-net/src/services/user.service.js"],"names":["authHeader","userService","login","logout","register","getAll","getById","update","delete","_delete","username","password","email","requestOptions","method","headers","body","JSON","stringify","fetch","then","handleResponse","user","alert","localStorage","setItem","catch","err","removeItem","id","response","text","data","parse","ok","status","error","message","statusText","Promise","reject"],"mappings":"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","sourcesContent":["import { authHeader } from '../helpers/auth-header';\r\n\r\nexport const userService = {\r\n    login,\r\n    logout,\r\n    register,\r\n    getAll,\r\n    getById,\r\n    update,\r\n    delete: _delete\r\n};\r\n\r\nfunction  login(username, password) {\r\n    let email=username;\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email, password })\r\n    };\r\n    return fetch(`http://localhost:8000/users/login`, requestOptions)\r\n        .then(handleResponse)\r\n        .then((user) => {\r\n                   alert(JSON.stringify(user));\r\n            // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n            localStorage.setItem('user', JSON.stringify(user));\r\n            return JSON.stringify(user);\r\n        }).catch((err)=>{\r\n            alert(\"err2\");\r\n        });\r\n}\r\n\r\nfunction logout() {\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem('user');\r\n}\r\n\r\nfunction getAll() {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: authHeader()\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction getById(id) {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: authHeader()\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users/${id}`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction register(user) {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(user)\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users/signup`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction update(user) {\r\n    const requestOptions = {\r\n        method: 'PUT',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(user)\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users/${user.id}`, requestOptions).then(handleResponse);;\r\n}\r\n\r\n// prefixed function name with underscore because delete is a reserved word in javascript\r\nfunction _delete(id) {\r\n    const requestOptions = {\r\n        method: 'DELETE',\r\n        headers: authHeader()\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users/${id}`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction handleResponse(response) {\r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            alert(\"OK\");\r\n            if (response.status === 401) {\r\n                alert(\"401\");\r\n                // auto logout if 401 response returned from api\r\n                logout();\r\n                // location.reload(true);\r\n            }\r\n\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}