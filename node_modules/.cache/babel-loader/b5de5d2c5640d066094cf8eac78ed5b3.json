{"ast":null,"code":"import { notificationConstants } from \"../constants/notification.constants\";\nimport { userConstants } from \"../constants/user.constants\";\nexport function notification(state = {\n  isOpen: false,\n  notifications: [],\n  allNotificationsCount: 0,\n  page: 0\n}, action) {\n  switch (action.type) {\n    case notificationConstants.FETCH_NOTIFICATIONS_SUCCESS:\n      if (action.initialFetch) {\n        return { ...state,\n          notifications: action.notifications,\n          allNotificationsCount: action.total.count\n        };\n      }\n\n      return { ...state,\n        notifications: [...state.notifications, ...action.notifications],\n        page: state.notifications.length + action.notifications.length\n      };\n      break;\n\n    case notificationConstants.CLOSE_NOTIFICATION_POPUP:\n      return { ...state,\n        isOpen: false\n      };\n\n    case notificationConstants.TOGGLE_NOTIFICATION_POPUP:\n      return { ...state,\n        isOpen: !state.isOpen\n      };\n\n    case notificationConstants.ADD_NOTIFICATION:\n      return { ...state,\n        notifications: [action.data.notification, ...state.notifications],\n        allNotificationsCount: state.allNotificationsCount + 1,\n        page: state.notifications.length + 1\n      };\n\n    case notificationConstants.REMOVE_NOTIFICATION:\n      state.notifications[action.data].read = true;\n      return { ...state,\n        notifications: [...state.notifications],\n        allNotificationsCount: state.allNotificationsCount - 1 <= 0 ? 0 : state.allNotificationsCount - 1,\n        page: state.notifications.length\n      };\n\n    case notificationConstants.READ_NOTIFICATIOS:\n      return { ...state,\n        notifications: state.notifications.map(e => {\n          return { ...e,\n            read: true\n          };\n        })\n      };\n\n    case userConstants.GETUSER_SUCCESS:\n      return { ...state,\n        allNotificationsCount: action.user.allNotifications\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["D:/LVTN/LVTN/cuisine-net/src/reducers/notification.reducer.js"],"names":["notificationConstants","userConstants","notification","state","isOpen","notifications","allNotificationsCount","page","action","type","FETCH_NOTIFICATIONS_SUCCESS","initialFetch","total","count","length","CLOSE_NOTIFICATION_POPUP","TOGGLE_NOTIFICATION_POPUP","ADD_NOTIFICATION","data","REMOVE_NOTIFICATION","read","READ_NOTIFICATIOS","map","e","GETUSER_SUCCESS","user","allNotifications"],"mappings":"AAAA,SAASA,qBAAT,QAAsC,qCAAtC;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,OAAO,SAASC,YAAT,CACHC,KAAK,GAAG;AACJC,EAAAA,MAAM,EAAE,KADJ;AAEJC,EAAAA,aAAa,EAAE,EAFX;AAGJC,EAAAA,qBAAqB,EAAE,CAHnB;AAIJC,EAAAA,IAAI,EAAE;AAJF,CADL,EAOHC,MAPG,EAQL;AACE,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,qBAAqB,CAACU,2BAA3B;AACI,UAAIF,MAAM,CAACG,YAAX,EAAyB;AACrB,eAAO,EACH,GAAGR,KADA;AAEHE,UAAAA,aAAa,EAAEG,MAAM,CAACH,aAFnB;AAGHC,UAAAA,qBAAqB,EAAEE,MAAM,CAACI,KAAP,CAAaC;AAHjC,SAAP;AAKH;;AACD,aAAO,EACH,GAAGV,KADA;AAEHE,QAAAA,aAAa,EAAE,CAAC,GAAGF,KAAK,CAACE,aAAV,EAAyB,GAAGG,MAAM,CAACH,aAAnC,CAFZ;AAGHE,QAAAA,IAAI,EAAEJ,KAAK,CAACE,aAAN,CAAoBS,MAApB,GAA2BN,MAAM,CAACH,aAAP,CAAqBS;AAHnD,OAAP;AAKA;;AACJ,SAAKd,qBAAqB,CAACe,wBAA3B;AACI,aAAO,EACH,GAAGZ,KADA;AAEHC,QAAAA,MAAM,EAAE;AAFL,OAAP;;AAIJ,SAAKJ,qBAAqB,CAACgB,yBAA3B;AACI,aAAO,EACH,GAAGb,KADA;AAEHC,QAAAA,MAAM,EAAE,CAACD,KAAK,CAACC;AAFZ,OAAP;;AAIJ,SAAKJ,qBAAqB,CAACiB,gBAA3B;AACI,aAAO,EACH,GAAGd,KADA;AAEHE,QAAAA,aAAa,EAAE,CAACG,MAAM,CAACU,IAAP,CAAYhB,YAAb,EAA2B,GAAGC,KAAK,CAACE,aAApC,CAFZ;AAGHC,QAAAA,qBAAqB,EAAEH,KAAK,CAACG,qBAAN,GAA8B,CAHlD;AAIHC,QAAAA,IAAI,EAAEJ,KAAK,CAACE,aAAN,CAAoBS,MAApB,GAA6B;AAJhC,OAAP;;AAMJ,SAAKd,qBAAqB,CAACmB,mBAA3B;AACIhB,MAAAA,KAAK,CAACE,aAAN,CAAoBG,MAAM,CAACU,IAA3B,EAAiCE,IAAjC,GAAwC,IAAxC;AACA,aAAO,EACH,GAAGjB,KADA;AAEHE,QAAAA,aAAa,EAAE,CAAC,GAAGF,KAAK,CAACE,aAAV,CAFZ;AAGHC,QAAAA,qBAAqB,EAAGH,KAAK,CAACG,qBAAN,GAA8B,CAA/B,IAAqC,CAArC,GAAyC,CAAzC,GAA8CH,KAAK,CAACG,qBAAN,GAA8B,CAHhG;AAIHC,QAAAA,IAAI,EAAEJ,KAAK,CAACE,aAAN,CAAoBS;AAJvB,OAAP;;AAMJ,SAAKd,qBAAqB,CAACqB,iBAA3B;AACI,aAAO,EACH,GAAGlB,KADA;AAEHE,QAAAA,aAAa,EAAEF,KAAK,CAACE,aAAN,CAAoBiB,GAApB,CAAwBC,CAAC,IAAI;AACxC,iBAAO,EACH,GAAGA,CADA;AAEHH,YAAAA,IAAI,EAAE;AAFH,WAAP;AAIH,SALc;AAFZ,OAAP;;AASJ,SAAKnB,aAAa,CAACuB,eAAnB;AACI,aAAO,EACH,GAAGrB,KADA;AAEHG,QAAAA,qBAAqB,EAAEE,MAAM,CAACiB,IAAP,CAAYC;AAFhC,OAAP;;AAIJ;AACI,aAAOvB,KAAP;AAxDR;AA0DH","sourcesContent":["import { notificationConstants } from \"../constants/notification.constants\";\r\nimport { userConstants } from \"../constants/user.constants\";\r\nexport function notification(\r\n    state = {\r\n        isOpen: false,\r\n        notifications: [],\r\n        allNotificationsCount: 0,\r\n        page: 0\r\n    },\r\n    action\r\n) {\r\n    switch (action.type) {\r\n        case notificationConstants.FETCH_NOTIFICATIONS_SUCCESS:\r\n            if (action.initialFetch) {\r\n                return {\r\n                    ...state,\r\n                    notifications: action.notifications,\r\n                    allNotificationsCount: action.total.count\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                notifications: [...state.notifications, ...action.notifications],\r\n                page: state.notifications.length+action.notifications.length\r\n            }\r\n            break;\r\n        case notificationConstants.CLOSE_NOTIFICATION_POPUP:\r\n            return {\r\n                ...state,\r\n                isOpen: false\r\n            }\r\n        case notificationConstants.TOGGLE_NOTIFICATION_POPUP:\r\n            return {\r\n                ...state,\r\n                isOpen: !state.isOpen\r\n            }\r\n        case notificationConstants.ADD_NOTIFICATION:\r\n            return {\r\n                ...state,\r\n                notifications: [action.data.notification, ...state.notifications],\r\n                allNotificationsCount: state.allNotificationsCount + 1,\r\n                page: state.notifications.length + 1\r\n            }\r\n        case notificationConstants.REMOVE_NOTIFICATION:\r\n            state.notifications[action.data].read = true;\r\n            return {\r\n                ...state,\r\n                notifications: [...state.notifications],\r\n                allNotificationsCount: (state.allNotificationsCount - 1) <= 0 ? 0 : (state.allNotificationsCount - 1),\r\n                page: state.notifications.length\r\n            }\r\n        case notificationConstants.READ_NOTIFICATIOS:\r\n            return {\r\n                ...state,\r\n                notifications: state.notifications.map(e => {\r\n                    return {\r\n                        ...e,\r\n                        read: true\r\n                    };\r\n                })\r\n            };\r\n        case userConstants.GETUSER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                allNotificationsCount: action.user.allNotifications\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}