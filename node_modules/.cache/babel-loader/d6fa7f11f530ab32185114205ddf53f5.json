{"ast":null,"code":"import axios from 'axios';\nimport { authHeader } from '../helpers/auth-header';\nexport const chatService = {\n  sendMessage,\n  getChatRooms,\n  getMessagesForRoom,\n  readMessages\n};\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem(\"user\");\n}\n\nfunction getChatRooms(parmams) {\n  return axios.post(\"http://localhost:8000/api/chats/getChatRooms/\", null, {\n    headers: authHeader()\n  });\n}\n\nfunction readMessages(params) {\n  return axios.post(\"http://localhost:8000/api/chats/readMessage\", {\n    params\n  }, {\n    headers: authHeader()\n  });\n}\n\nfunction getMessagesForRoom(room) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: JSON.parse(localStorage.getItem(\"user\")).token\n    },\n    body: JSON.stringify({ ...room\n    })\n  };\n  return axios.post(\"http://localhost:8000/api/chats/getMessagesForRoom\", {\n    roomId: room._id\n  }, {\n    headers: authHeader()\n  });\n}\n\nfunction sendMessage(params) {\n  return axios.post(\"http://localhost:8000/api/chats/sendMessage\", params, {\n    headers: authHeader()\n  });\n}\n\nfunction sendImage(data) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Authorization: JSON.parse(localStorage.getItem(\"user\")).token\n    },\n    body: data\n  };\n  return fetch(\"/api/chat/sendImage/\", requestOptions).then(handleResponse).then(res => {\n    return res;\n  });\n}\n\nfunction call(data) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: JSON.parse(localStorage.getItem(\"user\")).token\n    },\n    body: JSON.stringify({ ...data\n    })\n  };\n  return fetch(\"/api/chat/call/\", requestOptions).then(handleResponse).then(res => {\n    return res;\n  });\n}\n\nfunction answer(data) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: JSON.parse(localStorage.getItem(\"user\")).token\n    },\n    body: JSON.stringify({ ...data\n    })\n  };\n  return fetch(\"/api/chat/answer/\", requestOptions).then(handleResponse).then(res => {\n    return res;\n  });\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout();\n        window.location.reload(true);\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["D:/LVTN/LVTN/cuisine-net/src/services/chat.service.js"],"names":["axios","authHeader","chatService","sendMessage","getChatRooms","getMessagesForRoom","readMessages","logout","localStorage","removeItem","parmams","post","headers","params","room","requestOptions","method","Authorization","JSON","parse","getItem","token","body","stringify","roomId","_id","sendImage","data","fetch","then","handleResponse","res","call","answer","response","text","ok","status","window","location","reload","error","message","statusText","Promise","reject"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { authHeader } from '../helpers/auth-header';\r\n\r\nexport const chatService = {\r\n    sendMessage,\r\n    getChatRooms,\r\n    getMessagesForRoom,\r\n    readMessages\r\n}\r\nfunction logout() {\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem(\"user\");\r\n}\r\nfunction getChatRooms(parmams) {\r\n    return axios.post(\"http://localhost:8000/api/chats/getChatRooms/\",null,{headers : authHeader()})\r\n}\r\n\r\nfunction readMessages(params) {\r\n    return axios.post(\"http://localhost:8000/api/chats/readMessage\",{params} ,{headers:  authHeader()});\r\n}\r\n\r\nfunction getMessagesForRoom(room) {\r\n    const requestOptions = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: JSON.parse(localStorage.getItem(\"user\")).token\r\n        },\r\n        body: JSON.stringify({\r\n            ...room\r\n        })\r\n    };\r\n\r\n    return axios.post(\"http://localhost:8000/api/chats/getMessagesForRoom\", {roomId: room._id},{headers: authHeader()});\r\n}\r\n\r\nfunction sendMessage(params) {\r\n    return axios.post(\"http://localhost:8000/api/chats/sendMessage\",params,{headers: authHeader()})\r\n}\r\n\r\n\r\nfunction sendImage(data) {\r\n    const requestOptions = {\r\n        method: \"POST\",\r\n        headers: {\r\n            Authorization: JSON.parse(localStorage.getItem(\"user\")).token\r\n        },\r\n        body: data\r\n    };\r\n\r\n    return fetch(\"/api/chat/sendImage/\", requestOptions)\r\n        .then(handleResponse)\r\n        .then(res => {\r\n            return res;\r\n        });\r\n}\r\n\r\nfunction call(data) {\r\n    const requestOptions = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: JSON.parse(localStorage.getItem(\"user\")).token\r\n        },\r\n        body: JSON.stringify({\r\n            ...data\r\n        })\r\n    };\r\n\r\n    return fetch(\"/api/chat/call/\", requestOptions)\r\n        .then(handleResponse)\r\n        .then(res => {\r\n            return res;\r\n        });\r\n}\r\n\r\n\r\n\r\nfunction answer(data) {\r\n    const requestOptions = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: JSON.parse(localStorage.getItem(\"user\")).token\r\n        },\r\n        body: JSON.stringify({\r\n            ...data\r\n        })\r\n    };\r\n\r\n    return fetch(\"/api/chat/answer/\", requestOptions)\r\n        .then(handleResponse)\r\n        .then(res => {\r\n            return res;\r\n        });\r\n}\r\n\r\n\r\n\r\nfunction handleResponse(response) {\r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            if (response.status === 401) {\r\n                // auto logout if 401 response returned from api\r\n                logout();\r\n                window.location.reload(true);\r\n            }\r\n\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        return data;\r\n    });\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}