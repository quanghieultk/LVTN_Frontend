{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { lerp } from 'math.gl';\nimport Transition from './transition';\n\nvar CPUInterpolationTransition = function (_Transition) {\n  _inherits(CPUInterpolationTransition, _Transition);\n\n  var _super = _createSuper(CPUInterpolationTransition);\n\n  function CPUInterpolationTransition() {\n    _classCallCheck(this, CPUInterpolationTransition);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(CPUInterpolationTransition, [{\n    key: \"_onUpdate\",\n    value: function _onUpdate() {\n      var time = this.time,\n          _this$settings = this.settings,\n          fromValue = _this$settings.fromValue,\n          toValue = _this$settings.toValue,\n          duration = _this$settings.duration,\n          easing = _this$settings.easing;\n      var t = easing(time / duration);\n      this._value = lerp(fromValue, toValue, t);\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n  }]);\n\n  return CPUInterpolationTransition;\n}(Transition);\n\nexport { CPUInterpolationTransition as default };","map":{"version":3,"sources":["../../../src/transitions/cpu-interpolation-transition.js"],"names":["CPUInterpolationTransition","Transition","time","fromValue","toValue","duration","easing","t","lerp"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,IAAA,QAAA,SAAA;AACA,OAAA,UAAA,MAAA,cAAA;;IAEqBA,0B;;;;;;;;;;;;;gCAKP;AAAA,UAERE,IAFQ,GAAA,KAAA,IAAA;AAAA,UAAA,cAAA,GAAA,KAAA,QAAA;AAAA,UAGGC,SAHH,GAAA,cAAA,CAAA,SAAA;AAAA,UAGcC,OAHd,GAAA,cAAA,CAAA,OAAA;AAAA,UAGuBC,QAHvB,GAAA,cAAA,CAAA,QAAA;AAAA,UAGiCC,MAHjC,GAAA,cAAA,CAAA,MAAA;AAKV,UAAMC,CAAC,GAAGD,MAAM,CAACJ,IAAI,GAArB,QAAgB,CAAhB;AACA,WAAA,MAAA,GAAcM,IAAI,CAAA,SAAA,EAAA,OAAA,EAAlB,CAAkB,CAAlB;AACD;;;wBAXW;AACV,aAAO,KAAP,MAAA;AACD;;;;EAHqDP,U;;SAAnCD,0B","sourcesContent":["import {lerp} from 'math.gl';\nimport Transition from './transition';\n\nexport default class CPUInterpolationTransition extends Transition {\n  get value() {\n    return this._value;\n  }\n\n  _onUpdate() {\n    const {\n      time,\n      settings: {fromValue, toValue, duration, easing}\n    } = this;\n    const t = easing(time / duration);\n    this._value = lerp(fromValue, toValue, t);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}