{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { formatValue, assert } from '../utils';\nexport function getDebugTableForUniforms(_ref) {\n  var _ref$header = _ref.header,\n      header = _ref$header === void 0 ? 'Uniforms' : _ref$header,\n      program = _ref.program,\n      uniforms = _ref.uniforms,\n      _ref$undefinedOnly = _ref.undefinedOnly,\n      undefinedOnly = _ref$undefinedOnly === void 0 ? false : _ref$undefinedOnly;\n  assert(program);\n  var SHADER_MODULE_UNIFORM_REGEXP = '.*_.*';\n  var PROJECT_MODULE_UNIFORM_REGEXP = '.*Matrix';\n  var uniformLocations = program._uniformSetters;\n  var table = {};\n  var uniformNames = Object.keys(uniformLocations).sort();\n  var count = 0;\n\n  var _iterator = _createForOfIteratorHelper(uniformNames),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _uniformName = _step.value;\n\n      if (!_uniformName.match(SHADER_MODULE_UNIFORM_REGEXP) && !_uniformName.match(PROJECT_MODULE_UNIFORM_REGEXP)) {\n        if (addUniformToTable({\n          table: table,\n          header: header,\n          uniforms: uniforms,\n          uniformName: _uniformName,\n          undefinedOnly: undefinedOnly\n        })) {\n          count++;\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var _iterator2 = _createForOfIteratorHelper(uniformNames),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _uniformName2 = _step2.value;\n\n      if (_uniformName2.match(PROJECT_MODULE_UNIFORM_REGEXP)) {\n        if (addUniformToTable({\n          table: table,\n          header: header,\n          uniforms: uniforms,\n          uniformName: _uniformName2,\n          undefinedOnly: undefinedOnly\n        })) {\n          count++;\n        }\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  var _iterator3 = _createForOfIteratorHelper(uniformNames),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _uniformName3 = _step3.value;\n\n      if (!table[_uniformName3]) {\n        if (addUniformToTable({\n          table: table,\n          header: header,\n          uniforms: uniforms,\n          uniformName: _uniformName3,\n          undefinedOnly: undefinedOnly\n        })) {\n          count++;\n        }\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  var unusedCount = 0;\n  var unusedTable = {};\n\n  if (!undefinedOnly) {\n    for (var uniformName in uniforms) {\n      var uniform = uniforms[uniformName];\n\n      if (!table[uniformName]) {\n        unusedCount++;\n        unusedTable[uniformName] = _defineProperty({\n          Type: \"NOT USED: \".concat(uniform)\n        }, header, formatValue(uniform));\n      }\n    }\n  }\n\n  return {\n    table: table,\n    count: count,\n    unusedTable: unusedTable,\n    unusedCount: unusedCount\n  };\n}\n\nfunction addUniformToTable(_ref2) {\n  var table = _ref2.table,\n      header = _ref2.header,\n      uniforms = _ref2.uniforms,\n      uniformName = _ref2.uniformName,\n      undefinedOnly = _ref2.undefinedOnly;\n  var value = uniforms[uniformName];\n  var isDefined = isUniformDefined(value);\n\n  if (!undefinedOnly || !isDefined) {\n    var _table$uniformName;\n\n    table[uniformName] = (_table$uniformName = {}, _defineProperty(_table$uniformName, header, isDefined ? formatValue(value) : 'N/A'), _defineProperty(_table$uniformName, 'Uniform Type', isDefined ? value : 'NOT PROVIDED'), _table$uniformName);\n    return true;\n  }\n\n  return false;\n}\n\nfunction isUniformDefined(value) {\n  return value !== undefined && value !== null;\n}","map":{"version":3,"sources":["../../../src/debug/debug-uniforms.js"],"names":["header","program","uniforms","undefinedOnly","assert","SHADER_MODULE_UNIFORM_REGEXP","PROJECT_MODULE_UNIFORM_REGEXP","uniformLocations","table","uniformNames","Object","count","uniformName","addUniformToTable","unusedCount","unusedTable","uniform","Type","formatValue","value","isDefined","isUniformDefined"],"mappings":"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","sourcesContent":["import {formatValue, assert} from '../utils';\n\n// Prepares a table suitable for console.table\n/* eslint-disable max-statements, complexity */\nexport function getDebugTableForUniforms({\n  header = 'Uniforms',\n  program,\n  uniforms,\n  undefinedOnly = false\n}) {\n  assert(program);\n\n  const SHADER_MODULE_UNIFORM_REGEXP = '.*_.*';\n  const PROJECT_MODULE_UNIFORM_REGEXP = '.*Matrix'; // TODO - Use explicit list\n\n  const uniformLocations = program._uniformSetters;\n  const table = {}; // {[header]: {}};\n\n  // Add program's provided uniforms (in alphabetical order)\n  const uniformNames = Object.keys(uniformLocations).sort();\n\n  let count = 0;\n\n  // First add non-underscored uniforms (assumed not coming from shader modules)\n  for (const uniformName of uniformNames) {\n    if (\n      !uniformName.match(SHADER_MODULE_UNIFORM_REGEXP) &&\n      !uniformName.match(PROJECT_MODULE_UNIFORM_REGEXP)\n    ) {\n      if (addUniformToTable({table, header, uniforms, uniformName, undefinedOnly})) {\n        count++;\n      }\n    }\n  }\n\n  // add underscored uniforms (assumed from shader modules)\n  for (const uniformName of uniformNames) {\n    if (uniformName.match(PROJECT_MODULE_UNIFORM_REGEXP)) {\n      if (addUniformToTable({table, header, uniforms, uniformName, undefinedOnly})) {\n        count++;\n      }\n    }\n  }\n\n  for (const uniformName of uniformNames) {\n    if (!table[uniformName]) {\n      if (addUniformToTable({table, header, uniforms, uniformName, undefinedOnly})) {\n        count++;\n      }\n    }\n  }\n\n  // Create a table of unused uniforms\n  let unusedCount = 0;\n  const unusedTable = {};\n  if (!undefinedOnly) {\n    for (const uniformName in uniforms) {\n      const uniform = uniforms[uniformName];\n      if (!table[uniformName]) {\n        unusedCount++;\n        unusedTable[uniformName] = {\n          Type: `NOT USED: ${uniform}`,\n          [header]: formatValue(uniform)\n        };\n      }\n    }\n  }\n\n  return {table, count, unusedTable, unusedCount};\n}\n\n// Helper\nfunction addUniformToTable({table, header, uniforms, uniformName, undefinedOnly}) {\n  const value = uniforms[uniformName];\n  const isDefined = isUniformDefined(value);\n  if (!undefinedOnly || !isDefined) {\n    table[uniformName] = {\n      // Add program's unprovided uniforms\n      [header]: isDefined ? formatValue(value) : 'N/A',\n      'Uniform Type': isDefined ? value : 'NOT PROVIDED'\n    };\n    return true;\n  }\n  return false;\n}\n\nfunction isUniformDefined(value) {\n  return value !== undefined && value !== null;\n}\n"]},"metadata":{},"sourceType":"module"}