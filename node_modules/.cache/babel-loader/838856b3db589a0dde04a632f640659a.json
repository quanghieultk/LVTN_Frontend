{"ast":null,"code":"var _jsxFileName = \"D:\\\\LVTN\\\\LVTN\\\\cuisine-net\\\\src\\\\services\\\\gmap.js\";\n// import \"mapbox-gl/dist/mapbox-gl.css\";\n// import \"react-map-gl-geocoder/dist/mapbox-gl-geocoder.css\";\n// import React, { useState, useRef, useCallback, useEffect, Component } from \"react\";\n// import { useDispatch, useSelector } from 'react-redux';\n// import ReactMapGL, { Marker, NavigationControl, FullscreenControl } from \"react-map-gl\";\n// import Geocoder from \"react-map-gl-geocoder\";\n// import LocationOnIcon from '@material-ui/icons/LocationOn';\n// import DeckGL, { GeoJsonLayer } from 'deck.gl';\n// import { locationActions } from './../actions/location.actions';\n// // Please be a decent human and don't abuse my Mapbox API token.\n// // If you fork this sandbox, replace my API token with your own.\n// // Ways to set Mapbox token: https://uber.github.io/react-map-gl/#/Documentation/getting-started/about-mapbox-tokens\n// const MAPBOX_TOKEN =\n// \t// 'pk.eyJ1IjoidG9hbmRvIiwiYSI6ImNrbThscTh4cjBrNnQycHF5MWJqd29jaDQifQ.LNubsbmqGfZhCCRymL-A2g';\n// \t\"pk.eyJ1Ijoiam9obmJvcyIsImEiOiJjanl1b3l1MmkwaDdnM2pwaG5yNm1mZmlrIn0.O7X5QEcRO2ncLo_vLMVeTQ\";\n// export default function GMap() {\n// \t// const locate=useSelector(state=>state.location);\n// \tconst dispatch = useDispatch();\n// \tconst [viewport, setViewport] = useState({\n// \t\twidth: \"100%\",\n// \t\theight: \"100%\",\n// \t\tlatitude: 0,\n// \t\tlongitude: 0,\n// \t\tzoom: 15\n// \t});\n// \tconst [searchResultLayer, setSearchResultLayer] = useState(null);\n// \tconst [position, setPosition] = useState({\n// \t\tlatitude: 0,\n// \t\tlongitude: 0\n// \t})\n// \tconst navStyle = {\n// \t\tposition: \"absolute\",\n// \t\ttop: 36,\n// \t\tleft: 0,\n// \t\tpadding: \"10px\"\n// \t};\n// \tconst fullscreenControlStyle = {\n// \t\tposition: \"absolute\",\n// \t\ttop: 0,\n// \t\tleft: 0,\n// \t\tpadding: \"10px\"\n// \t};\n// \tconst mapRef = useRef();\n// \tconst geocoderContainerRef = useRef();\n// \tconst handleViewportChange = useCallback(\n// \t\t(newViewport) => setViewport(newViewport),\n// \t\t[]\n// \t);\n// \tconst handleGeocoderViewportChange = useCallback(\n// \t\t(newViewport) => {\n// \t\t\tconst geocoderDefaultOverrides = { transitionDuration: 1000 };\n// \t\t\treturn handleViewportChange({\n// \t\t\t\t...newViewport,\n// \t\t\t\t...geocoderDefaultOverrides\n// \t\t\t});\n// \t\t},\n// \t\t[]\n// \t);\n// \tfunction handleOnResult(event) {\n// \t\tsetSearchResultLayer(new GeoJsonLayer({\n// \t\t\tid: \"search-result\",\n// \t\t\tdata: event.result.geometry,\n// \t\t\tgetFillColor: [255, 0, 0, 128],\n// \t\t\tgetRadius: 1000,\n// \t\t\tpointRadiusMinPixels: 10\n// \t\t}))\n// \t}\n// \tuseEffect(() => {\n// \t\tnavigator.geolocation.getCurrentPosition(\n// \t\t\tfunction (position) {\n// \t\t\t\tsetViewport({\n// \t\t\t\t\tlatitude: position.coords.latitude,\n// \t\t\t\t\tlongitude: position.coords.longitude,\n// \t\t\t\t\tzoom: 15\n// \t\t\t\t})\n// \t\t\t\tsetPosition({\n// \t\t\t\t\tlatitude: position.coords.latitude,\n// \t\t\t\t\tlongitude: position.coords.longitude,\n// \t\t\t\t})\n// \t\t\t},\n// \t\t\tfunction (error) {\n// \t\t\t\tconsole.error(\"Error Code = \" + error.code + \" - \" + error.message);\n// \t\t\t}\n// \t\t);\n// \t}, []);\n// \treturn (\n// \t\t<div style={{ height: \"100%\" }}>\n// \t\t\t<ReactMapGL\n// \t\t\t\tref={mapRef}\n// \t\t\t\t{...viewport}\n// \t\t\t\twidth=\"100%\"\n// \t\t\t\theight=\"100%\"\n// \t\t\t\tonViewportChange={handleViewportChange}\n// \t\t\t\tmapboxApiAccessToken={MAPBOX_TOKEN}\n// \t\t\t>\n// \t\t\t\t<div className=\"nav\" style={navStyle}>\n// \t\t\t\t\t<NavigationControl />\n// \t\t\t\t</div>\n// \t\t\t\t<div className=\"fullscreen\" style={fullscreenControlStyle}>\n// \t\t\t\t\t<FullscreenControl />\n// \t\t\t\t</div>\n// \t\t\t\t<Geocoder\n// \t\t\t\t\t// limit={2}\n// \t\t\t\t\tmapRef={mapRef}\n// \t\t\t\t\tcontainerRef={geocoderContainerRef}\n// \t\t\t\t\tonViewportChange={handleGeocoderViewportChange}\n// \t\t\t\t\tmapboxApiAccessToken={MAPBOX_TOKEN}\n// \t\t\t\t\tposition=\"top-right\"\n// \t\t\t\t\t// onResult={(result)=>{dispatch(locationActions.setLocation(result.result.center,result.result.place_name));}}\n// \t\t\t\t\tonResult={handleOnResult}\n// \t\t\t\t/>\n// \t\t\t\t<Marker\n// \t\t\t\t\tkey=\"marker_1\"\n// \t\t\t\t\tlongitude={position.longitude}\n// \t\t\t\t\tlatitude={position.latitude}\n// \t\t\t\t>\n// \t\t\t\t\t<LocationOnIcon></LocationOnIcon>\n// \t\t\t\t</Marker>\n// \t\t\t</ReactMapGL>\n// \t\t</div>\n// \t);\n// };\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport \"react-map-gl-geocoder/dist/mapbox-gl-geocoder.css\";\nimport React, { Component } from \"react\";\nimport ReactMapGL from \"react-map-gl\";\nimport Geocoder from \"react-map-gl-geocoder\";\nimport { GeoJsonLayer } from \"deck.gl\";\nimport { connect } from \"react-redux\";\nimport { locationActions } from './../actions/location.actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Map extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      viewport: {\n        latitude: 37.7577,\n        longitude: -122.4376,\n        zoom: 8\n      },\n      searchResultLayer: null\n    };\n    this.mapRef = /*#__PURE__*/React.createRef();\n\n    this.handleViewportChange = viewport => {\n      this.setState({\n        viewport: { ...this.state.viewport,\n          ...viewport\n        }\n      });\n    };\n\n    this.handleGeocoderViewportChange = viewport => {\n      const geocoderDefaultOverrides = {\n        transitionDuration: 1000\n      };\n      return this.handleViewportChange({ ...viewport,\n        ...geocoderDefaultOverrides\n      });\n    };\n\n    this.handleOnResult = event => {\n      const {\n        dispatch\n      } = this.props;\n      dispatch(locationActions.setLocation(event.result.center, result.result.place_name));\n      this.setState({\n        searchResultLayer: new GeoJsonLayer({\n          id: \"search-result\",\n          data: event.result.geometry,\n          getFillColor: [255, 0, 0, 128],\n          getRadius: 1000,\n          pointRadiusMinPixels: 10,\n          pointRadiusMaxPixels: 10\n        })\n      });\n    };\n  }\n\n  render() {\n    const {\n      viewport\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(ReactMapGL, {\n      ref: this.mapRef,\n      mapboxApiAccessToken: \"pk.eyJ1IjoidG9hbmRvIiwiYSI6ImNrbThscTh4cjBrNnQycHF5MWJqd29jaDQifQ.LNubsbmqGfZhCCRymL-A2g\",\n      width: \"100%\",\n      height: \"100%\",\n      ...viewport,\n      onViewportChange: this.handleViewportChange,\n      children: /*#__PURE__*/_jsxDEV(Geocoder, {\n        id: \"ABC\",\n        mapRef: this.mapRef,\n        onResult: this.handleOnResult,\n        onViewportChange: this.handleGeocoderViewportChange,\n        mapboxApiAccessToken: \"pk.eyJ1IjoidG9hbmRvIiwiYSI6ImNrbThscTh4cjBrNnQycHF5MWJqd29jaDQifQ.LNubsbmqGfZhCCRymL-A2g\",\n        position: \"top-right\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nconst GMap = connect(null)(Map);\nexport default GMap;","map":{"version":3,"sources":["D:/LVTN/LVTN/cuisine-net/src/services/gmap.js"],"names":["React","Component","ReactMapGL","Geocoder","GeoJsonLayer","connect","locationActions","Map","state","viewport","latitude","longitude","zoom","searchResultLayer","mapRef","createRef","handleViewportChange","setState","handleGeocoderViewportChange","geocoderDefaultOverrides","transitionDuration","handleOnResult","event","dispatch","props","setLocation","result","center","place_name","id","data","geometry","getFillColor","getRadius","pointRadiusMinPixels","pointRadiusMaxPixels","render","GMap"],"mappingsmDAAP;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,SAASC,YAAT,QAA6B,SAA7B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,eAAT,QAAgC,+BAAhC;;;AAEA,MAAMC,GAAN,SAAkBN,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC3BO,KAD2B,GACnB;AACPC,MAAAA,QAAQ,EAAE;AACTC,QAAAA,QAAQ,EAAE,OADD;AAETC,QAAAA,SAAS,EAAE,CAAC,QAFH;AAGTC,QAAAA,IAAI,EAAE;AAHG,OADH;AAMPC,MAAAA,iBAAiB,EAAE;AANZ,KADmB;AAAA,SAU3BC,MAV2B,gBAUlBd,KAAK,CAACe,SAAN,EAVkB;;AAAA,SAY3BC,oBAZ2B,GAYJP,QAAQ,IAAI;AAClC,WAAKQ,QAAL,CAAc;AACbR,QAAAA,QAAQ,EAAE,EAAE,GAAG,KAAKD,KAAL,CAAWC,QAAhB;AAA0B,aAAGA;AAA7B;AADG,OAAd;AAGA,KAhB0B;;AAAA,SAiB3BS,4BAjB2B,GAiBIT,QAAQ,IAAI;AAC1C,YAAMU,wBAAwB,GAAG;AAAEC,QAAAA,kBAAkB,EAAE;AAAtB,OAAjC;AAEA,aAAO,KAAKJ,oBAAL,CAA0B,EAChC,GAAGP,QAD6B;AAEhC,WAAGU;AAF6B,OAA1B,CAAP;AAIA,KAxB0B;;AAAA,SA0B3BE,cA1B2B,GA0BVC,KAAK,IAAI;AACzB,YAAM;AAAEC,QAAAA;AAAF,UAAe,KAAKC,KAA1B;AACAD,MAAAA,QAAQ,CAACjB,eAAe,CAACmB,WAAhB,CAA4BH,KAAK,CAACI,MAAN,CAAaC,MAAzC,EAAgDD,MAAM,CAACA,MAAP,CAAcE,UAA9D,CAAD,CAAR;AACA,WAAKX,QAAL,CAAc;AACbJ,QAAAA,iBAAiB,EAAE,IAAIT,YAAJ,CAAiB;AACnCyB,UAAAA,EAAE,EAAE,eAD+B;AAEnCC,UAAAA,IAAI,EAAER,KAAK,CAACI,MAAN,CAAaK,QAFgB;AAGnCC,UAAAA,YAAY,EAAE,CAAC,GAAD,EAAM,CAAN,EAAS,CAAT,EAAY,GAAZ,CAHqB;AAInCC,UAAAA,SAAS,EAAE,IAJwB;AAKnCC,UAAAA,oBAAoB,EAAE,EALa;AAMnCC,UAAAA,oBAAoB,EAAE;AANa,SAAjB;AADN,OAAd;AAUA,KAvC0B;AAAA;;AAyC3BC,EAAAA,MAAM,GAAG;AACR,UAAM;AAAE3B,MAAAA;AAAF,QAAe,KAAKD,KAA1B;AACA,wBACC,QAAC,UAAD;AACC,MAAA,GAAG,EAAE,KAAKM,MADX;AAEC,MAAA,oBAAoB,EACnB,0FAHF;AAKC,MAAA,KAAK,EAAC,MALP;AAMC,MAAA,MAAM,EAAC,MANR;AAAA,SAOKL,QAPL;AAQC,MAAA,gBAAgB,EAAE,KAAKO,oBARxB;AAAA,6BAUC,QAAC,QAAD;AACC,QAAA,EAAE,EAAC,KADJ;AAEC,QAAA,MAAM,EAAE,KAAKF,MAFd;AAGC,QAAA,QAAQ,EAAE,KAAKO,cAHhB;AAIC,QAAA,gBAAgB,EAAE,KAAKH,4BAJxB;AAKC,QAAA,oBAAoB,EACnB,0FANF;AAQC,QAAA,QAAQ,EAAC;AARV;AAAA;AAAA;AAAA;AAAA;AAVD;AAAA;AAAA;AAAA;AAAA,YADD;AAuBA;;AAlE0B;;AAqE5B,MAAMmB,IAAI,GAAGhC,OAAO,CAAC,IAAD,CAAP,CAAcE,GAAd,CAAb;AACA,eAAe8B,IAAf","sourcesContent":["// import \"mapbox-gl/dist/mapbox-gl.css\";\r\n// import \"react-map-gl-geocoder/dist/mapbox-gl-geocoder.css\";\r\n// import React, { useState, useRef, useCallback, useEffect, Component } from \"react\";\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import ReactMapGL, { Marker, NavigationControl, FullscreenControl } from \"react-map-gl\";\r\n// import Geocoder from \"react-map-gl-geocoder\";\r\n// import LocationOnIcon from '@material-ui/icons/LocationOn';\r\n// import DeckGL, { GeoJsonLayer } from 'deck.gl';\r\n\r\n// import { locationActions } from './../actions/location.actions';\r\n// // Please be a decent human and don't abuse my Mapbox API token.\r\n// // If you fork this sandbox, replace my API token with your own.\r\n// // Ways to set Mapbox token: https://uber.github.io/react-map-gl/#/Documentation/getting-started/about-mapbox-tokens\r\n// const MAPBOX_TOKEN =\r\n// \t// 'pk.eyJ1IjoidG9hbmRvIiwiYSI6ImNrbThscTh4cjBrNnQycHF5MWJqd29jaDQifQ.LNubsbmqGfZhCCRymL-A2g';\r\n// \t\"pk.eyJ1Ijoiam9obmJvcyIsImEiOiJjanl1b3l1MmkwaDdnM2pwaG5yNm1mZmlrIn0.O7X5QEcRO2ncLo_vLMVeTQ\";\r\n\r\n// export default function GMap() {\r\n\r\n// \t// const locate=useSelector(state=>state.location);\r\n// \tconst dispatch = useDispatch();\r\n// \tconst [viewport, setViewport] = useState({\r\n// \t\twidth: \"100%\",\r\n// \t\theight: \"100%\",\r\n// \t\tlatitude: 0,\r\n// \t\tlongitude: 0,\r\n// \t\tzoom: 15\r\n// \t});\r\n// \tconst [searchResultLayer, setSearchResultLayer] = useState(null);\r\n// \tconst [position, setPosition] = useState({\r\n// \t\tlatitude: 0,\r\n// \t\tlongitude: 0\r\n// \t})\r\n// \tconst navStyle = {\r\n// \t\tposition: \"absolute\",\r\n// \t\ttop: 36,\r\n// \t\tleft: 0,\r\n// \t\tpadding: \"10px\"\r\n// \t};\r\n// \tconst fullscreenControlStyle = {\r\n// \t\tposition: \"absolute\",\r\n// \t\ttop: 0,\r\n// \t\tleft: 0,\r\n// \t\tpadding: \"10px\"\r\n// \t};\r\n// \tconst mapRef = useRef();\r\n// \tconst geocoderContainerRef = useRef();\r\n// \tconst handleViewportChange = useCallback(\r\n// \t\t(newViewport) => setViewport(newViewport),\r\n// \t\t[]\r\n// \t);\r\n\r\n// \tconst handleGeocoderViewportChange = useCallback(\r\n// \t\t(newViewport) => {\r\n// \t\t\tconst geocoderDefaultOverrides = { transitionDuration: 1000 };\r\n// \t\t\treturn handleViewportChange({\r\n// \t\t\t\t...newViewport,\r\n// \t\t\t\t...geocoderDefaultOverrides\r\n// \t\t\t});\r\n// \t\t},\r\n// \t\t[]\r\n// \t);\r\n// \tfunction handleOnResult(event) {\r\n// \t\tsetSearchResultLayer(new GeoJsonLayer({\r\n// \t\t\tid: \"search-result\",\r\n// \t\t\tdata: event.result.geometry,\r\n// \t\t\tgetFillColor: [255, 0, 0, 128],\r\n// \t\t\tgetRadius: 1000,\r\n// \t\t\tpointRadiusMinPixels: 10\r\n// \t\t}))\r\n// \t}\r\n\r\n// \tuseEffect(() => {\r\n// \t\tnavigator.geolocation.getCurrentPosition(\r\n// \t\t\tfunction (position) {\r\n// \t\t\t\tsetViewport({\r\n// \t\t\t\t\tlatitude: position.coords.latitude,\r\n// \t\t\t\t\tlongitude: position.coords.longitude,\r\n// \t\t\t\t\tzoom: 15\r\n// \t\t\t\t})\r\n// \t\t\t\tsetPosition({\r\n// \t\t\t\t\tlatitude: position.coords.latitude,\r\n// \t\t\t\t\tlongitude: position.coords.longitude,\r\n// \t\t\t\t})\r\n// \t\t\t},\r\n// \t\t\tfunction (error) {\r\n// \t\t\t\tconsole.error(\"Error Code = \" + error.code + \" - \" + error.message);\r\n// \t\t\t}\r\n// \t\t);\r\n// \t}, []);\r\n\r\n// \treturn (\r\n// \t\t<div style={{ height: \"100%\" }}>\r\n// \t\t\t<ReactMapGL\r\n// \t\t\t\tref={mapRef}\r\n// \t\t\t\t{...viewport}\r\n// \t\t\t\twidth=\"100%\"\r\n// \t\t\t\theight=\"100%\"\r\n// \t\t\t\tonViewportChange={handleViewportChange}\r\n// \t\t\t\tmapboxApiAccessToken={MAPBOX_TOKEN}\r\n\r\n// \t\t\t>\r\n// \t\t\t\t<div className=\"nav\" style={navStyle}>\r\n// \t\t\t\t\t<NavigationControl />\r\n// \t\t\t\t</div>\r\n// \t\t\t\t<div className=\"fullscreen\" style={fullscreenControlStyle}>\r\n// \t\t\t\t\t<FullscreenControl />\r\n// \t\t\t\t</div>\r\n// \t\t\t\t<Geocoder\r\n// \t\t\t\t\t// limit={2}\r\n// \t\t\t\t\tmapRef={mapRef}\r\n// \t\t\t\t\tcontainerRef={geocoderContainerRef}\r\n// \t\t\t\t\tonViewportChange={handleGeocoderViewportChange}\r\n// \t\t\t\t\tmapboxApiAccessToken={MAPBOX_TOKEN}\r\n// \t\t\t\t\tposition=\"top-right\"\r\n// \t\t\t\t\t// onResult={(result)=>{dispatch(locationActions.setLocation(result.result.center,result.result.place_name));}}\r\n// \t\t\t\t\tonResult={handleOnResult}\r\n// \t\t\t\t/>\r\n// \t\t\t\t<Marker\r\n// \t\t\t\t\tkey=\"marker_1\"\r\n// \t\t\t\t\tlongitude={position.longitude}\r\n// \t\t\t\t\tlatitude={position.latitude}\r\n// \t\t\t\t>\r\n// \t\t\t\t\t<LocationOnIcon></LocationOnIcon>\r\n// \t\t\t\t</Marker>\r\n// \t\t\t</ReactMapGL>\r\n// \t\t</div>\r\n// \t);\r\n// };\r\n\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport \"react-map-gl-geocoder/dist/mapbox-gl-geocoder.css\";\r\nimport React, { Component } from \"react\";\r\nimport ReactMapGL from \"react-map-gl\";\r\nimport Geocoder from \"react-map-gl-geocoder\";\r\nimport { GeoJsonLayer } from \"deck.gl\";\r\nimport { connect } from \"react-redux\";\r\nimport { locationActions } from './../actions/location.actions';\r\n\r\nclass Map extends Component {\r\n\tstate = {\r\n\t\tviewport: {\r\n\t\t\tlatitude: 37.7577,\r\n\t\t\tlongitude: -122.4376,\r\n\t\t\tzoom: 8\r\n\t\t},\r\n\t\tsearchResultLayer: null\r\n\t};\r\n\r\n\tmapRef = React.createRef();\r\n\r\n\thandleViewportChange = viewport => {\r\n\t\tthis.setState({\r\n\t\t\tviewport: { ...this.state.viewport, ...viewport }\r\n\t\t});\r\n\t};\r\n\thandleGeocoderViewportChange = viewport => {\r\n\t\tconst geocoderDefaultOverrides = { transitionDuration: 1000 };\r\n\r\n\t\treturn this.handleViewportChange({\r\n\t\t\t...viewport,\r\n\t\t\t...geocoderDefaultOverrides\r\n\t\t});\r\n\t};\r\n\r\n\thandleOnResult = event => {\r\n\t\tconst { dispatch } = this.props;\r\n\t\tdispatch(locationActions.setLocation(event.result.center,result.result.place_name))\r\n\t\tthis.setState({\r\n\t\t\tsearchResultLayer: new GeoJsonLayer({\r\n\t\t\t\tid: \"search-result\",\r\n\t\t\t\tdata: event.result.geometry,\r\n\t\t\t\tgetFillColor: [255, 0, 0, 128],\r\n\t\t\t\tgetRadius: 1000,\r\n\t\t\t\tpointRadiusMinPixels: 10,\r\n\t\t\t\tpointRadiusMaxPixels: 10\r\n\t\t\t})\r\n\t\t});\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { viewport } = this.state;\r\n\t\treturn (\r\n\t\t\t<ReactMapGL\r\n\t\t\t\tref={this.mapRef}\r\n\t\t\t\tmapboxApiAccessToken={\r\n\t\t\t\t\t\"pk.eyJ1IjoidG9hbmRvIiwiYSI6ImNrbThscTh4cjBrNnQycHF5MWJqd29jaDQifQ.LNubsbmqGfZhCCRymL-A2g\"\r\n\t\t\t\t}\r\n\t\t\t\twidth=\"100%\"\r\n\t\t\t\theight=\"100%\"\r\n\t\t\t\t{...viewport}\r\n\t\t\t\tonViewportChange={this.handleViewportChange}\r\n\t\t\t>\r\n\t\t\t\t<Geocoder\r\n\t\t\t\t\tid=\"ABC\"\r\n\t\t\t\t\tmapRef={this.mapRef}\r\n\t\t\t\t\tonResult={this.handleOnResult}\r\n\t\t\t\t\tonViewportChange={this.handleGeocoderViewportChange}\r\n\t\t\t\t\tmapboxApiAccessToken={\r\n\t\t\t\t\t\t\"pk.eyJ1IjoidG9hbmRvIiwiYSI6ImNrbThscTh4cjBrNnQycHF5MWJqd29jaDQifQ.LNubsbmqGfZhCCRymL-A2g\"\r\n\t\t\t\t\t}\r\n\t\t\t\t\tposition=\"top-right\"\r\n\t\t\t\t/>\r\n\t\t\t</ReactMapGL>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst GMap = connect(null)(Map);\r\nexport default GMap;\r\n"]},"metadata":{},"sourceType":"module"}