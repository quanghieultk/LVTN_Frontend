{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport Point from '@mapbox/point-geometry';\n\nvar VectorTileFeature = function () {\n  _createClass(VectorTileFeature, null, [{\n    key: \"types\",\n    get: function get() {\n      return ['Unknown', 'Point', 'LineString', 'Polygon'];\n    }\n  }]);\n\n  function VectorTileFeature(pbf, end, extent, keys, values) {\n    _classCallCheck(this, VectorTileFeature);\n\n    this.properties = {};\n    this.extent = extent;\n    this.type = 0;\n    this._pbf = pbf;\n    this._geometry = -1;\n    this._keys = keys;\n    this._values = values;\n    pbf.readFields(readFeature, this, end);\n  }\n\n  _createClass(VectorTileFeature, [{\n    key: \"loadGeometry\",\n    value: function loadGeometry() {\n      var pbf = this._pbf;\n      pbf.pos = this._geometry;\n      var end = pbf.readVarint() + pbf.pos;\n      var cmd = 1;\n      var length = 0;\n      var x = 0;\n      var y = 0;\n      var lines = [];\n      var line;\n\n      while (pbf.pos < end) {\n        if (length <= 0) {\n          var cmdLen = pbf.readVarint();\n          cmd = cmdLen & 0x7;\n          length = cmdLen >> 3;\n        }\n\n        length--;\n\n        if (cmd === 1 || cmd === 2) {\n          x += pbf.readSVarint();\n          y += pbf.readSVarint();\n\n          if (cmd === 1) {\n            if (line) lines.push(line);\n            line = [];\n          }\n\n          line.push(new Point(x, y));\n        } else if (cmd === 7) {\n          if (line) {\n            line.push(line[0].clone());\n          }\n        } else {\n          throw new Error(\"unknown command \".concat(cmd));\n        }\n      }\n\n      if (line) lines.push(line);\n      return lines;\n    }\n  }, {\n    key: \"bbox\",\n    value: function bbox() {\n      var pbf = this._pbf;\n      pbf.pos = this._geometry;\n      var end = pbf.readVarint() + pbf.pos;\n      var cmd = 1;\n      var length = 0;\n      var x = 0;\n      var y = 0;\n      var x1 = Infinity;\n      var x2 = -Infinity;\n      var y1 = Infinity;\n      var y2 = -Infinity;\n\n      while (pbf.pos < end) {\n        if (length <= 0) {\n          var cmdLen = pbf.readVarint();\n          cmd = cmdLen & 0x7;\n          length = cmdLen >> 3;\n        }\n\n        length--;\n\n        if (cmd === 1 || cmd === 2) {\n          x += pbf.readSVarint();\n          y += pbf.readSVarint();\n          if (x < x1) x1 = x;\n          if (x > x2) x2 = x;\n          if (y < y1) y1 = y;\n          if (y > y2) y2 = y;\n        } else if (cmd !== 7) {\n          throw new Error(\"unknown command \".concat(cmd));\n        }\n      }\n\n      return [x1, y1, x2, y2];\n    }\n  }, {\n    key: \"toGeoJSON\",\n    value: function toGeoJSON(x, y, z) {\n      var size = this.extent * Math.pow(2, z);\n      var x0 = this.extent * x;\n      var y0 = this.extent * y;\n      var coords = this.loadGeometry();\n      var type = VectorTileFeature.types[this.type];\n      var i;\n      var j;\n\n      function project(line) {\n        for (var _j = 0; _j < line.length; _j++) {\n          var p = line[_j];\n          var y2 = 180 - (p.y + y0) * 360 / size;\n          line[_j] = [(p.x + x0) * 360 / size - 180, 360 / Math.PI * Math.atan(Math.exp(y2 * Math.PI / 180)) - 90];\n        }\n      }\n\n      switch (this.type) {\n        case 1:\n          var points = [];\n\n          for (i = 0; i < coords.length; i++) {\n            points[i] = coords[i][0];\n          }\n\n          coords = points;\n          project(coords);\n          break;\n\n        case 2:\n          for (i = 0; i < coords.length; i++) {\n            project(coords[i]);\n          }\n\n          break;\n\n        case 3:\n          coords = classifyRings(coords);\n\n          for (i = 0; i < coords.length; i++) {\n            for (j = 0; j < coords[i].length; j++) {\n              project(coords[i][j]);\n            }\n          }\n\n          break;\n      }\n\n      if (coords.length === 1) {\n        coords = coords[0];\n      } else {\n        type = \"Multi\".concat(type);\n      }\n\n      var result = {\n        type: 'Feature',\n        geometry: {\n          type: type,\n          coordinates: coords\n        },\n        properties: this.properties\n      };\n\n      if ('id' in this) {}\n\n      return result;\n    }\n  }]);\n\n  return VectorTileFeature;\n}();\n\nexport { VectorTileFeature as default };\n\nfunction classifyRings(rings) {\n  var len = rings.length;\n  if (len <= 1) return [rings];\n  var polygons = [];\n  var polygon;\n  var ccw;\n\n  for (var i = 0; i < len; i++) {\n    var area = signedArea(rings[i]);\n    if (area === 0) continue;\n    if (ccw === undefined) ccw = area < 0;\n\n    if (ccw === area < 0) {\n      if (polygon) polygons.push(polygon);\n      polygon = [rings[i]];\n    } else {\n      polygon.push(rings[i]);\n    }\n  }\n\n  if (polygon) polygons.push(polygon);\n  return polygons;\n}\n\nfunction signedArea(ring) {\n  var sum = 0;\n\n  for (var i = 0, j = ring.length - 1, p1, p2; i < ring.length; j = i++) {\n    p1 = ring[i];\n    p2 = ring[j];\n    sum += (p2.x - p1.x) * (p1.y + p2.y);\n  }\n\n  return sum;\n}\n\nfunction readFeature(tag, feature, pbf) {\n  if (tag === 1) feature.id = pbf.readVarint();else if (tag === 2) readTag(pbf, feature);else if (tag === 3) feature.type = pbf.readVarint();else if (tag === 4) feature._geometry = pbf.pos;\n}\n\nfunction readTag(pbf, feature) {\n  var end = pbf.readVarint() + pbf.pos;\n\n  while (pbf.pos < end) {\n    var key = feature._keys[pbf.readVarint()];\n\n    var value = feature._values[pbf.readVarint()];\n\n    feature.properties[key] = value;\n  }\n}","map":{"version":3,"sources":["../../../../src/lib/mapbox-vector-tile/vector-tile-feature.js"],"names":["VectorTileFeature","pbf","end","cmd","length","x","y","lines","cmdLen","line","x1","x2","y1","y2","z","size","Math","x0","y0","coords","type","j","p","points","i","project","classifyRings","result","geometry","coordinates","properties","len","rings","polygons","area","signedArea","ccw","polygon","sum","ring","p1","p2","tag","feature","readTag","key","value"],"mappings":"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","sourcesContent":["// This code is forked from https://github.com/mapbox/vector-tile-js under BSD 3-clause license.\n/* eslint-disable */\nimport Point from '@mapbox/point-geometry';\n\nexport default class VectorTileFeature {\n  static get types() {\n    return ['Unknown', 'Point', 'LineString', 'Polygon'];\n  }\n\n  constructor(pbf, end, extent, keys, values) {\n    // Public\n    this.properties = {};\n    this.extent = extent;\n    this.type = 0;\n\n    // Private\n    this._pbf = pbf;\n    this._geometry = -1;\n    this._keys = keys;\n    this._values = values;\n\n    pbf.readFields(readFeature, this, end);\n  }\n\n  // eslint-disable-next-line complexity, max-statements\n  loadGeometry() {\n    const pbf = this._pbf;\n    pbf.pos = this._geometry;\n\n    const end = pbf.readVarint() + pbf.pos;\n    let cmd = 1;\n    let length = 0;\n    let x = 0;\n    let y = 0;\n    const lines = [];\n    let line;\n\n    while (pbf.pos < end) {\n      if (length <= 0) {\n        const cmdLen = pbf.readVarint();\n        cmd = cmdLen & 0x7;\n        length = cmdLen >> 3;\n      }\n\n      length--;\n\n      if (cmd === 1 || cmd === 2) {\n        x += pbf.readSVarint();\n        y += pbf.readSVarint();\n\n        if (cmd === 1) {\n          // moveTo\n          if (line) lines.push(line);\n          line = [];\n        }\n        // @ts-ignore\n        line.push(new Point(x, y));\n      } else if (cmd === 7) {\n        // Workaround for https://github.com/mapbox/mapnik-vector-tile/issues/90\n        if (line) {\n          line.push(line[0].clone()); // closePolygon\n        }\n      } else {\n        throw new Error(`unknown command ${cmd}`);\n      }\n    }\n\n    if (line) lines.push(line);\n\n    return lines;\n  }\n\n  // eslint-disable-next-line max-statements\n  bbox() {\n    const pbf = this._pbf;\n    pbf.pos = this._geometry;\n\n    const end = pbf.readVarint() + pbf.pos;\n    let cmd = 1;\n    let length = 0;\n    let x = 0;\n    let y = 0;\n    let x1 = Infinity;\n    let x2 = -Infinity;\n    let y1 = Infinity;\n    let y2 = -Infinity;\n\n    while (pbf.pos < end) {\n      if (length <= 0) {\n        const cmdLen = pbf.readVarint();\n        cmd = cmdLen & 0x7;\n        length = cmdLen >> 3;\n      }\n\n      length--;\n\n      if (cmd === 1 || cmd === 2) {\n        x += pbf.readSVarint();\n        y += pbf.readSVarint();\n        if (x < x1) x1 = x;\n        if (x > x2) x2 = x;\n        if (y < y1) y1 = y;\n        if (y > y2) y2 = y;\n      } else if (cmd !== 7) {\n        throw new Error(`unknown command ${cmd}`);\n      }\n    }\n\n    return [x1, y1, x2, y2];\n  }\n\n  toGeoJSON(x, y, z) {\n    const size = this.extent * Math.pow(2, z);\n    const x0 = this.extent * x;\n    const y0 = this.extent * y;\n    let coords = this.loadGeometry();\n    let type = VectorTileFeature.types[this.type];\n    let i;\n    let j;\n\n    function project(line) {\n      for (let j = 0; j < line.length; j++) {\n        const p = line[j];\n        const y2 = 180 - ((p.y + y0) * 360) / size;\n        line[j] = [\n          ((p.x + x0) * 360) / size - 180,\n          (360 / Math.PI) * Math.atan(Math.exp((y2 * Math.PI) / 180)) - 90\n        ];\n      }\n    }\n\n    switch (this.type) {\n      case 1:\n        var points = [];\n        for (i = 0; i < coords.length; i++) {\n          points[i] = coords[i][0];\n        }\n        coords = points;\n        project(coords);\n        break;\n\n      case 2:\n        for (i = 0; i < coords.length; i++) {\n          project(coords[i]);\n        }\n        break;\n\n      case 3:\n        coords = classifyRings(coords);\n        for (i = 0; i < coords.length; i++) {\n          for (j = 0; j < coords[i].length; j++) {\n            project(coords[i][j]);\n          }\n        }\n        break;\n    }\n\n    if (coords.length === 1) {\n      coords = coords[0];\n    } else {\n      type = `Multi${type}`;\n    }\n\n    const result = {\n      type: 'Feature',\n      geometry: {\n        type,\n        coordinates: coords\n      },\n      properties: this.properties\n    };\n\n    if ('id' in this) {\n      // @ts-igore\n      // result.id = this.id;\n    }\n\n    return result;\n  }\n}\n\n/**\n * Classifies an array of rings into polygons with outer rings and holes\n */\n\nfunction classifyRings(rings) {\n  const len = rings.length;\n\n  if (len <= 1) return [rings];\n\n  const polygons = [];\n  let polygon;\n  let ccw;\n\n  for (let i = 0; i < len; i++) {\n    const area = signedArea(rings[i]);\n    if (area === 0) continue;\n\n    if (ccw === undefined) ccw = area < 0;\n\n    if (ccw === area < 0) {\n      if (polygon) polygons.push(polygon);\n      polygon = [rings[i]];\n    } else {\n      // @ts-ignore\n      polygon.push(rings[i]);\n    }\n  }\n  if (polygon) polygons.push(polygon);\n\n  return polygons;\n}\n\nfunction signedArea(ring) {\n  let sum = 0;\n  for (let i = 0, j = ring.length - 1, p1, p2; i < ring.length; j = i++) {\n    p1 = ring[i];\n    p2 = ring[j];\n    sum += (p2.x - p1.x) * (p1.y + p2.y);\n  }\n  return sum;\n}\n\nfunction readFeature(tag, feature, pbf) {\n  if (tag === 1) feature.id = pbf.readVarint();\n  else if (tag === 2) readTag(pbf, feature);\n  else if (tag === 3) feature.type = pbf.readVarint();\n  else if (tag === 4) feature._geometry = pbf.pos;\n}\n\nfunction readTag(pbf, feature) {\n  const end = pbf.readVarint() + pbf.pos;\n\n  while (pbf.pos < end) {\n    const key = feature._keys[pbf.readVarint()];\n    const value = feature._values[pbf.readVarint()];\n    feature.properties[key] = value;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}