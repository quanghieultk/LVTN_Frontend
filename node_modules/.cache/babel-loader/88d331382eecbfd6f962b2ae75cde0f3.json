{"ast":null,"code":"import { message } from 'antd';\nimport { chatConstants } from '../constants/chat.constants';\nimport { history } from '../helpers/history';\nimport { chatService } from \"../services/chat.service\";\nimport { userService } from '../services/user.service';\nexport const chatAction = {\n  typing,\n  stoppedTyping,\n  changeRoom,\n  getChatRooms,\n  getMessagesForRoom,\n  sendMessage,\n  sendImage,\n  newMessage,\n  readMessages,\n  changeActivityStatus,\n  imageMessageRequest,\n  call,\n  answer,\n  endCall,\n  endAnsweringCall,\n  searchUsers,\n  resetMessageCount\n};\n\nfunction typing(roomId) {\n  return dispatch => {\n    dispatch({\n      type: chatConstants.TYPING,\n      roomId\n    });\n  };\n}\n\nfunction stoppedTyping(roomId) {\n  return dispatch => {\n    dispatch({\n      type: chatConstants.STOPPED_TYPING,\n      roomId\n    });\n  };\n}\n\nfunction initiateMessageArray(roomId) {\n  return {\n    type: chatConstants.INIT_MESSAGE_ARRAY,\n    roomId\n  };\n}\n\nfunction changeRoom(room, clearRoom) {\n  return dispatch => {\n    dispatch({\n      type: chatConstants.CHANGE_ROOM,\n      room,\n      clearRoom\n    });\n  };\n}\n\nfunction readMessages(params) {\n  const {\n    messageIds,\n    roomId\n  } = params;\n  return dispatch => {\n    dispatch(read(messageIds, roomId));\n    chatService.readMessages(params).then(() => {}, error => {\n      console.log(error);\n    });\n  };\n\n  function read(messageIds, roomId) {\n    return {\n      type: chatConstants.READ_MESSAGES,\n      messageIds,\n      roomId\n    };\n  }\n}\n\nfunction sendMessage(message) {\n  return dispatch => {\n    dispatch(request({ ...message,\n      sent: false\n    }));\n    chatService.sendMessage(message).then(response => {\n      dispatch(success(response.data.data.data));\n      console.log(response);\n    }, error => {\n      console.log(error);\n    });\n  };\n\n  function request(message) {\n    return {\n      type: chatConstants.SEND_MESSAGE_REQUEST,\n      message\n    };\n  }\n\n  function success(message) {\n    return {\n      type: chatConstants.SEND_MESSAGE_SUCCESS,\n      message\n    };\n  }\n}\n\nfunction getChatRooms() {\n  return dispatch => {\n    dispatch(request());\n    chatService.getChatRooms().then(response => {\n      dispatch(success(response.data.rooms));\n      response.data.rooms.forEach(room => dispatch(initiateMessageArray(room._id)));\n    }, error => {\n      console.log(error);\n    });\n  };\n\n  function request() {\n    return {\n      type: chatConstants.GET_ROOMS_REQUEST\n    };\n  }\n\n  function success(rooms) {\n    return {\n      type: chatConstants.GET_ROOMS_SUCCESS,\n      rooms\n    };\n  }\n}\n\nfunction changeActivityStatus(user) {\n  return dispatch => {\n    dispatch({\n      type: chatConstants.CHANGE_ACTIVITY_STATUS,\n      user\n    });\n  };\n}\n\nfunction getMessagesForRoom(room) {\n  return dispatch => {\n    if (room.initialFetch) {\n      dispatch(initialRequest(room._id));\n    } else {\n      dispatch(request(room._id));\n    }\n\n    chatService.getMessagesForRoom(room).then(response => {\n      dispatch(success({\n        messages: response.data.data.data.reverse(),\n        roomId: room._id\n      })); //send read \n\n      let messageIdList = [];\n      response.data.data.data.forEach(ele => {\n        if (ele.read == false) messageIdList.push(ele._id);\n      });\n      chatService.readMessages({\n        roomId: room._id,\n        messageIds: messageIdList\n      });\n    }, error => {\n      console.log(error);\n    });\n  };\n\n  function request(roomId) {\n    return {\n      type: chatConstants.GET_MESSAGES_REQUEST,\n      roomId\n    };\n  }\n\n  function initialRequest(roomId) {\n    return {\n      type: chatConstants.GET_MESSAGES_INITIAL_REQUEST,\n      roomId\n    };\n  }\n\n  function success(data) {\n    return {\n      type: chatConstants.GET_MESSAGES_SUCCESS,\n      data\n    };\n  }\n}\n\nfunction sendImage(data, message) {\n  return dispatch => {\n    dispatch(request({ ...message,\n      sent: false\n    }));\n    chatService.sendImage(data).then(response => {\n      dispatch(success(response.message));\n    }, error => {\n      console.log(error);\n    });\n  };\n\n  function request(message) {\n    return {\n      type: chatConstants.SEND_MESSAGE_REQUEST,\n      message\n    };\n  }\n\n  function success(message) {\n    return {\n      type: chatConstants.SEND_MESSAGE_SUCCESS,\n      message\n    };\n  }\n}\n\nfunction newMessage(message) {\n  return dispatch => {\n    if (window.location.pathname != \"/message\") dispatch({\n      type: chatConstants.INC_MESSAGE_COUNT\n    });else {\n      dispatch(success(message));\n    }\n  };\n\n  function success(message) {\n    return {\n      type: chatConstants.NEW_MESSAGE,\n      message\n    };\n  }\n}\n\nfunction resetMessageCount() {\n  return dispatch => {\n    dispatch({\n      type: chatConstants.RESET_MESSAGE_COUNT\n    });\n  };\n}\n\nfunction imageMessageRequest(message) {\n  return dispatch => {\n    dispatch(success(message));\n  };\n\n  function success(message) {\n    return {\n      type: chatConstants.NEW_IMAGE_MESSAGE_REQUEST,\n      message\n    };\n  }\n}\n\nfunction call(data) {\n  return dispatch => {\n    dispatch({\n      type: chatConstants.OPEN_CALLING_MODAL\n    });\n    chatService.call(data).then(() => {}, error => {\n      console.log(error);\n    });\n  };\n}\n\nfunction answer(data) {\n  return dispatch => {\n    chatService.answer(data).then(() => {}, error => {\n      console.log(error);\n    });\n  };\n}\n\nfunction endCall() {\n  return dispatch => {\n    dispatch({\n      type: chatConstants.CLOSE_CALLING_MODAL\n    });\n  };\n}\n\nfunction endAnsweringCall() {\n  return dispatch => {\n    dispatch({\n      type: chatConstants.CLOSE_ANSWERING_MODAL\n    });\n  };\n}\n\nfunction searchUsers(rooms) {\n  return dispatch => {\n    dispatch({\n      type: chatConstants.SEARCH_USERS,\n      rooms\n    });\n  };\n}","map":{"version":3,"sources":["D:/LVTN/LVTN/cuisine-net/src/actions/chat.action.js"],"names":["message","chatConstants","history","chatService","userService","chatAction","typing","stoppedTyping","changeRoom","getChatRooms","getMessagesForRoom","sendMessage","sendImage","newMessage","readMessages","changeActivityStatus","imageMessageRequest","call","answer","endCall","endAnsweringCall","searchUsers","resetMessageCount","roomId","dispatch","type","TYPING","STOPPED_TYPING","initiateMessageArray","INIT_MESSAGE_ARRAY","room","clearRoom","CHANGE_ROOM","params","messageIds","read","then","error","console","log","READ_MESSAGES","request","sent","response","success","data","SEND_MESSAGE_REQUEST","SEND_MESSAGE_SUCCESS","rooms","forEach","_id","GET_ROOMS_REQUEST","GET_ROOMS_SUCCESS","user","CHANGE_ACTIVITY_STATUS","initialFetch","initialRequest","messages","reverse","messageIdList","ele","push","GET_MESSAGES_REQUEST","GET_MESSAGES_INITIAL_REQUEST","GET_MESSAGES_SUCCESS","window","location","pathname","INC_MESSAGE_COUNT","NEW_MESSAGE","RESET_MESSAGE_COUNT","NEW_IMAGE_MESSAGE_REQUEST","OPEN_CALLING_MODAL","CLOSE_CALLING_MODAL","CLOSE_ANSWERING_MODAL","SEARCH_USERS"],"mappings":"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","sourcesContent":["import { message } from 'antd';\r\nimport { chatConstants } from '../constants/chat.constants'\r\nimport { history } from '../helpers/history';\r\nimport { chatService } from \"../services/chat.service\";\r\nimport { userService } from '../services/user.service';\r\n\r\nexport const chatAction = {\r\n    typing,\r\n    stoppedTyping,\r\n    changeRoom,\r\n    getChatRooms,\r\n    getMessagesForRoom,\r\n    sendMessage,\r\n    sendImage,\r\n    newMessage,\r\n    readMessages,\r\n    changeActivityStatus,\r\n    imageMessageRequest,\r\n    call,\r\n    answer,\r\n    endCall,\r\n    endAnsweringCall,\r\n    searchUsers,\r\n    resetMessageCount\r\n}\r\n\r\n\r\nfunction typing(roomId) {\r\n    return dispatch => {\r\n        dispatch({ type: chatConstants.TYPING, roomId });\r\n    };\r\n}\r\n\r\nfunction stoppedTyping(roomId) {\r\n    return dispatch => {\r\n        dispatch({ type: chatConstants.STOPPED_TYPING, roomId });\r\n    };\r\n}\r\nfunction initiateMessageArray(roomId) {\r\n    return { type: chatConstants.INIT_MESSAGE_ARRAY, roomId };\r\n}\r\n\r\nfunction changeRoom(room, clearRoom) {\r\n    return dispatch => {\r\n        dispatch({ type: chatConstants.CHANGE_ROOM, room, clearRoom })\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction readMessages(params) {\r\n    const { messageIds, roomId } = params;\r\n    return dispatch => {\r\n        dispatch(read(messageIds, roomId));\r\n        chatService.readMessages(params).then(\r\n            () => { },\r\n            error => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    };\r\n    function read(messageIds, roomId) {\r\n        return { type: chatConstants.READ_MESSAGES, messageIds, roomId };\r\n    }\r\n}\r\n\r\nfunction sendMessage(message) {\r\n    return dispatch => {\r\n        dispatch(request({ ...message, sent: false }));\r\n        chatService.sendMessage(message).then(\r\n            response => {\r\n                dispatch(success(response.data.data.data));\r\n                console.log(response)\r\n            },\r\n            error => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    };\r\n\r\n    function request(message) {\r\n        return { type: chatConstants.SEND_MESSAGE_REQUEST, message };\r\n    }\r\n\r\n    function success(message) {\r\n        return { type: chatConstants.SEND_MESSAGE_SUCCESS, message };\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction getChatRooms() {\r\n    return dispatch => {\r\n        dispatch(request());\r\n\r\n        chatService.getChatRooms().then(\r\n            response => {\r\n                dispatch(success(response.data.rooms));\r\n                response.data.rooms.forEach(room =>\r\n                    dispatch(initiateMessageArray(room._id))\r\n                );\r\n            },\r\n            error => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    };\r\n    function request() {\r\n        return { type: chatConstants.GET_ROOMS_REQUEST };\r\n    }\r\n    function success(rooms) {\r\n        return { type: chatConstants.GET_ROOMS_SUCCESS, rooms };\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction changeActivityStatus(user) {\r\n    return dispatch => {\r\n        dispatch({ type: chatConstants.CHANGE_ACTIVITY_STATUS, user });\r\n    };\r\n}\r\n\r\n\r\nfunction getMessagesForRoom(room) {\r\n    return dispatch => {\r\n        if (room.initialFetch) {\r\n            dispatch(initialRequest(room._id));\r\n        } else {\r\n            dispatch(request(room._id));\r\n        }\r\n        chatService.getMessagesForRoom(room).then(\r\n            response => {\r\n                dispatch(\r\n                    success({ messages: response.data.data.data.reverse(), roomId: room._id })\r\n                );\r\n                //send read \r\n                let messageIdList=[];\r\n                response.data.data.data.forEach(ele=>{\r\n                    if(ele.read==false)\r\n                        messageIdList.push(ele._id)\r\n                })\r\n                chatService.readMessages({roomId: room._id,messageIds: messageIdList})\r\n            },\r\n            error => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    };\r\n    function request(roomId) {\r\n        return { type: chatConstants.GET_MESSAGES_REQUEST, roomId };\r\n    }\r\n    function initialRequest(roomId) {\r\n        return { type: chatConstants.GET_MESSAGES_INITIAL_REQUEST, roomId };\r\n    }\r\n    function success(data) {\r\n        return { type: chatConstants.GET_MESSAGES_SUCCESS, data };\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction sendImage(data, message) {\r\n    return dispatch => {\r\n        dispatch(request({ ...message, sent: false }));\r\n\r\n        chatService.sendImage(data).then(\r\n            response => {\r\n                dispatch(success(response.message));\r\n            },\r\n            error => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    };\r\n    function request(message) {\r\n        return { type: chatConstants.SEND_MESSAGE_REQUEST, message };\r\n    }\r\n    function success(message) {\r\n        return { type: chatConstants.SEND_MESSAGE_SUCCESS, message };\r\n    }\r\n}\r\n\r\nfunction newMessage(message) {\r\n    return dispatch => {\r\n        if (window.location.pathname != \"/message\")\r\n            dispatch({ type: chatConstants.INC_MESSAGE_COUNT });\r\n        else {\r\n            dispatch(success(message));\r\n        }\r\n    };\r\n    function success(message) {\r\n        return { type: chatConstants.NEW_MESSAGE, message };\r\n    }\r\n}\r\n\r\nfunction resetMessageCount(){\r\n    return dispatch=>{\r\n        dispatch({type: chatConstants.RESET_MESSAGE_COUNT});\r\n    }\r\n}\r\n\r\nfunction imageMessageRequest(message) {\r\n    return dispatch => {\r\n        dispatch(success(message));\r\n    };\r\n    function success(message) {\r\n        return { type: chatConstants.NEW_IMAGE_MESSAGE_REQUEST, message };\r\n    }\r\n}\r\n\r\nfunction call(data) {\r\n    return dispatch => {\r\n        dispatch({ type: chatConstants.OPEN_CALLING_MODAL });\r\n\r\n        chatService.call(data).then(\r\n            () => { },\r\n            error => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    };\r\n}\r\n\r\nfunction answer(data) {\r\n    return dispatch => {\r\n        chatService.answer(data).then(\r\n            () => { },\r\n            error => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    };\r\n}\r\n\r\nfunction endCall() {\r\n    return dispatch => {\r\n        dispatch({ type: chatConstants.CLOSE_CALLING_MODAL });\r\n    };\r\n}\r\n\r\nfunction endAnsweringCall() {\r\n    return dispatch => {\r\n        dispatch({ type: chatConstants.CLOSE_ANSWERING_MODAL });\r\n    };\r\n}\r\n\r\nfunction searchUsers(rooms) {\r\n    return dispatch => {\r\n        dispatch({ type: chatConstants.SEARCH_USERS, rooms });\r\n    };\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}