{"ast":null,"code":"var _jsxFileName = \"D:\\\\LVTN\\\\LVTN\\\\cuisine-net\\\\src\\\\services\\\\gmap.js\";\nimport React, { Component } from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport Autocomplete from 'react-google-autocomplete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nGeocode.setApiKey('');\nGeocode.enableDebug();\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getCity = addressArray => {\n      let city = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n          city = addressArray[i].long_name;\n          return city;\n        }\n      }\n    };\n\n    this.getArea = addressArray => {\n      let area = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0]) {\n          for (let j = 0; j < addressArray[i].types.length; j++) {\n            if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n              area = addressArray[i].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    };\n\n    this.getState = addressArray => {\n      let state = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        for (let i = 0; i < addressArray.length; i++) {\n          if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n            state = addressArray[i].long_name;\n            return state;\n          }\n        }\n      }\n    };\n\n    this.onChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.onInfoWindowClose = event => {};\n\n    this.onMarkerDragEnd = event => {\n      let newLat = event.latLng.lat(),\n          newLng = event.latLng.lng();\n      Geocode.fromLatLng(newLat, newLng).then(response => {\n        const address = response.results[0].formatted_address,\n              addressArray = response.results[0].address_components,\n              city = this.getCity(addressArray),\n              area = this.getArea(addressArray),\n              state = this.getState(addressArray);\n        this.setState({\n          address: address ? address : '',\n          area: area ? area : '',\n          city: city ? city : '',\n          state: state ? state : '',\n          markerPosition: {\n            lat: newLat,\n            lng: newLng\n          },\n          mapPosition: {\n            lat: newLat,\n            lng: newLng\n          }\n        });\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.onPlaceSelected = place => {\n      console.log('plc', place);\n      const address = place.formatted_address,\n            addressArray = place.address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray),\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng(); // Set these values in the state.\n\n      this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : '',\n        markerPosition: {\n          lat: latValue,\n          lng: lngValue\n        },\n        mapPosition: {\n          lat: latValue,\n          lng: lngValue\n        }\n      });\n    };\n\n    this.state = {\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    };\n  }\n  /**\r\n   * Get the current address from the default map position and set those values in the state\r\n   */\n\n\n  componentDidMount() {\n    Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(response => {\n      const address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray);\n      console.log('city', city, area, state);\n      this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : ''\n      });\n    }, error => {\n      console.error(error);\n    });\n  }\n\n  /**\r\n   * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\r\n   *\r\n   * @param nextProps\r\n   * @param nextState\r\n   * @return {boolean}\r\n   */\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.markerPosition.lat !== this.props.center.lat || this.state.address !== nextState.address || this.state.city !== nextState.city || this.state.area !== nextState.area || this.state.state !== nextState.state) {\n      return true;\n    } else if (this.props.center.lat === nextProps.center.lat) {\n      return false;\n    }\n  }\n  /**\r\n   * Get the city and set the city input value to the one selected\r\n   *\r\n   * @param addressArray\r\n   * @return {string}\r\n   */\n\n\n  render() {\n    const AsyncMap = withScriptjs(withGoogleMap(props => /*#__PURE__*/_jsxDEV(GoogleMap, {\n      google: this.props.google,\n      defaultZoom: this.props.zoom,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      },\n      children: [/*#__PURE__*/_jsxDEV(InfoWindow, {\n        onClose: this.onInfoWindowClose,\n        position: {\n          lat: this.state.markerPosition.lat + 0.0018,\n          lng: this.state.markerPosition.lng\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              padding: 0,\n              margin: 0\n            },\n            children: this.state.address\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 8\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Marker, {\n        google: this.props.google,\n        name: 'Dolores park',\n        draggable: true,\n        onDragEnd: this.onMarkerDragEnd,\n        position: {\n          lat: this.state.markerPosition.lat,\n          lng: this.state.markerPosition.lng\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Marker, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n        style: {\n          width: '100%',\n          height: '40px',\n          paddingLeft: '16px',\n          marginTop: '2px',\n          marginBottom: '500px'\n        },\n        onPlaceSelected: this.onPlaceSelected,\n        types: ['(regions)']\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 6\n    }, this)));\n    let map;\n\n    if (this.props.center.lat !== undefined) {\n      map = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"\",\n              children: \"City\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"city\",\n              className: \"form-control\",\n              onChange: this.onChange,\n              readOnly: \"readOnly\",\n              value: this.state.city\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 7\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"\",\n              children: \"Area\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"area\",\n              className: \"form-control\",\n              onChange: this.onChange,\n              readOnly: \"readOnly\",\n              value: this.state.area\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 7\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"\",\n              children: \"State\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"state\",\n              className: \"form-control\",\n              onChange: this.onChange,\n              readOnly: \"readOnly\",\n              value: this.state.state\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 7\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"\",\n              children: \"Address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"address\",\n              className: \"form-control\",\n              onChange: this.onChange,\n              readOnly: \"readOnly\",\n              value: this.state.address\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 7\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 6\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(AsyncMap, {\n          googleMapURL: `https://maps.googleapis.com/maps/api/js?key=${GoogleMapsAPI}&libraries=places`,\n          loadingElement: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              height: `100%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 7\n          }, this),\n          containerElement: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              height: this.props.height\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 7\n          }, this),\n          mapElement: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              height: `100%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 10\n      }, this);\n    } else {\n      map = /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: this.props.height\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 10\n      }, this);\n    }\n\n    return map;\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["D:/LVTN/LVTN/cuisine-net/src/services/gmap.js"],"names":["React","Component","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Geocode","Autocomplete","setApiKey","enableDebug","Map","constructor","props","getCity","addressArray","city","i","length","types","long_name","getArea","area","j","getState","state","onChange","event","setState","target","name","value","onInfoWindowClose","onMarkerDragEnd","newLat","latLng","lat","newLng","lng","fromLatLng","then","response","address","results","formatted_address","address_components","markerPosition","mapPosition","error","console","onPlaceSelected","place","log","latValue","geometry","location","lngValue","center","componentDidMount","shouldComponentUpdate","nextProps","nextState","render","AsyncMap","google","zoom","padding","margin","width","height","paddingLeft","marginTop","marginBottom","map","undefined","GoogleMapsAPI"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,aAAT,EAAwBC,SAAxB,EAAmCC,YAAnC,EAAiDC,UAAjD,EAA6DC,MAA7D,QAA2E,mBAA3E;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;;AACAD,OAAO,CAACE,SAAR,CAAmB,EAAnB;AACAF,OAAO,CAACG,WAAR;;AAEA,MAAMC,GAAN,SAAkBV,SAAlB,CAA2B;AAE1BW,EAAAA,WAAW,CAAEC,KAAF,EAAS;AACnB,UAAOA,KAAP;;AADmB,SAqEpBC,OArEoB,GAqERC,YAAF,IAAoB;AAC7B,UAAIC,IAAI,GAAG,EAAX;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,YAAY,CAACG,MAAjC,EAAyCD,CAAC,EAA1C,EAA+C;AAC9C,YAAKF,YAAY,CAAEE,CAAF,CAAZ,CAAkBE,KAAlB,CAAwB,CAAxB,KAA8B,kCAAkCJ,YAAY,CAAEE,CAAF,CAAZ,CAAkBE,KAAlB,CAAwB,CAAxB,CAArE,EAAkG;AACjGH,UAAAA,IAAI,GAAGD,YAAY,CAAEE,CAAF,CAAZ,CAAkBG,SAAzB;AACA,iBAAOJ,IAAP;AACA;AACD;AACD,KA7EmB;;AAAA,SAoFpBK,OApFoB,GAoFRN,YAAF,IAAoB;AAC7B,UAAIO,IAAI,GAAG,EAAX;;AACA,WAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,YAAY,CAACG,MAAjC,EAAyCD,CAAC,EAA1C,EAA+C;AAC9C,YAAKF,YAAY,CAAEE,CAAF,CAAZ,CAAkBE,KAAlB,CAAwB,CAAxB,CAAL,EAAmC;AAClC,eAAM,IAAII,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGR,YAAY,CAAEE,CAAF,CAAZ,CAAkBE,KAAlB,CAAwBD,MAA7C,EAAqDK,CAAC,EAAtD,EAA2D;AAC1D,gBAAK,0BAA0BR,YAAY,CAAEE,CAAF,CAAZ,CAAkBE,KAAlB,CAAwBI,CAAxB,CAA1B,IAAwD,eAAeR,YAAY,CAAEE,CAAF,CAAZ,CAAkBE,KAAlB,CAAwBI,CAAxB,CAA5E,EAAyG;AACxGD,cAAAA,IAAI,GAAGP,YAAY,CAAEE,CAAF,CAAZ,CAAkBG,SAAzB;AACA,qBAAOE,IAAP;AACA;AACD;AACD;AACD;AACD,KAhGmB;;AAAA,SAuGpBE,QAvGoB,GAuGPT,YAAF,IAAoB;AAC9B,UAAIU,KAAK,GAAG,EAAZ;;AACA,WAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,YAAY,CAACG,MAAjC,EAAyCD,CAAC,EAA1C,EAA+C;AAC9C,aAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,YAAY,CAACG,MAAjC,EAAyCD,CAAC,EAA1C,EAA+C;AAC9C,cAAKF,YAAY,CAAEE,CAAF,CAAZ,CAAkBE,KAAlB,CAAwB,CAAxB,KAA8B,kCAAkCJ,YAAY,CAAEE,CAAF,CAAZ,CAAkBE,KAAlB,CAAwB,CAAxB,CAArE,EAAkG;AACjGM,YAAAA,KAAK,GAAGV,YAAY,CAAEE,CAAF,CAAZ,CAAkBG,SAA1B;AACA,mBAAOK,KAAP;AACA;AACD;AACD;AACD,KAjHmB;;AAAA,SAsHpBC,QAtHoB,GAsHPC,KAAF,IAAa;AACvB,WAAKC,QAAL,CAAc;AAAE,SAACD,KAAK,CAACE,MAAN,CAAaC,IAAd,GAAqBH,KAAK,CAACE,MAAN,CAAaE;AAApC,OAAd;AACA,KAxHmB;;AAAA,SA8HpBC,iBA9HoB,GA8HEL,KAAF,IAAa,CAEhC,CAhImB;;AAAA,SAyIpBM,eAzIoB,GAyIAN,KAAF,IAAa;AAC9B,UAAIO,MAAM,GAAGP,KAAK,CAACQ,MAAN,CAAaC,GAAb,EAAb;AAAA,UACIC,MAAM,GAAGV,KAAK,CAACQ,MAAN,CAAaG,GAAb,EADb;AAGA/B,MAAAA,OAAO,CAACgC,UAAR,CAAoBL,MAApB,EAA6BG,MAA7B,EAAsCG,IAAtC,CACCC,QAAQ,IAAI;AACX,cAAMC,OAAO,GAAGD,QAAQ,CAACE,OAAT,CAAiB,CAAjB,EAAoBC,iBAApC;AAAA,cACM7B,YAAY,GAAI0B,QAAQ,CAACE,OAAT,CAAiB,CAAjB,EAAoBE,kBAD1C;AAAA,cAEM7B,IAAI,GAAG,KAAKF,OAAL,CAAcC,YAAd,CAFb;AAAA,cAGMO,IAAI,GAAG,KAAKD,OAAL,CAAcN,YAAd,CAHb;AAAA,cAIMU,KAAK,GAAG,KAAKD,QAAL,CAAeT,YAAf,CAJd;AAKA,aAAKa,QAAL,CAAe;AACdc,UAAAA,OAAO,EAAIA,OAAF,GAAcA,OAAd,GAAwB,EADnB;AAEdpB,UAAAA,IAAI,EAAIA,IAAF,GAAWA,IAAX,GAAkB,EAFV;AAGdN,UAAAA,IAAI,EAAIA,IAAF,GAAWA,IAAX,GAAkB,EAHV;AAIdS,UAAAA,KAAK,EAAIA,KAAF,GAAYA,KAAZ,GAAoB,EAJb;AAKdqB,UAAAA,cAAc,EAAE;AACfV,YAAAA,GAAG,EAAEF,MADU;AAEfI,YAAAA,GAAG,EAAED;AAFU,WALF;AASdU,UAAAA,WAAW,EAAE;AACZX,YAAAA,GAAG,EAAEF,MADO;AAEZI,YAAAA,GAAG,EAAED;AAFO;AATC,SAAf;AAcA,OArBF,EAsBCW,KAAK,IAAI;AACRC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,OAxBF;AA0BA,KAvKmB;;AAAA,SA6KpBE,eA7KoB,GA6KAC,KAAF,IAAa;AAC9BF,MAAAA,OAAO,CAACG,GAAR,CAAa,KAAb,EAAoBD,KAApB;AACA,YAAMT,OAAO,GAAGS,KAAK,CAACP,iBAAtB;AAAA,YACM7B,YAAY,GAAIoC,KAAK,CAACN,kBAD5B;AAAA,YAEM7B,IAAI,GAAG,KAAKF,OAAL,CAAcC,YAAd,CAFb;AAAA,YAGMO,IAAI,GAAG,KAAKD,OAAL,CAAcN,YAAd,CAHb;AAAA,YAIMU,KAAK,GAAG,KAAKD,QAAL,CAAeT,YAAf,CAJd;AAAA,YAKMsC,QAAQ,GAAGF,KAAK,CAACG,QAAN,CAAeC,QAAf,CAAwBnB,GAAxB,EALjB;AAAA,YAMMoB,QAAQ,GAAGL,KAAK,CAACG,QAAN,CAAeC,QAAf,CAAwBjB,GAAxB,EANjB,CAF8B,CAS9B;;AACA,WAAKV,QAAL,CAAc;AACbc,QAAAA,OAAO,EAAIA,OAAF,GAAcA,OAAd,GAAwB,EADpB;AAEbpB,QAAAA,IAAI,EAAIA,IAAF,GAAWA,IAAX,GAAkB,EAFX;AAGbN,QAAAA,IAAI,EAAIA,IAAF,GAAWA,IAAX,GAAkB,EAHX;AAIbS,QAAAA,KAAK,EAAIA,KAAF,GAAYA,KAAZ,GAAoB,EAJd;AAKbqB,QAAAA,cAAc,EAAE;AACfV,UAAAA,GAAG,EAAEiB,QADU;AAEff,UAAAA,GAAG,EAAEkB;AAFU,SALH;AASbT,QAAAA,WAAW,EAAE;AACZX,UAAAA,GAAG,EAAEiB,QADO;AAEZf,UAAAA,GAAG,EAAEkB;AAFO;AATA,OAAd;AAcA,KArMmB;;AAEnB,SAAK/B,KAAL,GAAa;AACZiB,MAAAA,OAAO,EAAE,EADG;AAEZ1B,MAAAA,IAAI,EAAE,EAFM;AAGZM,MAAAA,IAAI,EAAE,EAHM;AAIZG,MAAAA,KAAK,EAAE,EAJK;AAKZsB,MAAAA,WAAW,EAAE;AACZX,QAAAA,GAAG,EAAE,KAAKvB,KAAL,CAAW4C,MAAX,CAAkBrB,GADX;AAEZE,QAAAA,GAAG,EAAE,KAAKzB,KAAL,CAAW4C,MAAX,CAAkBnB;AAFX,OALD;AASZQ,MAAAA,cAAc,EAAE;AACfV,QAAAA,GAAG,EAAE,KAAKvB,KAAL,CAAW4C,MAAX,CAAkBrB,GADR;AAEfE,QAAAA,GAAG,EAAE,KAAKzB,KAAL,CAAW4C,MAAX,CAAkBnB;AAFR;AATJ,KAAb;AAcA;AACD;AACD;AACA;;;AACCoB,EAAAA,iBAAiB,GAAG;AACnBnD,IAAAA,OAAO,CAACgC,UAAR,CAAoB,KAAKd,KAAL,CAAWsB,WAAX,CAAuBX,GAA3C,EAAiD,KAAKX,KAAL,CAAWsB,WAAX,CAAuBT,GAAxE,EAA8EE,IAA9E,CACCC,QAAQ,IAAI;AACX,YAAMC,OAAO,GAAGD,QAAQ,CAACE,OAAT,CAAiB,CAAjB,EAAoBC,iBAApC;AAAA,YACM7B,YAAY,GAAI0B,QAAQ,CAACE,OAAT,CAAiB,CAAjB,EAAoBE,kBAD1C;AAAA,YAEM7B,IAAI,GAAG,KAAKF,OAAL,CAAcC,YAAd,CAFb;AAAA,YAGMO,IAAI,GAAG,KAAKD,OAAL,CAAcN,YAAd,CAHb;AAAA,YAIMU,KAAK,GAAG,KAAKD,QAAL,CAAeT,YAAf,CAJd;AAMAkC,MAAAA,OAAO,CAACG,GAAR,CAAa,MAAb,EAAqBpC,IAArB,EAA2BM,IAA3B,EAAiCG,KAAjC;AAEA,WAAKG,QAAL,CAAe;AACdc,QAAAA,OAAO,EAAIA,OAAF,GAAcA,OAAd,GAAwB,EADnB;AAEdpB,QAAAA,IAAI,EAAIA,IAAF,GAAWA,IAAX,GAAkB,EAFV;AAGdN,QAAAA,IAAI,EAAIA,IAAF,GAAWA,IAAX,GAAkB,EAHV;AAIdS,QAAAA,KAAK,EAAIA,KAAF,GAAYA,KAAZ,GAAoB;AAJb,OAAf;AAMA,KAhBF,EAiBCuB,KAAK,IAAI;AACRC,MAAAA,OAAO,CAACD,KAAR,CAAeA,KAAf;AACA,KAnBF;AAqBA;;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACCW,EAAAA,qBAAqB,CAAEC,SAAF,EAAaC,SAAb,EAAwB;AAC5C,QACC,KAAKpC,KAAL,CAAWqB,cAAX,CAA0BV,GAA1B,KAAkC,KAAKvB,KAAL,CAAW4C,MAAX,CAAkBrB,GAApD,IACA,KAAKX,KAAL,CAAWiB,OAAX,KAAuBmB,SAAS,CAACnB,OADjC,IAEA,KAAKjB,KAAL,CAAWT,IAAX,KAAoB6C,SAAS,CAAC7C,IAF9B,IAGA,KAAKS,KAAL,CAAWH,IAAX,KAAoBuC,SAAS,CAACvC,IAH9B,IAIA,KAAKG,KAAL,CAAWA,KAAX,KAAqBoC,SAAS,CAACpC,KALhC,EAME;AACD,aAAO,IAAP;AACA,KARD,MAQO,IAAK,KAAKZ,KAAL,CAAW4C,MAAX,CAAkBrB,GAAlB,KAA0BwB,SAAS,CAACH,MAAV,CAAiBrB,GAAhD,EAAqD;AAC3D,aAAO,KAAP;AACA;AACD;AACD;AACD;AACA;AACA;AACA;AACA;;;AAoIC0B,EAAAA,MAAM,GAAE;AACP,UAAMC,QAAQ,GAAG3D,YAAY,CAC5BF,aAAa,CACZW,KAAK,iBACJ,QAAC,SAAD;AAAW,MAAA,MAAM,EAAG,KAAKA,KAAL,CAAWmD,MAA/B;AACW,MAAA,WAAW,EAAG,KAAKnD,KAAL,CAAWoD,IADpC;AAEW,MAAA,aAAa,EAAE;AAAE7B,QAAAA,GAAG,EAAE,KAAKX,KAAL,CAAWsB,WAAX,CAAuBX,GAA9B;AAAmCE,QAAAA,GAAG,EAAE,KAAKb,KAAL,CAAWsB,WAAX,CAAuBT;AAA/D,OAF1B;AAAA,8BAKC,QAAC,UAAD;AACC,QAAA,OAAO,EAAE,KAAKN,iBADf;AAEC,QAAA,QAAQ,EAAE;AAAEI,UAAAA,GAAG,EAAI,KAAKX,KAAL,CAAWqB,cAAX,CAA0BV,GAA1B,GAAgC,MAAzC;AAAmDE,UAAAA,GAAG,EAAE,KAAKb,KAAL,CAAWqB,cAAX,CAA0BR;AAAlF,SAFX;AAAA,+BAIC;AAAA,iCACC;AAAM,YAAA,KAAK,EAAE;AAAE4B,cAAAA,OAAO,EAAE,CAAX;AAAcC,cAAAA,MAAM,EAAE;AAAtB,aAAb;AAAA,sBAA0C,KAAK1C,KAAL,CAAWiB;AAArD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AAJD;AAAA;AAAA;AAAA;AAAA,cALD,eAcC,QAAC,MAAD;AAAQ,QAAA,MAAM,EAAE,KAAK7B,KAAL,CAAWmD,MAA3B;AACQ,QAAA,IAAI,EAAE,cADd;AAEQ,QAAA,SAAS,EAAE,IAFnB;AAGQ,QAAA,SAAS,EAAG,KAAK/B,eAHzB;AAIQ,QAAA,QAAQ,EAAE;AAAEG,UAAAA,GAAG,EAAE,KAAKX,KAAL,CAAWqB,cAAX,CAA0BV,GAAjC;AAAsCE,UAAAA,GAAG,EAAE,KAAKb,KAAL,CAAWqB,cAAX,CAA0BR;AAArE;AAJlB;AAAA;AAAA;AAAA;AAAA,cAdD,eAoBC,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cApBD,eAsBC,QAAC,YAAD;AACC,QAAA,KAAK,EAAE;AACN8B,UAAAA,KAAK,EAAE,MADD;AAENC,UAAAA,MAAM,EAAE,MAFF;AAGNC,UAAAA,WAAW,EAAE,MAHP;AAINC,UAAAA,SAAS,EAAE,KAJL;AAKNC,UAAAA,YAAY,EAAE;AALR,SADR;AAQC,QAAA,eAAe,EAAG,KAAKtB,eARxB;AASC,QAAA,KAAK,EAAE,CAAC,WAAD;AATR;AAAA;AAAA;AAAA;AAAA,cAtBD;AAAA;AAAA;AAAA;AAAA;AAAA,YAFW,CADe,CAA7B;AAwCA,QAAIuB,GAAJ;;AACA,QAAI,KAAK5D,KAAL,CAAW4C,MAAX,CAAkBrB,GAAlB,KAA0BsC,SAA9B,EAA0C;AACzCD,MAAAA,GAAG,gBAAG;AAAA,gCACL;AAAA,kCACC;AAAK,YAAA,SAAS,EAAC,YAAf;AAAA,oCACC;AAAO,cAAA,OAAO,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADD,eAEC;AAAO,cAAA,IAAI,EAAC,MAAZ;AAAmB,cAAA,IAAI,EAAC,MAAxB;AAA+B,cAAA,SAAS,EAAC,cAAzC;AAAwD,cAAA,QAAQ,EAAG,KAAK/C,QAAxE;AAAmF,cAAA,QAAQ,EAAC,UAA5F;AAAuG,cAAA,KAAK,EAAG,KAAKD,KAAL,CAAWT;AAA1H;AAAA;AAAA;AAAA;AAAA,oBAFD;AAAA;AAAA;AAAA;AAAA;AAAA,kBADD,eAKC;AAAK,YAAA,SAAS,EAAC,YAAf;AAAA,oCACC;AAAO,cAAA,OAAO,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADD,eAEC;AAAO,cAAA,IAAI,EAAC,MAAZ;AAAmB,cAAA,IAAI,EAAC,MAAxB;AAA+B,cAAA,SAAS,EAAC,cAAzC;AAAwD,cAAA,QAAQ,EAAG,KAAKU,QAAxE;AAAmF,cAAA,QAAQ,EAAC,UAA5F;AAAuG,cAAA,KAAK,EAAG,KAAKD,KAAL,CAAWH;AAA1H;AAAA;AAAA;AAAA;AAAA,oBAFD;AAAA;AAAA;AAAA;AAAA;AAAA,kBALD,eASC;AAAK,YAAA,SAAS,EAAC,YAAf;AAAA,oCACC;AAAO,cAAA,OAAO,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADD,eAEC;AAAO,cAAA,IAAI,EAAC,MAAZ;AAAmB,cAAA,IAAI,EAAC,OAAxB;AAAgC,cAAA,SAAS,EAAC,cAA1C;AAAyD,cAAA,QAAQ,EAAG,KAAKI,QAAzE;AAAoF,cAAA,QAAQ,EAAC,UAA7F;AAAwG,cAAA,KAAK,EAAG,KAAKD,KAAL,CAAWA;AAA3H;AAAA;AAAA;AAAA;AAAA,oBAFD;AAAA;AAAA;AAAA;AAAA;AAAA,kBATD,eAaC;AAAK,YAAA,SAAS,EAAC,YAAf;AAAA,oCACC;AAAO,cAAA,OAAO,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADD,eAEC;AAAO,cAAA,IAAI,EAAC,MAAZ;AAAmB,cAAA,IAAI,EAAC,SAAxB;AAAkC,cAAA,SAAS,EAAC,cAA5C;AAA2D,cAAA,QAAQ,EAAG,KAAKC,QAA3E;AAAsF,cAAA,QAAQ,EAAC,UAA/F;AAA0G,cAAA,KAAK,EAAG,KAAKD,KAAL,CAAWiB;AAA7H;AAAA;AAAA;AAAA;AAAA,oBAFD;AAAA;AAAA;AAAA;AAAA;AAAA,kBAbD;AAAA;AAAA;AAAA;AAAA;AAAA,gBADK,eAoBL,QAAC,QAAD;AACC,UAAA,YAAY,EAAG,+CAA8CiC,aAAc,mBAD5E;AAEC,UAAA,cAAc,eACb;AAAK,YAAA,KAAK,EAAE;AAAEN,cAAAA,MAAM,EAAG;AAAX;AAAZ;AAAA;AAAA;AAAA;AAAA,kBAHF;AAKC,UAAA,gBAAgB,eACf;AAAK,YAAA,KAAK,EAAE;AAAEA,cAAAA,MAAM,EAAE,KAAKxD,KAAL,CAAWwD;AAArB;AAAZ;AAAA;AAAA;AAAA;AAAA,kBANF;AAQC,UAAA,UAAU,eACT;AAAK,YAAA,KAAK,EAAE;AAAEA,cAAAA,MAAM,EAAG;AAAX;AAAZ;AAAA;AAAA;AAAA;AAAA;AATF;AAAA;AAAA;AAAA;AAAA,gBApBK;AAAA;AAAA;AAAA;AAAA;AAAA,cAAN;AAiCA,KAlCD,MAkCO;AACNI,MAAAA,GAAG,gBAAG;AAAK,QAAA,KAAK,EAAE;AAACJ,UAAAA,MAAM,EAAE,KAAKxD,KAAL,CAAWwD;AAApB;AAAZ;AAAA;AAAA;AAAA;AAAA,cAAN;AACA;;AACD,WAAQI,GAAR;AACA;;AA1RyB;;AA4R3B,eAAe9D,GAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\r\nimport Geocode from \"react-geocode\";\r\nimport Autocomplete from 'react-google-autocomplete';\r\nGeocode.setApiKey( '' );\r\nGeocode.enableDebug();\r\n\r\nclass Map extends Component{\r\n\r\n\tconstructor( props ){\r\n\t\tsuper( props );\r\n\t\tthis.state = {\r\n\t\t\taddress: '',\r\n\t\t\tcity: '',\r\n\t\t\tarea: '',\r\n\t\t\tstate: '',\r\n\t\t\tmapPosition: {\r\n\t\t\t\tlat: this.props.center.lat,\r\n\t\t\t\tlng: this.props.center.lng\r\n\t\t\t},\r\n\t\t\tmarkerPosition: {\r\n\t\t\t\tlat: this.props.center.lat,\r\n\t\t\t\tlng: this.props.center.lng\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Get the current address from the default map position and set those values in the state\r\n\t */\r\n\tcomponentDidMount() {\r\n\t\tGeocode.fromLatLng( this.state.mapPosition.lat , this.state.mapPosition.lng ).then(\r\n\t\t\tresponse => {\r\n\t\t\t\tconst address = response.results[0].formatted_address,\r\n\t\t\t\t      addressArray =  response.results[0].address_components,\r\n\t\t\t\t      city = this.getCity( addressArray ),\r\n\t\t\t\t      area = this.getArea( addressArray ),\r\n\t\t\t\t      state = this.getState( addressArray );\r\n\r\n\t\t\t\tconsole.log( 'city', city, area, state );\r\n\r\n\t\t\t\tthis.setState( {\r\n\t\t\t\t\taddress: ( address ) ? address : '',\r\n\t\t\t\t\tarea: ( area ) ? area : '',\r\n\t\t\t\t\tcity: ( city ) ? city : '',\r\n\t\t\t\t\tstate: ( state ) ? state : '',\r\n\t\t\t\t} )\r\n\t\t\t},\r\n\t\t\terror => {\r\n\t\t\t\tconsole.error( error );\r\n\t\t\t}\r\n\t\t);\r\n\t};\r\n\t/**\r\n\t * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\r\n\t *\r\n\t * @param nextProps\r\n\t * @param nextState\r\n\t * @return {boolean}\r\n\t */\r\n\tshouldComponentUpdate( nextProps, nextState ){\r\n\t\tif (\r\n\t\t\tthis.state.markerPosition.lat !== this.props.center.lat ||\r\n\t\t\tthis.state.address !== nextState.address ||\r\n\t\t\tthis.state.city !== nextState.city ||\r\n\t\t\tthis.state.area !== nextState.area ||\r\n\t\t\tthis.state.state !== nextState.state\r\n\t\t) {\r\n\t\t\treturn true\r\n\t\t} else if ( this.props.center.lat === nextProps.center.lat ){\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Get the city and set the city input value to the one selected\r\n\t *\r\n\t * @param addressArray\r\n\t * @return {string}\r\n\t */\r\n\tgetCity = ( addressArray ) => {\r\n\t\tlet city = '';\r\n\t\tfor( let i = 0; i < addressArray.length; i++ ) {\r\n\t\t\tif ( addressArray[ i ].types[0] && 'administrative_area_level_2' === addressArray[ i ].types[0] ) {\r\n\t\t\t\tcity = addressArray[ i ].long_name;\r\n\t\t\t\treturn city;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t/**\r\n\t * Get the area and set the area input value to the one selected\r\n\t *\r\n\t * @param addressArray\r\n\t * @return {string}\r\n\t */\r\n\tgetArea = ( addressArray ) => {\r\n\t\tlet area = '';\r\n\t\tfor( let i = 0; i < addressArray.length; i++ ) {\r\n\t\t\tif ( addressArray[ i ].types[0]  ) {\r\n\t\t\t\tfor ( let j = 0; j < addressArray[ i ].types.length; j++ ) {\r\n\t\t\t\t\tif ( 'sublocality_level_1' === addressArray[ i ].types[j] || 'locality' === addressArray[ i ].types[j] ) {\r\n\t\t\t\t\t\tarea = addressArray[ i ].long_name;\r\n\t\t\t\t\t\treturn area;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t/**\r\n\t * Get the address and set the address input value to the one selected\r\n\t *\r\n\t * @param addressArray\r\n\t * @return {string}\r\n\t */\r\n\tgetState = ( addressArray ) => {\r\n\t\tlet state = '';\r\n\t\tfor( let i = 0; i < addressArray.length; i++ ) {\r\n\t\t\tfor( let i = 0; i < addressArray.length; i++ ) {\r\n\t\t\t\tif ( addressArray[ i ].types[0] && 'administrative_area_level_1' === addressArray[ i ].types[0] ) {\r\n\t\t\t\t\tstate = addressArray[ i ].long_name;\r\n\t\t\t\t\treturn state;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t/**\r\n\t * And function for city,state and address input\r\n\t * @param event\r\n\t */\r\n\tonChange = ( event ) => {\r\n\t\tthis.setState({ [event.target.name]: event.target.value });\r\n\t};\r\n\t/**\r\n\t * This Event triggers when the marker window is closed\r\n\t *\r\n\t * @param event\r\n\t */\r\n\tonInfoWindowClose = ( event ) => {\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * When the marker is dragged you get the lat and long using the functions available from event object.\r\n\t * Use geocode to get the address, city, area and state from the lat and lng positions.\r\n\t * And then set those values in the state.\r\n\t *\r\n\t * @param event\r\n\t */\r\n\tonMarkerDragEnd = ( event ) => {\r\n\t\tlet newLat = event.latLng.lat(),\r\n\t\t    newLng = event.latLng.lng();\r\n\r\n\t\tGeocode.fromLatLng( newLat , newLng ).then(\r\n\t\t\tresponse => {\r\n\t\t\t\tconst address = response.results[0].formatted_address,\r\n\t\t\t\t      addressArray =  response.results[0].address_components,\r\n\t\t\t\t      city = this.getCity( addressArray ),\r\n\t\t\t\t      area = this.getArea( addressArray ),\r\n\t\t\t\t      state = this.getState( addressArray );\r\n\t\t\t\tthis.setState( {\r\n\t\t\t\t\taddress: ( address ) ? address : '',\r\n\t\t\t\t\tarea: ( area ) ? area : '',\r\n\t\t\t\t\tcity: ( city ) ? city : '',\r\n\t\t\t\t\tstate: ( state ) ? state : '',\r\n\t\t\t\t\tmarkerPosition: {\r\n\t\t\t\t\t\tlat: newLat,\r\n\t\t\t\t\t\tlng: newLng\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmapPosition: {\r\n\t\t\t\t\t\tlat: newLat,\r\n\t\t\t\t\t\tlng: newLng\r\n\t\t\t\t\t},\r\n\t\t\t\t} )\r\n\t\t\t},\r\n\t\t\terror => {\r\n\t\t\t\tconsole.error(error);\r\n\t\t\t}\r\n\t\t);\r\n\t};\r\n\r\n\t/**\r\n\t * When the user types an address in the search box\r\n\t * @param place\r\n\t */\r\n\tonPlaceSelected = ( place ) => {\r\n\t\tconsole.log( 'plc', place );\r\n\t\tconst address = place.formatted_address,\r\n\t\t      addressArray =  place.address_components,\r\n\t\t      city = this.getCity( addressArray ),\r\n\t\t      area = this.getArea( addressArray ),\r\n\t\t      state = this.getState( addressArray ),\r\n\t\t      latValue = place.geometry.location.lat(),\r\n\t\t      lngValue = place.geometry.location.lng();\r\n\t\t// Set these values in the state.\r\n\t\tthis.setState({\r\n\t\t\taddress: ( address ) ? address : '',\r\n\t\t\tarea: ( area ) ? area : '',\r\n\t\t\tcity: ( city ) ? city : '',\r\n\t\t\tstate: ( state ) ? state : '',\r\n\t\t\tmarkerPosition: {\r\n\t\t\t\tlat: latValue,\r\n\t\t\t\tlng: lngValue\r\n\t\t\t},\r\n\t\t\tmapPosition: {\r\n\t\t\t\tlat: latValue,\r\n\t\t\t\tlng: lngValue\r\n\t\t\t},\r\n\t\t})\r\n\t};\r\n\r\n\r\n\trender(){\r\n\t\tconst AsyncMap = withScriptjs(\r\n\t\t\twithGoogleMap(\r\n\t\t\t\tprops => (\r\n\t\t\t\t\t<GoogleMap google={ this.props.google }\r\n\t\t\t\t\t           defaultZoom={ this.props.zoom }\r\n\t\t\t\t\t           defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{/* InfoWindow on top of marker */}\r\n\t\t\t\t\t\t<InfoWindow\r\n\t\t\t\t\t\t\tonClose={this.onInfoWindowClose}\r\n\t\t\t\t\t\t\tposition={{ lat: ( this.state.markerPosition.lat + 0.0018 ), lng: this.state.markerPosition.lng }}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t<span style={{ padding: 0, margin: 0 }}>{ this.state.address }</span>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</InfoWindow>\r\n\t\t\t\t\t\t{/*Marker*/}\r\n\t\t\t\t\t\t<Marker google={this.props.google}\r\n\t\t\t\t\t\t        name={'Dolores park'}\r\n\t\t\t\t\t\t        draggable={true}\r\n\t\t\t\t\t\t        onDragEnd={ this.onMarkerDragEnd }\r\n\t\t\t\t\t\t        position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Marker />\r\n\t\t\t\t\t\t{/* For Auto complete Search Box */}\r\n\t\t\t\t\t\t<Autocomplete\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\twidth: '100%',\r\n\t\t\t\t\t\t\t\theight: '40px',\r\n\t\t\t\t\t\t\t\tpaddingLeft: '16px',\r\n\t\t\t\t\t\t\t\tmarginTop: '2px',\r\n\t\t\t\t\t\t\t\tmarginBottom: '500px'\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tonPlaceSelected={ this.onPlaceSelected }\r\n\t\t\t\t\t\t\ttypes={['(regions)']}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</GoogleMap>\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t);\r\n\t\tlet map;\r\n\t\tif( this.props.center.lat !== undefined ) {\r\n\t\t\tmap = <div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t<label htmlFor=\"\">City</label>\r\n\t\t\t\t\t\t<input type=\"text\" name=\"city\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.city }/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t<label htmlFor=\"\">Area</label>\r\n\t\t\t\t\t\t<input type=\"text\" name=\"area\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.area }/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t<label htmlFor=\"\">State</label>\r\n\t\t\t\t\t\t<input type=\"text\" name=\"state\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.state }/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t<label htmlFor=\"\">Address</label>\r\n\t\t\t\t\t\t<input type=\"text\" name=\"address\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.address }/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<AsyncMap\r\n\t\t\t\t\tgoogleMapURL={`https://maps.googleapis.com/maps/api/js?key=${GoogleMapsAPI}&libraries=places`}\r\n\t\t\t\t\tloadingElement={\r\n\t\t\t\t\t\t<div style={{ height: `100%` }} />\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcontainerElement={\r\n\t\t\t\t\t\t<div style={{ height: this.props.height }} />\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmapElement={\r\n\t\t\t\t\t\t<div style={{ height: `100%` }} />\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t} else {\r\n\t\t\tmap = <div style={{height: this.props.height}} />\r\n\t\t}\r\n\t\treturn( map )\r\n\t}\r\n}\r\nexport default Map"]},"metadata":{},"sourceType":"module"}