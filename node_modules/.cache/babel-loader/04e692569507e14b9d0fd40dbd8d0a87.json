{"ast":null,"code":"var _jsxFileName = \"D:\\\\LVTN\\\\LVTN\\\\cuisine-net\\\\src\\\\components\\\\commentPost\\\\CommentChildren.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { red } from '@material-ui/core/colors';\nimport { commentService } from './../../services/comment.service';\nimport { Comment } from 'antd';\nimport axios from 'axios';\nimport { MessageInput, Avatar } from \"@chatscope/chat-ui-kit-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  avatar: {\n    backgroundColor: red[500]\n  }\n}));\nexport function CommentChildren(props) {\n  _s();\n\n  var idComment = props.idComment;\n  var isShowInput = props.isShowInput;\n  console.log(props.isShowInput); //comment\n\n  const [dataCommentChildren, setDataCommentChildren] = useState([]);\n  let mounted = true;\n  useEffect(() => {\n    commentService.getAllCommentReply(idComment).then(items => {\n      if (mounted) {\n        mounted = false;\n        setDataCommentChildren(items);\n      }\n    });\n    return () => mounted = false;\n  }, []); //\n\n  const [messageChildrenInputValue, setMessageChildrenInputValue] = useState(\"\");\n\n  const sendMessageChildren = (idComment, messageChildrenInputValue) => {\n    commentService.createCommentReply(idComment, messageChildrenInputValue);\n    setMessageChildrenInputValue(\"\");\n    commentService.getAllCommentReply(idComment).then(items => {\n      setDataCommentChildren(items);\n    });\n  }; //\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [dataCommentChildren ? dataCommentChildren.map(value => {\n      return /*#__PURE__*/_jsxDEV(Comment, {\n        author: /*#__PURE__*/_jsxDEV(\"a\", {\n          children: value.author\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 37\n        }, this),\n        avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n          src: \"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\",\n          alt: \"Han Solo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 33\n        }, this),\n        content: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: value.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 32\n      }, this);\n    }) : null, isShowInput ? /*#__PURE__*/_jsxDEV(MessageInput, {\n      onChange: val => setMessageChildrenInputValue(val),\n      onSend: messageChildrenInputValue => sendMessageChildren(idComment, messageChildrenInputValue)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 26\n    }, this) : '']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CommentChildren, \"W9+YA5xaWns79UN0jr6Tj1JFbcc=\");\n\n_c = CommentChildren;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentChildren\");","map":{"version":3,"sources":["D:/LVTN/LVTN/cuisine-net/src/components/commentPost/CommentChildren.js"],"names":["React","Fragment","useEffect","useState","makeStyles","Typography","red","commentService","Comment","axios","MessageInput","Avatar","useStyles","theme","avatar","backgroundColor","CommentChildren","props","idComment","isShowInput","console","log","dataCommentChildren","setDataCommentChildren","mounted","getAllCommentReply","then","items","messageChildrenInputValue","setMessageChildrenInputValue","sendMessageChildren","createCommentReply","map","value","author","text","val"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,SAASC,cAAT,QAA+B,kCAA/B;AACA,SAASC,OAAT,QAAwB,MAAxB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACIC,YADJ,EAEIC,MAFJ,QAGO,8BAHP;;AAIA,MAAMC,SAAS,GAAGR,UAAU,CAAES,KAAD,KAAY;AACrCC,EAAAA,MAAM,EAAE;AACJC,IAAAA,eAAe,EAAET,GAAG,CAAC,GAAD;AADhB;AAD6B,CAAZ,CAAD,CAA5B;AAMA,OAAO,SAASU,eAAT,CAAyBC,KAAzB,EAAgC;AAAA;;AACnC,MAAIC,SAAS,GAAGD,KAAK,CAACC,SAAtB;AACA,MAAIC,WAAW,GAAGF,KAAK,CAACE,WAAxB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACE,WAAlB,EAHmC,CAInC;;AACA,QAAM,CAACG,mBAAD,EAAsBC,sBAAtB,IAAgDpB,QAAQ,CAAC,EAAD,CAA9D;AACA,MAAIqB,OAAO,GAAG,IAAd;AACAtB,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,cAAc,CAACkB,kBAAf,CAAkCP,SAAlC,EACKQ,IADL,CACUC,KAAK,IAAI;AACX,UAAIH,OAAJ,EAAa;AACTA,QAAAA,OAAO,GAAG,KAAV;AACAD,QAAAA,sBAAsB,CAACI,KAAD,CAAtB;AACH;AAEJ,KAPL;AAQA,WAAO,MAAMH,OAAO,GAAG,KAAvB;AACH,GAVQ,EAUN,EAVM,CAAT,CAPmC,CAkBnC;;AACA,QAAM,CAACI,yBAAD,EAA4BC,4BAA5B,IAA4D1B,QAAQ,CAAC,EAAD,CAA1E;;AACA,QAAM2B,mBAAmB,GAAG,CAACZ,SAAD,EAAYU,yBAAZ,KAA0C;AAElErB,IAAAA,cAAc,CAACwB,kBAAf,CAAkCb,SAAlC,EAA6CU,yBAA7C;AACAC,IAAAA,4BAA4B,CAAC,EAAD,CAA5B;AACAtB,IAAAA,cAAc,CAACkB,kBAAf,CAAkCP,SAAlC,EACKQ,IADL,CACUC,KAAK,IAAI;AACPJ,MAAAA,sBAAsB,CAACI,KAAD,CAAtB;AACH,KAHT;AAKH,GATD,CApBmC,CA8BnC;;;AACA,sBACI;AAAA,eACKL,mBAAmB,GAAGA,mBAAmB,CAACU,GAApB,CAAyBC,KAAD,IAAW;AAC9C,0BAAO,QAAC,OAAD;AACH,QAAA,MAAM,eAAE;AAAA,oBAAIA,KAAK,CAACC;AAAV;AAAA;AAAA;AAAA;AAAA,gBADL;AAEH,QAAA,MAAM,eACF,QAAC,MAAD;AACI,UAAA,GAAG,EAAC,kEADR;AAEI,UAAA,GAAG,EAAC;AAFR;AAAA;AAAA;AAAA;AAAA,gBAHD;AAQH,QAAA,OAAO,eACH;AAAA,oBACKD,KAAK,CAACE;AADX;AAAA;AAAA;AAAA;AAAA;AATD;AAAA;AAAA;AAAA;AAAA,cAAP;AAiBH,KAlBc,CAAH,GAkBT,IAnBf,EAoBKhB,WAAW,gBAAC,QAAC,YAAD;AAAc,MAAA,QAAQ,EAAEiB,GAAG,IAAIP,4BAA4B,CAACO,GAAD,CAA3D;AACG,MAAA,MAAM,EAAGR,yBAAD,IAA+BE,mBAAmB,CAACZ,SAAD,EAAYU,yBAAZ;AAD7D;AAAA;AAAA;AAAA;AAAA,YAAD,GAC0G,EArB1H;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA0BH;;GAzDeZ,e;;KAAAA,e","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { red } from '@material-ui/core/colors';\r\nimport { commentService } from './../../services/comment.service';\r\nimport { Comment } from 'antd';\r\n\r\nimport axios from 'axios';\r\nimport {\r\n    MessageInput,\r\n    Avatar\r\n} from \"@chatscope/chat-ui-kit-react\";\r\nconst useStyles = makeStyles((theme) => ({\r\n    avatar: {\r\n        backgroundColor: red[500],\r\n    },\r\n}));\r\n\r\nexport function CommentChildren(props) {\r\n    var idComment = props.idComment;\r\n    var isShowInput = props.isShowInput;\r\n    console.log(props.isShowInput);\r\n    //comment\r\n    const [dataCommentChildren, setDataCommentChildren] = useState([]);\r\n    let mounted = true;\r\n    useEffect(() => {\r\n        commentService.getAllCommentReply(idComment)\r\n            .then(items => {\r\n                if (mounted) {\r\n                    mounted = false;\r\n                    setDataCommentChildren(items);\r\n                }\r\n\r\n            })\r\n        return () => mounted = false;\r\n    }, []);\r\n    //\r\n    const [messageChildrenInputValue, setMessageChildrenInputValue] = useState(\"\");\r\n    const sendMessageChildren = (idComment, messageChildrenInputValue) => {\r\n\r\n        commentService.createCommentReply(idComment, messageChildrenInputValue);\r\n        setMessageChildrenInputValue(\"\");\r\n        commentService.getAllCommentReply(idComment)\r\n            .then(items => {\r\n                    setDataCommentChildren(items);\r\n                }\r\n            )\r\n    };\r\n    //\r\n    return (\r\n        <div>\r\n            {dataCommentChildren ? dataCommentChildren.map((value) => {\r\n                        return <Comment\r\n                            author={<a>{value.author}</a>}\r\n                            avatar={\r\n                                <Avatar\r\n                                    src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"\r\n                                    alt=\"Han Solo\"\r\n                                />\r\n                            }\r\n                            content={\r\n                                <p>\r\n                                    {value.text}\r\n                                </p>\r\n                            }\r\n                        >\r\n\r\n                        </Comment> \r\n\r\n                    }):null}\r\n            {isShowInput?<MessageInput onChange={val => setMessageChildrenInputValue(val)}\r\n                            onSend={(messageChildrenInputValue) => sendMessageChildren(idComment, messageChildrenInputValue)} />: ''}\r\n        </div>\r\n\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}