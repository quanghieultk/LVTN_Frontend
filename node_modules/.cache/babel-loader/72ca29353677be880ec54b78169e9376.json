{"ast":null,"code":"import { userConstants } from '../constants/user.constants';\nimport { userService } from '../services/user.service';\nimport { alertActions } from './alert.actions';\nimport { history } from './../helpers/history';\nimport { socketActions } from './socket.action';\nimport { notification } from 'antd';\nexport const userActions = {\n  login,\n  logout,\n  register,\n  getAll,\n  changeInfoUser,\n  delete: _delete,\n  getInfoUser,\n  forgotPassword,\n  resetPassword\n};\n\nconst openNotificationWithIcon = (type, mess) => {\n  notification[type]({\n    message: mess,\n    style: {\n      marginTop: 60\n    }\n  });\n};\n\nfunction login(username, password, from) {\n  return dispatch => {\n    dispatch(request({\n      username\n    }));\n    userService.login(username, password).then(user => {\n      dispatch(success(user.data));\n      history.push(from);\n      dispatch(socketActions.connect());\n    }).catch(error => {\n      dispatch(failure(error.toString()));\n      dispatch(alertActions.error(error.toString()));\n      openNotificationWithIcon('error', 'Email hoặc mật khẩu không đúng!');\n    });\n  };\n\n  function request(user) {\n    return {\n      type: userConstants.LOGIN_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.LOGIN_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.LOGIN_FAILURE,\n      error\n    };\n  }\n}\n\nfunction changeInfoUser(userId, userInfo) {\n  return dispatch => {\n    userService.updateUser(userId, userInfo).then(user => {\n      dispatch(success(user.data));\n    }, error => {\n      console.log(error);\n    });\n\n    function success(user) {\n      console.log(user);\n      return {\n        type: userConstants.CHANGE_INFO_USER,\n        user\n      };\n    }\n  };\n}\n\nfunction getInfoUser(userId) {\n  return dispatch => {\n    userService.getInfoUser(userId).then(user => {\n      console.log(user);\n\n      if (user != undefined && user.data.data.user._id === JSON.parse(localStorage.getItem('user')).data.user._id) {\n        dispatch(success(user.data));\n      }\n    }, error => {\n      console.log(error);\n    });\n\n    function success(user) {\n      console.log(user);\n      return {\n        type: userConstants.GET_USER,\n        user\n      };\n    }\n  };\n}\n\nfunction logout() {\n  userService.logout();\n  history.push('/signIn');\n  return {\n    type: userConstants.LOGOUT\n  };\n}\n\nfunction register(user) {\n  return dispatch => {\n    dispatch(request(user));\n    userService.register(user).then(user => {\n      dispatch(success());\n      history.push('/signIn');\n      dispatch(alertActions.success('Registration successful'));\n    }, error => {\n      console.log(error);\n      dispatch(failure(error.toString()));\n      dispatch(alertActions.error(error.toString()));\n      openNotificationWithIcon('error', 'Thông tin đăng ký không đúng!');\n    });\n  };\n\n  function request(user) {\n    return {\n      type: userConstants.REGISTER_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.REGISTER_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.REGISTER_FAILURE,\n      error\n    };\n  }\n}\n\nfunction getAll() {\n  return dispatch => {\n    dispatch(request());\n    userService.getAll().then(users => dispatch(success(users)), error => dispatch(failure(error.toString())));\n  };\n\n  function request() {\n    return {\n      type: userConstants.GETALL_REQUEST\n    };\n  }\n\n  function success(users) {\n    return {\n      type: userConstants.GETALL_SUCCESS,\n      users\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.GETALL_FAILURE,\n      error\n    };\n  }\n}\n\nfunction forgotPassword(username) {\n  return dispatch => {\n    userService.forgotPassword(username);\n    history.push('/signIn');\n  };\n}\n\nfunction resetPassword(password, passwordConfirm, token) {\n  return dispatch => {\n    userService.resetPassword(password, passwordConfirm, token);\n    history.push('/');\n  };\n} // prefixed function name with underscore because delete is a reserved word in javascript\n\n\nfunction _delete(id) {\n  return dispatch => {\n    dispatch(request(id));\n    userService.delete(id).then(user => dispatch(success(id)), error => dispatch(failure(id, error.toString())));\n  };\n\n  function request(id) {\n    return {\n      type: userConstants.DELETE_REQUEST,\n      id\n    };\n  }\n\n  function success(id) {\n    return {\n      type: userConstants.DELETE_SUCCESS,\n      id\n    };\n  }\n\n  function failure(id, error) {\n    return {\n      type: userConstants.DELETE_FAILURE,\n      id,\n      error\n    };\n  }\n}","map":{"version":3,"sources":["D:/LVTN/LVTN/cuisine-net/src/actions/user.actions.js"],"names":["userConstants","userService","alertActions","history","socketActions","notification","userActions","login","logout","register","getAll","changeInfoUser","delete","_delete","getInfoUser","forgotPassword","resetPassword","openNotificationWithIcon","type","mess","message","style","marginTop","username","password","from","dispatch","request","then","user","success","data","push","connect","catch","error","failure","toString","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","userId","userInfo","updateUser","console","log","CHANGE_INFO_USER","undefined","_id","JSON","parse","localStorage","getItem","GET_USER","LOGOUT","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE","users","GETALL_REQUEST","GETALL_SUCCESS","GETALL_FAILURE","passwordConfirm","token","id","DELETE_REQUEST","DELETE_SUCCESS","DELETE_FAILURE"],"mappings":"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","sourcesContent":["import { userConstants } from '../constants/user.constants';\r\nimport { userService } from '../services/user.service';\r\nimport { alertActions } from './alert.actions';\r\nimport { history } from './../helpers/history';\r\nimport { socketActions } from './socket.action';\r\nimport { notification } from 'antd';\r\nexport const userActions = {\r\n    login,\r\n    logout,\r\n    register,\r\n    getAll,\r\n    changeInfoUser,\r\n    delete: _delete,\r\n    getInfoUser,\r\n    forgotPassword,\r\n    resetPassword\r\n};\r\n\r\nconst openNotificationWithIcon = (type, mess) => {\r\n    notification[type]({\r\n      message: mess,\r\n      style: {\r\n        marginTop: 60\r\n      },\r\n    });\r\n  };\r\n\r\nfunction login(username, password, from) {\r\n    return dispatch => {\r\n        dispatch(request({ username }));\r\n        userService.login(username, password)\r\n            .then(\r\n                user => {\r\n                    dispatch(success(user.data));\r\n                    history.push(from);\r\n                    dispatch(socketActions.connect());\r\n                }\r\n            ).catch(\r\n                error => {\r\n                    dispatch(failure(error.toString()));\r\n                    dispatch(alertActions.error(error.toString()));\r\n                    openNotificationWithIcon('error', 'Email hoặc mật khẩu không đúng!');\r\n                }\r\n            );\r\n    };\r\n\r\n    function request(user) { return { type: userConstants.LOGIN_REQUEST, user } }\r\n    function success(user) { return { type: userConstants.LOGIN_SUCCESS, user } }\r\n    function failure(error) { return { type: userConstants.LOGIN_FAILURE, error } }\r\n}\r\n\r\nfunction changeInfoUser(userId, userInfo) {\r\n    return dispatch => {\r\n    userService.updateUser(userId, userInfo)\r\n        .then(\r\n            user => {\r\n                dispatch(success(user.data));\r\n            },\r\n            error => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    function success(user) {\r\n        console.log(user);\r\n        return { type: userConstants.CHANGE_INFO_USER, user }\r\n    }\r\n}\r\n}\r\n\r\nfunction getInfoUser(userId) {\r\n    return dispatch => {\r\n    userService.getInfoUser(userId)\r\n        .then(\r\n            user => {\r\n                console.log(user);\r\n                if(user!=undefined && user.data.data.user._id===JSON.parse(localStorage.getItem('user')).data.user._id){\r\n                    dispatch(success(user.data));\r\n                }\r\n            },\r\n            error => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    function success(user) {\r\n        console.log(user);\r\n        return { type: userConstants.GET_USER, user }\r\n    }\r\n}\r\n}\r\n\r\nfunction logout() {\r\n    userService.logout();\r\n    history.push('/signIn');\r\n    return { type: userConstants.LOGOUT };\r\n}\r\n\r\nfunction register(user) {\r\n    return dispatch => {\r\n        dispatch(request(user));\r\n\r\n        userService.register(user)\r\n            .then(\r\n                user => {\r\n                    dispatch(success());\r\n                    history.push('/signIn');\r\n                    dispatch(alertActions.success('Registration successful'));\r\n                },\r\n                error => {\r\n                    console.log(error);\r\n                    dispatch(failure(error.toString()));\r\n                    dispatch(alertActions.error(error.toString()));\r\n                    openNotificationWithIcon('error', 'Thông tin đăng ký không đúng!');\r\n                }\r\n            );\r\n    };\r\n\r\n    function request(user) { return { type: userConstants.REGISTER_REQUEST, user } }\r\n    function success(user) { return { type: userConstants.REGISTER_SUCCESS, user } }\r\n    function failure(error) { return { type: userConstants.REGISTER_FAILURE, error } }\r\n}\r\n\r\nfunction getAll() {\r\n    return dispatch => {\r\n        dispatch(request());\r\n\r\n        userService.getAll()\r\n            .then(\r\n                users => dispatch(success(users)),\r\n                error => dispatch(failure(error.toString()))\r\n            );\r\n    };\r\n\r\n    function request() { return { type: userConstants.GETALL_REQUEST } }\r\n    function success(users) { return { type: userConstants.GETALL_SUCCESS, users } }\r\n    function failure(error) { return { type: userConstants.GETALL_FAILURE, error } }\r\n}\r\n\r\nfunction forgotPassword(username) {\r\n    return dispatch => {\r\n        userService.forgotPassword(username);\r\n        history.push('/signIn');\r\n    }\r\n}\r\n\r\nfunction resetPassword(password, passwordConfirm, token) {\r\n    return dispatch => {\r\n        userService.resetPassword(password, passwordConfirm, token)\r\n        history.push('/');\r\n    }\r\n}\r\n\r\n// prefixed function name with underscore because delete is a reserved word in javascript\r\nfunction _delete(id) {\r\n    return dispatch => {\r\n        dispatch(request(id));\r\n\r\n        userService.delete(id)\r\n            .then(\r\n                user => dispatch(success(id)),\r\n                error => dispatch(failure(id, error.toString()))\r\n            );\r\n    };\r\n\r\n    function request(id) { return { type: userConstants.DELETE_REQUEST, id } }\r\n    function success(id) { return { type: userConstants.DELETE_SUCCESS, id } }\r\n    function failure(id, error) { return { type: userConstants.DELETE_FAILURE, id, error } }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}