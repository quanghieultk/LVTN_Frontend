{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { isWebGL2 } from '@luma.gl/core';\nexport function getBounds(points) {\n  var x = points.map(function (p) {\n    return p[0];\n  });\n  var y = points.map(function (p) {\n    return p[1];\n  });\n  var xMin = Math.min.apply(null, x);\n  var xMax = Math.max.apply(null, x);\n  var yMin = Math.min.apply(null, y);\n  var yMax = Math.max.apply(null, y);\n  return [xMin, yMin, xMax, yMax];\n}\nexport function boundsContain(currentBounds, targetBounds) {\n  if (targetBounds[0] >= currentBounds[0] && targetBounds[2] <= currentBounds[2] && targetBounds[1] >= currentBounds[1] && targetBounds[3] <= currentBounds[3]) {\n    return true;\n  }\n\n  return false;\n}\nvar scratchArray = new Float32Array(12);\nexport function packVertices(points) {\n  var dimensions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  var index = 0;\n\n  var _iterator = _createForOfIteratorHelper(points),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var point = _step.value;\n\n      for (var i = 0; i < dimensions; i++) {\n        scratchArray[index++] = point[i] || 0;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return scratchArray;\n}\nexport function scaleToAspectRatio(boundingBox, width, height) {\n  var _boundingBox = _slicedToArray(boundingBox, 4),\n      xMin = _boundingBox[0],\n      yMin = _boundingBox[1],\n      xMax = _boundingBox[2],\n      yMax = _boundingBox[3];\n\n  var currentWidth = xMax - xMin;\n  var currentHeight = yMax - yMin;\n  var newWidth = currentWidth;\n  var newHeight = currentHeight;\n\n  if (currentWidth / currentHeight < width / height) {\n    newWidth = width / height * currentHeight;\n  } else {\n    newHeight = height / width * currentWidth;\n  }\n\n  if (newWidth < width) {\n    newWidth = width;\n    newHeight = height;\n  }\n\n  var xCenter = (xMax + xMin) / 2;\n  var yCenter = (yMax + yMin) / 2;\n  return [xCenter - newWidth / 2, yCenter - newHeight / 2, xCenter + newWidth / 2, yCenter + newHeight / 2];\n}\nexport function getTextureCoordinates(point, bounds) {\n  var _bounds = _slicedToArray(bounds, 4),\n      xMin = _bounds[0],\n      yMin = _bounds[1],\n      xMax = _bounds[2],\n      yMax = _bounds[3];\n\n  return [(point[0] - xMin) / (xMax - xMin), (point[1] - yMin) / (yMax - yMin)];\n}\nexport function getTextureParams(_ref) {\n  var gl = _ref.gl,\n      floatTargetSupport = _ref.floatTargetSupport;\n  return {\n    format: isWebGL2(gl) ? 34836 : 6408,\n    type: floatTargetSupport ? 5126 : 5121\n  };\n}","map":{"version":3,"sources":["../../../src/heatmap-layer/heatmap-layer-utils.js"],"names":["x","p","y","xMin","Math","xMax","yMin","yMax","targetBounds","currentBounds","scratchArray","dimensions","index","point","i","currentWidth","currentHeight","newWidth","newHeight","width","height","xCenter","yCenter","gl","floatTargetSupport","format","isWebGL2","type"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAAA,QAAA,QAAA,eAAA;AAEA,OAAO,SAAA,SAAA,CAAA,MAAA,EAA2B;AAEhC,MAAMA,CAAC,GAAG,MAAM,CAAN,GAAA,CAAW,UAAA,CAAA,EAAC;AAAA,WAAIC,CAAC,CAAL,CAAK,CAAL;AAAtB,GAAU,CAAV;AACA,MAAMC,CAAC,GAAG,MAAM,CAAN,GAAA,CAAW,UAAA,CAAA,EAAC;AAAA,WAAID,CAAC,CAAL,CAAK,CAAL;AAAtB,GAAU,CAAV;AAEA,MAAME,IAAI,GAAGC,IAAI,CAAJA,GAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAb,CAAaA,CAAb;AACA,MAAMC,IAAI,GAAGD,IAAI,CAAJA,GAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAb,CAAaA,CAAb;AACA,MAAME,IAAI,GAAGF,IAAI,CAAJA,GAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAb,CAAaA,CAAb;AACA,MAAMG,IAAI,GAAGH,IAAI,CAAJA,GAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAb,CAAaA,CAAb;AAEA,SAAO,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAP,IAAO,CAAP;AACD;AAGD,OAAO,SAAA,aAAA,CAAA,aAAA,EAAA,YAAA,EAAoD;AACzD,MACEI,YAAY,CAAZA,CAAY,CAAZA,IAAmBC,aAAa,CAAhCD,CAAgC,CAAhCA,IACAA,YAAY,CAAZA,CAAY,CAAZA,IAAmBC,aAAa,CADhCD,CACgC,CADhCA,IAEAA,YAAY,CAAZA,CAAY,CAAZA,IAAmBC,aAAa,CAFhCD,CAEgC,CAFhCA,IAGAA,YAAY,CAAZA,CAAY,CAAZA,IAAmBC,aAAa,CAJlC,CAIkC,CAJlC,EAKE;AACA,WAAA,IAAA;AACD;;AACD,SAAA,KAAA;AACD;AAED,IAAMC,YAAY,GAAG,IAAA,YAAA,CAArB,EAAqB,CAArB;AAGA,OAAO,SAAA,YAAA,CAAA,MAAA,EAA8C;AAAA,MAAhBC,UAAgB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAH,CAAG;AACnD,MAAIC,KAAK,GAAT,CAAA;;AADmD,MAAA,SAAA,GAAA,0BAAA,CAAA,MAAA,CAAA;AAAA,MAAA,KAAA;;AAAA,MAAA;AAEnD,SAAA,SAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAA4B;AAAA,UAAjBC,KAAiB,GAAA,KAAA,CAAA,KAAA;;AAC1B,WAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,UAAA,EAAgCA,CAAhC,EAAA,EAAqC;AACnCJ,QAAAA,YAAY,CAACE,KAAbF,EAAY,CAAZA,GAAwBG,KAAK,CAALA,CAAK,CAALA,IAAxBH,CAAAA;AACD;AACF;AANkD,GAAA,CAAA,OAAA,GAAA,EAAA;AAAA,IAAA,SAAA,CAAA,CAAA,CAAA,GAAA;AAAA,GAAA,SAAA;AAAA,IAAA,SAAA,CAAA,CAAA;AAAA;;AAOnD,SAAA,YAAA;AACD;AAGD,OAAO,SAAA,kBAAA,CAAA,WAAA,EAAA,KAAA,EAAA,MAAA,EAAwD;AAAA,MAAA,YAAA,GAAA,cAAA,CAAA,WAAA,EAAA,CAAA,CAAA;AAAA,MACtDP,IADsD,GAAA,YAAA,CAAA,CAAA,CAAA;AAAA,MAChDG,IADgD,GAAA,YAAA,CAAA,CAAA,CAAA;AAAA,MAC1CD,IAD0C,GAAA,YAAA,CAAA,CAAA,CAAA;AAAA,MACpCE,IADoC,GAAA,YAAA,CAAA,CAAA,CAAA;;AAG7D,MAAMQ,YAAY,GAAGV,IAAI,GAAzB,IAAA;AACA,MAAMW,aAAa,GAAGT,IAAI,GAA1B,IAAA;AAEA,MAAIU,QAAQ,GAAZ,YAAA;AACA,MAAIC,SAAS,GAAb,aAAA;;AACA,MAAIH,YAAY,GAAZA,aAAAA,GAA+BI,KAAK,GAAxC,MAAA,EAAmD;AAEjDF,IAAAA,QAAQ,GAAIE,KAAK,GAAN,MAACA,GAAZF,aAAAA;AAFF,GAAA,MAGO;AACLC,IAAAA,SAAS,GAAIE,MAAM,GAAP,KAACA,GAAbF,YAAAA;AACD;;AAED,MAAID,QAAQ,GAAZ,KAAA,EAAsB;AACpBA,IAAAA,QAAQ,GAARA,KAAAA;AACAC,IAAAA,SAAS,GAATA,MAAAA;AACD;;AAED,MAAMG,OAAO,GAAG,CAAChB,IAAI,GAAL,IAAA,IAAhB,CAAA;AACA,MAAMiB,OAAO,GAAG,CAACf,IAAI,GAAL,IAAA,IAAhB,CAAA;AAEA,SAAO,CACLc,OAAO,GAAGJ,QAAQ,GADb,CAAA,EAELK,OAAO,GAAGJ,SAAS,GAFd,CAAA,EAGLG,OAAO,GAAGJ,QAAQ,GAHb,CAAA,EAILK,OAAO,GAAGJ,SAAS,GAJrB,CAAO,CAAP;AAMD;AAGD,OAAO,SAAA,qBAAA,CAAA,KAAA,EAAA,MAAA,EAA8C;AAAA,MAAA,OAAA,GAAA,cAAA,CAAA,MAAA,EAAA,CAAA,CAAA;AAAA,MAC5Cf,IAD4C,GAAA,OAAA,CAAA,CAAA,CAAA;AAAA,MACtCG,IADsC,GAAA,OAAA,CAAA,CAAA,CAAA;AAAA,MAChCD,IADgC,GAAA,OAAA,CAAA,CAAA,CAAA;AAAA,MAC1BE,IAD0B,GAAA,OAAA,CAAA,CAAA,CAAA;;AAEnD,SAAO,CAAC,CAACM,KAAK,CAALA,CAAK,CAALA,GAAD,IAAA,KAAqBR,IAAI,GAA1B,IAAC,CAAD,EAAoC,CAACQ,KAAK,CAALA,CAAK,CAALA,GAAD,IAAA,KAAqBN,IAAI,GAApE,IAA2C,CAApC,CAAP;AACD;AAGD,OAAO,SAAA,gBAAA,CAAA,IAAA,EAAoD;AAAA,MAAzBgB,EAAyB,GAAA,IAAA,CAAzBA,EAAyB;AAAA,MAArBC,kBAAqB,GAAA,IAAA,CAArBA,kBAAqB;AACzD,SAAO;AAELC,IAAAA,MAAM,EAAEC,QAAQ,CAARA,EAAQ,CAARA,GAAAA,KAAAA,GAFH,IAAA;AAGLC,IAAAA,IAAI,EAAEH,kBAAkB,GAAA,IAAA,GAAA;AAHnB,GAAP;AAKD","sourcesContent":["import GL from '@luma.gl/constants';\nimport {isWebGL2} from '@luma.gl/core';\n\nexport function getBounds(points) {\n  // Now build bounding box in world space (aligned to world coordiante system)\n  const x = points.map(p => p[0]);\n  const y = points.map(p => p[1]);\n\n  const xMin = Math.min.apply(null, x);\n  const xMax = Math.max.apply(null, x);\n  const yMin = Math.min.apply(null, y);\n  const yMax = Math.max.apply(null, y);\n\n  return [xMin, yMin, xMax, yMax];\n}\n\n// true if currentBounds contains targetBounds, false otherwise\nexport function boundsContain(currentBounds, targetBounds) {\n  if (\n    targetBounds[0] >= currentBounds[0] &&\n    targetBounds[2] <= currentBounds[2] &&\n    targetBounds[1] >= currentBounds[1] &&\n    targetBounds[3] <= currentBounds[3]\n  ) {\n    return true;\n  }\n  return false;\n}\n\nconst scratchArray = new Float32Array(12);\n\n// For given rectangle bounds generates two triangles vertices that coverit completely\nexport function packVertices(points, dimensions = 2) {\n  let index = 0;\n  for (const point of points) {\n    for (let i = 0; i < dimensions; i++) {\n      scratchArray[index++] = point[i] || 0;\n    }\n  }\n  return scratchArray;\n}\n\n// Expands boundingBox:[xMin, yMin, xMax, yMax] to match aspect ratio of given width and height\nexport function scaleToAspectRatio(boundingBox, width, height) {\n  const [xMin, yMin, xMax, yMax] = boundingBox;\n\n  const currentWidth = xMax - xMin;\n  const currentHeight = yMax - yMin;\n\n  let newWidth = currentWidth;\n  let newHeight = currentHeight;\n  if (currentWidth / currentHeight < width / height) {\n    // expand bounding box width\n    newWidth = (width / height) * currentHeight;\n  } else {\n    newHeight = (height / width) * currentWidth;\n  }\n\n  if (newWidth < width) {\n    newWidth = width;\n    newHeight = height;\n  }\n\n  const xCenter = (xMax + xMin) / 2;\n  const yCenter = (yMax + yMin) / 2;\n\n  return [\n    xCenter - newWidth / 2,\n    yCenter - newHeight / 2,\n    xCenter + newWidth / 2,\n    yCenter + newHeight / 2\n  ];\n}\n\n// Get texture coordiante of point inside a bounding box\nexport function getTextureCoordinates(point, bounds) {\n  const [xMin, yMin, xMax, yMax] = bounds;\n  return [(point[0] - xMin) / (xMax - xMin), (point[1] - yMin) / (yMax - yMin)];\n}\n\n// Returns format and type for creating texture objects\nexport function getTextureParams({gl, floatTargetSupport}) {\n  return {\n    // format:  should be RGBA32F on WebGL2 (float textures), RGBA in WebGL1 for float or non float textures\n    format: isWebGL2(gl) ? GL.RGBA32F : GL.RGBA,\n    type: floatTargetSupport ? GL.FLOAT : GL.UNSIGNED_BYTE\n  };\n}\n"]},"metadata":{},"sourceType":"module"}