{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport TransitionManager from './transition-manager';\nimport assert from '../utils/assert';\nvar NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\nvar DEFAULT_INERTIA = 300;\n\nvar INERTIA_EASING = function INERTIA_EASING(t) {\n  return 1 - (1 - t) * (1 - t);\n};\n\nvar EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  TRIPLE_PAN: ['tripanstart', 'tripanmove', 'tripanend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\nvar Controller = function () {\n  function Controller(ControllerState) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Controller);\n\n    assert(ControllerState);\n    this.ControllerState = ControllerState;\n    this.controllerState = null;\n    this.controllerStateProps = null;\n    this.eventManager = null;\n    this.transitionManager = new TransitionManager(ControllerState, _objectSpread(_objectSpread({}, options), {}, {\n      onViewStateChange: this._onTransition.bind(this),\n      onStateChange: this._setInteractionState.bind(this)\n    }));\n    this._events = null;\n    this._interactionState = {\n      isDragging: false\n    };\n    this._customEvents = [];\n    this.onViewStateChange = null;\n    this.onStateChange = null;\n    this.handleEvent = this.handleEvent.bind(this);\n    this.setProps(options);\n  }\n\n  _createClass(Controller, [{\n    key: \"finalize\",\n    value: function finalize() {\n      for (var eventName in this._events) {\n        if (this._events[eventName]) {\n          this.eventManager.off(eventName, this.handleEvent);\n        }\n      }\n\n      this.transitionManager.finalize();\n    }\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(event) {\n      var ControllerState = this.ControllerState;\n      this.controllerState = new ControllerState(_objectSpread(_objectSpread({\n        makeViewport: this.makeViewport\n      }, this.controllerStateProps), this._state));\n      var eventStartBlocked = this._eventStartBlocked;\n\n      switch (event.type) {\n        case 'panstart':\n          return eventStartBlocked ? false : this._onPanStart(event);\n\n        case 'panmove':\n          return this._onPan(event);\n\n        case 'panend':\n          return this._onPanEnd(event);\n\n        case 'pinchstart':\n          return eventStartBlocked ? false : this._onPinchStart(event);\n\n        case 'pinchmove':\n          return this._onPinch(event);\n\n        case 'pinchend':\n          return this._onPinchEnd(event);\n\n        case 'tripanstart':\n          return eventStartBlocked ? false : this._onTriplePanStart(event);\n\n        case 'tripanmove':\n          return this._onTriplePan(event);\n\n        case 'tripanend':\n          return this._onTriplePanEnd(event);\n\n        case 'doubletap':\n          return this._onDoubleTap(event);\n\n        case 'wheel':\n          return this._onWheel(event);\n\n        case 'keydown':\n          return this._onKeyDown(event);\n\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter(event) {\n      var _this$controllerState = this.controllerStateProps,\n          x = _this$controllerState.x,\n          y = _this$controllerState.y;\n      var offsetCenter = event.offsetCenter;\n      return [offsetCenter.x - x, offsetCenter.y - y];\n    }\n  }, {\n    key: \"isPointInBounds\",\n    value: function isPointInBounds(pos, event) {\n      var _this$controllerState2 = this.controllerStateProps,\n          width = _this$controllerState2.width,\n          height = _this$controllerState2.height;\n\n      if (event && event.handled) {\n        return false;\n      }\n\n      var inside = pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;\n\n      if (inside && event) {\n        event.stopPropagation();\n      }\n\n      return inside;\n    }\n  }, {\n    key: \"isFunctionKeyPressed\",\n    value: function isFunctionKeyPressed(event) {\n      var srcEvent = event.srcEvent;\n      return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n    }\n  }, {\n    key: \"isDragging\",\n    value: function isDragging() {\n      return this._interactionState.isDragging;\n    }\n  }, {\n    key: \"blockEvents\",\n    value: function blockEvents(timeout) {\n      var _this = this;\n\n      var timer = setTimeout(function () {\n        if (_this._eventStartBlocked === timer) {\n          _this._eventStartBlocked = null;\n        }\n      }, timeout);\n      this._eventStartBlocked = timer;\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      if ('onViewStateChange' in props) {\n        this.onViewStateChange = props.onViewStateChange;\n      }\n\n      if ('onStateChange' in props) {\n        this.onStateChange = props.onStateChange;\n      }\n\n      if ('makeViewport' in props) {\n        this.makeViewport = props.makeViewport;\n      }\n\n      if ('dragMode' in props) {\n        this.dragMode = props.dragMode;\n      }\n\n      this.controllerStateProps = props;\n\n      if ('eventManager' in props && this.eventManager !== props.eventManager) {\n        this.eventManager = props.eventManager;\n        this._events = {};\n        this.toggleEvents(this._customEvents, true);\n      }\n\n      if (!('transitionInterpolator' in props)) {\n        props.transitionInterpolator = this._getTransitionProps().transitionInterpolator;\n      }\n\n      this.transitionManager.processViewStateChange(props);\n      var inertia = props.inertia;\n\n      if (inertia === true) {\n        inertia = DEFAULT_INERTIA;\n      }\n\n      this.inertia = inertia;\n      var _props$scrollZoom = props.scrollZoom,\n          scrollZoom = _props$scrollZoom === void 0 ? true : _props$scrollZoom,\n          _props$dragPan = props.dragPan,\n          dragPan = _props$dragPan === void 0 ? true : _props$dragPan,\n          _props$dragRotate = props.dragRotate,\n          dragRotate = _props$dragRotate === void 0 ? true : _props$dragRotate,\n          _props$doubleClickZoo = props.doubleClickZoom,\n          doubleClickZoom = _props$doubleClickZoo === void 0 ? true : _props$doubleClickZoo,\n          _props$touchZoom = props.touchZoom,\n          touchZoom = _props$touchZoom === void 0 ? true : _props$touchZoom,\n          _props$touchRotate = props.touchRotate,\n          touchRotate = _props$touchRotate === void 0 ? false : _props$touchRotate,\n          _props$keyboard = props.keyboard,\n          keyboard = _props$keyboard === void 0 ? true : _props$keyboard;\n      var isInteractive = Boolean(this.onViewStateChange);\n      this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n      this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n      this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n      this.toggleEvents(EVENT_TYPES.TRIPLE_PAN, isInteractive && touchRotate);\n      this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n      this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n      this.scrollZoom = scrollZoom;\n      this.dragPan = dragPan;\n      this.dragRotate = dragRotate;\n      this.doubleClickZoom = doubleClickZoom;\n      this.touchZoom = touchZoom;\n      this.touchRotate = touchRotate;\n      this.keyboard = keyboard;\n    }\n  }, {\n    key: \"updateTransition\",\n    value: function updateTransition() {\n      this.transitionManager.updateTransition();\n    }\n  }, {\n    key: \"toggleEvents\",\n    value: function toggleEvents(eventNames, enabled) {\n      var _this2 = this;\n\n      if (this.eventManager) {\n        eventNames.forEach(function (eventName) {\n          if (_this2._events[eventName] !== enabled) {\n            _this2._events[eventName] = enabled;\n\n            if (enabled) {\n              _this2.eventManager.on(eventName, _this2.handleEvent);\n            } else {\n              _this2.eventManager.off(eventName, _this2.handleEvent);\n            }\n          }\n        });\n      }\n    }\n  }, {\n    key: \"updateViewport\",\n    value: function updateViewport(newControllerState) {\n      var extraProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var interactionState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var viewState = Object.assign({}, newControllerState.getViewportProps(), extraProps);\n      var changed = this.controllerState !== newControllerState;\n      this._state = newControllerState.getState();\n\n      this._setInteractionState(interactionState);\n\n      if (changed) {\n        var oldViewState = this.controllerState ? this.controllerState.getViewportProps() : null;\n\n        if (this.onViewStateChange) {\n          this.onViewStateChange({\n            viewState: viewState,\n            interactionState: this._interactionState,\n            oldViewState: oldViewState\n          });\n        }\n      }\n    }\n  }, {\n    key: \"_onTransition\",\n    value: function _onTransition(params) {\n      if (this.onViewStateChange) {\n        params.interactionState = this._interactionState;\n        this.onViewStateChange(params);\n      }\n    }\n  }, {\n    key: \"_setInteractionState\",\n    value: function _setInteractionState(newStates) {\n      Object.assign(this._interactionState, newStates);\n\n      if (this.onStateChange) {\n        this.onStateChange(this._interactionState);\n      }\n    }\n  }, {\n    key: \"_onPanStart\",\n    value: function _onPanStart(event) {\n      var pos = this.getCenter(event);\n\n      if (!this.isPointInBounds(pos, event)) {\n        return false;\n      }\n\n      var alternateMode = this.isFunctionKeyPressed(event) || event.rightButton;\n\n      if (this.invertPan || this.dragMode === 'pan') {\n        alternateMode = !alternateMode;\n      }\n\n      var newControllerState = this.controllerState[alternateMode ? 'panStart' : 'rotateStart']({\n        pos: pos\n      });\n      this._panMove = alternateMode;\n      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPan\",\n    value: function _onPan(event) {\n      if (!this.isDragging()) {\n        return false;\n      }\n\n      return this._panMove ? this._onPanMove(event) : this._onPanRotate(event);\n    }\n  }, {\n    key: \"_onPanEnd\",\n    value: function _onPanEnd(event) {\n      if (!this.isDragging()) {\n        return false;\n      }\n\n      return this._panMove ? this._onPanMoveEnd(event) : this._onPanRotateEnd(event);\n    }\n  }, {\n    key: \"_onPanMove\",\n    value: function _onPanMove(event) {\n      if (!this.dragPan) {\n        return false;\n      }\n\n      var pos = this.getCenter(event);\n      var newControllerState = this.controllerState.pan({\n        pos: pos\n      });\n      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true,\n        isPanning: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPanMoveEnd\",\n    value: function _onPanMoveEnd(event) {\n      var inertia = this.inertia;\n\n      if (this.dragPan && inertia && event.velocity) {\n        var pos = this.getCenter(event);\n        var endPos = [pos[0] + event.velocityX * inertia / 2, pos[1] + event.velocityY * inertia / 2];\n        var newControllerState = this.controllerState.pan({\n          pos: endPos\n        }).panEnd();\n        this.updateViewport(newControllerState, _objectSpread(_objectSpread({}, this._getTransitionProps()), {}, {\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        }), {\n          isDragging: false,\n          isPanning: true\n        });\n      } else {\n        var _newControllerState = this.controllerState.panEnd();\n\n        this.updateViewport(_newControllerState, null, {\n          isDragging: false,\n          isPanning: false\n        });\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_onPanRotate\",\n    value: function _onPanRotate(event) {\n      if (!this.dragRotate) {\n        return false;\n      }\n\n      var pos = this.getCenter(event);\n      var newControllerState = this.controllerState.rotate({\n        pos: pos\n      });\n      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true,\n        isRotating: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPanRotateEnd\",\n    value: function _onPanRotateEnd(event) {\n      var inertia = this.inertia;\n\n      if (this.dragRotate && inertia && event.velocity) {\n        var pos = this.getCenter(event);\n        var endPos = [pos[0] + event.velocityX * inertia / 2, pos[1] + event.velocityY * inertia / 2];\n        var newControllerState = this.controllerState.rotate({\n          pos: endPos\n        }).rotateEnd();\n        this.updateViewport(newControllerState, _objectSpread(_objectSpread({}, this._getTransitionProps()), {}, {\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        }), {\n          isDragging: false,\n          isRotating: true\n        });\n      } else {\n        var _newControllerState2 = this.controllerState.rotateEnd();\n\n        this.updateViewport(_newControllerState2, null, {\n          isDragging: false,\n          isRotating: false\n        });\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_onWheel\",\n    value: function _onWheel(event) {\n      if (!this.scrollZoom) {\n        return false;\n      }\n\n      event.preventDefault();\n      var pos = this.getCenter(event);\n\n      if (!this.isPointInBounds(pos, event)) {\n        return false;\n      }\n\n      var _this$scrollZoom = this.scrollZoom,\n          _this$scrollZoom$spee = _this$scrollZoom.speed,\n          speed = _this$scrollZoom$spee === void 0 ? 0.01 : _this$scrollZoom$spee,\n          _this$scrollZoom$smoo = _this$scrollZoom.smooth,\n          smooth = _this$scrollZoom$smoo === void 0 ? false : _this$scrollZoom$smoo;\n      var delta = event.delta;\n      var scale = 2 / (1 + Math.exp(-Math.abs(delta * speed)));\n\n      if (delta < 0 && scale !== 0) {\n        scale = 1 / scale;\n      }\n\n      var newControllerState = this.controllerState.zoom({\n        pos: pos,\n        scale: scale\n      });\n      this.updateViewport(newControllerState, _objectSpread(_objectSpread({}, this._getTransitionProps({\n        around: pos\n      })), {}, {\n        transitionDuration: smooth ? 250 : 1\n      }), {\n        isZooming: true,\n        isPanning: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onTriplePanStart\",\n    value: function _onTriplePanStart(event) {\n      var pos = this.getCenter(event);\n\n      if (!this.isPointInBounds(pos, event)) {\n        return false;\n      }\n\n      var newControllerState = this.controllerState.rotateStart({\n        pos: pos\n      });\n      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onTriplePan\",\n    value: function _onTriplePan(event) {\n      if (!this.touchRotate) {\n        return false;\n      }\n\n      if (!this.isDragging()) {\n        return false;\n      }\n\n      var pos = this.getCenter(event);\n      pos[0] -= event.deltaX;\n      var newControllerState = this.controllerState.rotate({\n        pos: pos\n      });\n      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true,\n        isRotating: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onTriplePanEnd\",\n    value: function _onTriplePanEnd(event) {\n      if (!this.isDragging()) {\n        return false;\n      }\n\n      var inertia = this.inertia;\n\n      if (this.touchRotate && inertia && event.velocityY) {\n        var pos = this.getCenter(event);\n        var endPos = [pos[0], pos[1] += event.velocityY * inertia / 2];\n        var newControllerState = this.controllerState.rotate({\n          pos: endPos\n        });\n        this.updateViewport(newControllerState, _objectSpread(_objectSpread({}, this._getTransitionProps()), {}, {\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        }), {\n          isDragging: false,\n          isRotating: true\n        });\n        this.blockEvents(inertia);\n      } else {\n        var _newControllerState3 = this.controllerState.rotateEnd();\n\n        this.updateViewport(_newControllerState3, null, {\n          isDragging: false,\n          isRotating: false\n        });\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_onPinchStart\",\n    value: function _onPinchStart(event) {\n      var pos = this.getCenter(event);\n\n      if (!this.isPointInBounds(pos, event)) {\n        return false;\n      }\n\n      var newControllerState = this.controllerState.zoomStart({\n        pos: pos\n      }).rotateStart({\n        pos: pos\n      });\n      this._startPinchRotation = event.rotation;\n      this._lastPinchEvent = event;\n      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPinch\",\n    value: function _onPinch(event) {\n      if (!this.touchZoom && !this.touchRotate) {\n        return false;\n      }\n\n      if (!this.isDragging()) {\n        return false;\n      }\n\n      var newControllerState = this.controllerState;\n\n      if (this.touchZoom) {\n        var scale = event.scale;\n        var pos = this.getCenter(event);\n        newControllerState = newControllerState.zoom({\n          pos: pos,\n          scale: scale\n        });\n      }\n\n      if (this.touchRotate) {\n        var rotation = event.rotation;\n        newControllerState = newControllerState.rotate({\n          deltaAngleX: this._startPinchRotation - rotation\n        });\n      }\n\n      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true,\n        isPanning: this.touchZoom,\n        isZooming: this.touchZoom,\n        isRotating: this.touchRotate\n      });\n      this._lastPinchEvent = event;\n      return true;\n    }\n  }, {\n    key: \"_onPinchEnd\",\n    value: function _onPinchEnd(event) {\n      if (!this.isDragging()) {\n        return false;\n      }\n\n      var inertia = this.inertia,\n          _lastPinchEvent = this._lastPinchEvent;\n\n      if (this.touchZoom && inertia && _lastPinchEvent && event.scale !== _lastPinchEvent.scale) {\n        var pos = this.getCenter(event);\n        var newControllerState = this.controllerState.rotateEnd();\n        var z = Math.log2(event.scale);\n\n        var velocityZ = (z - Math.log2(_lastPinchEvent.scale)) / (event.deltaTime - _lastPinchEvent.deltaTime);\n\n        var endScale = Math.pow(2, z + velocityZ * inertia / 2);\n        newControllerState = newControllerState.zoom({\n          pos: pos,\n          scale: endScale\n        }).zoomEnd();\n        this.updateViewport(newControllerState, _objectSpread(_objectSpread({}, this._getTransitionProps({\n          around: pos\n        })), {}, {\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        }), {\n          isDragging: false,\n          isPanning: this.touchZoom,\n          isZooming: this.touchZoom,\n          isRotating: false\n        });\n        this.blockEvents(inertia);\n      } else {\n        var _newControllerState4 = this.controllerState.zoomEnd().rotateEnd();\n\n        this.updateViewport(_newControllerState4, null, {\n          isDragging: false,\n          isPanning: false,\n          isZooming: false,\n          isRotating: false\n        });\n      }\n\n      this._startPinchRotation = null;\n      this._lastPinchEvent = null;\n      return true;\n    }\n  }, {\n    key: \"_onDoubleTap\",\n    value: function _onDoubleTap(event) {\n      if (!this.doubleClickZoom) {\n        return false;\n      }\n\n      var pos = this.getCenter(event);\n\n      if (!this.isPointInBounds(pos, event)) {\n        return false;\n      }\n\n      var isZoomOut = this.isFunctionKeyPressed(event);\n      var newControllerState = this.controllerState.zoom({\n        pos: pos,\n        scale: isZoomOut ? 0.5 : 2\n      });\n      this.updateViewport(newControllerState, this._getTransitionProps({\n        around: pos\n      }), {\n        isZooming: true,\n        isPanning: true\n      });\n      this.blockEvents(100);\n      return true;\n    }\n  }, {\n    key: \"_onKeyDown\",\n    value: function _onKeyDown(event) {\n      if (!this.keyboard) {\n        return false;\n      }\n\n      var funcKey = this.isFunctionKeyPressed(event);\n      var _this$keyboard = this.keyboard,\n          zoomSpeed = _this$keyboard.zoomSpeed,\n          moveSpeed = _this$keyboard.moveSpeed,\n          rotateSpeedX = _this$keyboard.rotateSpeedX,\n          rotateSpeedY = _this$keyboard.rotateSpeedY;\n      var controllerState = this.controllerState;\n      var newControllerState;\n      var interactionState = {};\n\n      switch (event.srcEvent.code) {\n        case 'Minus':\n          newControllerState = funcKey ? controllerState.zoomOut(zoomSpeed).zoomOut(zoomSpeed) : controllerState.zoomOut(zoomSpeed);\n          interactionState.isZooming = true;\n          break;\n\n        case 'Equal':\n          newControllerState = funcKey ? controllerState.zoomIn(zoomSpeed).zoomIn(zoomSpeed) : controllerState.zoomIn(zoomSpeed);\n          interactionState.isZooming = true;\n          break;\n\n        case 'ArrowLeft':\n          if (funcKey) {\n            newControllerState = controllerState.rotateLeft(rotateSpeedX);\n            interactionState.isRotating = true;\n          } else {\n            newControllerState = controllerState.moveLeft(moveSpeed);\n            interactionState.isPanning = true;\n          }\n\n          break;\n\n        case 'ArrowRight':\n          if (funcKey) {\n            newControllerState = controllerState.rotateRight(rotateSpeedX);\n            interactionState.isRotating = true;\n          } else {\n            newControllerState = controllerState.moveRight(moveSpeed);\n            interactionState.isPanning = true;\n          }\n\n          break;\n\n        case 'ArrowUp':\n          if (funcKey) {\n            newControllerState = controllerState.rotateUp(rotateSpeedY);\n            interactionState.isRotating = true;\n          } else {\n            newControllerState = controllerState.moveUp(moveSpeed);\n            interactionState.isPanning = true;\n          }\n\n          break;\n\n        case 'ArrowDown':\n          if (funcKey) {\n            newControllerState = controllerState.rotateDown(rotateSpeedY);\n            interactionState.isRotating = true;\n          } else {\n            newControllerState = controllerState.moveDown(moveSpeed);\n            interactionState.isPanning = true;\n          }\n\n          break;\n\n        default:\n          return false;\n      }\n\n      this.updateViewport(newControllerState, this._getTransitionProps(), interactionState);\n      return true;\n    }\n  }, {\n    key: \"_getTransitionProps\",\n    value: function _getTransitionProps() {\n      return NO_TRANSITION_PROPS;\n    }\n  }, {\n    key: \"events\",\n    set: function set(customEvents) {\n      this.toggleEvents(this._customEvents, false);\n      this.toggleEvents(customEvents, true);\n      this._customEvents = customEvents;\n      this.setProps(this.controllerStateProps);\n    }\n  }]);\n\n  return Controller;\n}();\n\nexport { Controller as default };","map":{"version":3,"sources":["../../../src/controllers/controller.js"],"names":["NO_TRANSITION_PROPS","transitionDuration","DEFAULT_INERTIA","INERTIA_EASING","EVENT_TYPES","WHEEL","PAN","PINCH","TRIPLE_PAN","DOUBLE_TAP","KEYBOARD","Controller","options","assert","onViewStateChange","onStateChange","isDragging","customEvents","event","ControllerState","makeViewport","eventStartBlocked","x","y","offsetCenter","pos","width","height","inside","srcEvent","Boolean","timeout","timer","setTimeout","props","inertia","scrollZoom","dragPan","dragRotate","doubleClickZoom","touchZoom","touchRotate","keyboard","isInteractive","eventNames","enabled","newControllerState","extraProps","interactionState","viewState","Object","changed","oldViewState","params","newStates","alternateMode","isPanning","endPos","transitionEasing","isRotating","speed","smooth","delta","scale","Math","around","isZooming","rotation","deltaAngleX","_lastPinchEvent","z","velocityZ","endScale","isZoomOut","funcKey","zoomSpeed","moveSpeed","rotateSpeedX","rotateSpeedY","controllerState"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable max-statements, complexity */\nimport TransitionManager from './transition-manager';\nimport assert from '../utils/assert';\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\n\nconst DEFAULT_INERTIA = 300;\nconst INERTIA_EASING = t => 1 - (1 - t) * (1 - t);\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  TRIPLE_PAN: ['tripanstart', 'tripanmove', 'tripanend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\nexport default class Controller {\n  constructor(ControllerState, options = {}) {\n    assert(ControllerState);\n    this.ControllerState = ControllerState;\n    this.controllerState = null;\n    this.controllerStateProps = null;\n    this.eventManager = null;\n    this.transitionManager = new TransitionManager(ControllerState, {\n      ...options,\n      onViewStateChange: this._onTransition.bind(this),\n      onStateChange: this._setInteractionState.bind(this)\n    });\n    this._events = null;\n    this._interactionState = {\n      isDragging: false\n    };\n    this._customEvents = [];\n    this.onViewStateChange = null;\n    this.onStateChange = null;\n\n    this.handleEvent = this.handleEvent.bind(this);\n\n    this.setProps(options);\n  }\n\n  set events(customEvents) {\n    this.toggleEvents(this._customEvents, false);\n    this.toggleEvents(customEvents, true);\n    this._customEvents = customEvents;\n    // Make sure default events are not overwritten\n    this.setProps(this.controllerStateProps);\n  }\n\n  finalize() {\n    for (const eventName in this._events) {\n      if (this._events[eventName]) {\n        this.eventManager.off(eventName, this.handleEvent);\n      }\n    }\n    this.transitionManager.finalize();\n  }\n\n  /**\n   * Callback for events\n   * @param {hammer.Event} event\n   */\n  handleEvent(event) {\n    const {ControllerState} = this;\n    this.controllerState = new ControllerState({\n      makeViewport: this.makeViewport,\n      ...this.controllerStateProps,\n      ...this._state\n    });\n    const eventStartBlocked = this._eventStartBlocked;\n\n    switch (event.type) {\n      case 'panstart':\n        return eventStartBlocked ? false : this._onPanStart(event);\n      case 'panmove':\n        return this._onPan(event);\n      case 'panend':\n        return this._onPanEnd(event);\n      case 'pinchstart':\n        return eventStartBlocked ? false : this._onPinchStart(event);\n      case 'pinchmove':\n        return this._onPinch(event);\n      case 'pinchend':\n        return this._onPinchEnd(event);\n      case 'tripanstart':\n        return eventStartBlocked ? false : this._onTriplePanStart(event);\n      case 'tripanmove':\n        return this._onTriplePan(event);\n      case 'tripanend':\n        return this._onTriplePanEnd(event);\n      case 'doubletap':\n        return this._onDoubleTap(event);\n      case 'wheel':\n        return this._onWheel(event);\n      case 'keydown':\n        return this._onKeyDown(event);\n      default:\n        return false;\n    }\n  }\n\n  /* Event utils */\n  // Event object: http://hammerjs.github.io/api/#event-object\n  getCenter(event) {\n    const {x, y} = this.controllerStateProps;\n    const {offsetCenter} = event;\n    return [offsetCenter.x - x, offsetCenter.y - y];\n  }\n\n  isPointInBounds(pos, event) {\n    const {width, height} = this.controllerStateProps;\n    if (event && event.handled) {\n      return false;\n    }\n\n    const inside = pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;\n    if (inside && event) {\n      event.stopPropagation();\n    }\n    return inside;\n  }\n\n  isFunctionKeyPressed(event) {\n    const {srcEvent} = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  isDragging() {\n    return this._interactionState.isDragging;\n  }\n\n  // When a multi-touch event ends, e.g. pinch, not all pointers are lifted at the same time.\n  // This triggers a brief `pan` event.\n  // Calling this method will temporarily disable *start events to avoid conflicting transitions.\n  blockEvents(timeout) {\n    /* global setTimeout */\n    const timer = setTimeout(() => {\n      if (this._eventStartBlocked === timer) {\n        this._eventStartBlocked = null;\n      }\n    }, timeout);\n    this._eventStartBlocked = timer;\n  }\n\n  /**\n   * Extract interactivity options\n   */\n  setProps(props) {\n    if ('onViewStateChange' in props) {\n      this.onViewStateChange = props.onViewStateChange;\n    }\n    if ('onStateChange' in props) {\n      this.onStateChange = props.onStateChange;\n    }\n    if ('makeViewport' in props) {\n      this.makeViewport = props.makeViewport;\n    }\n    if ('dragMode' in props) {\n      this.dragMode = props.dragMode;\n    }\n    this.controllerStateProps = props;\n\n    if ('eventManager' in props && this.eventManager !== props.eventManager) {\n      // EventManager has changed\n      this.eventManager = props.eventManager;\n      this._events = {};\n      this.toggleEvents(this._customEvents, true);\n    }\n\n    if (!('transitionInterpolator' in props)) {\n      // Add default transition interpolator\n      props.transitionInterpolator = this._getTransitionProps().transitionInterpolator;\n    }\n\n    this.transitionManager.processViewStateChange(props);\n\n    let {inertia} = props;\n    if (inertia === true) {\n      inertia = DEFAULT_INERTIA;\n    }\n    this.inertia = inertia;\n\n    // TODO - make sure these are not reset on every setProps\n    const {\n      scrollZoom = true,\n      dragPan = true,\n      dragRotate = true,\n      doubleClickZoom = true,\n      touchZoom = true,\n      touchRotate = false,\n      keyboard = true\n    } = props;\n\n    // Register/unregister events\n    const isInteractive = Boolean(this.onViewStateChange);\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.TRIPLE_PAN, isInteractive && touchRotate);\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n\n    // Interaction toggles\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n\n  updateTransition() {\n    this.transitionManager.updateTransition();\n  }\n\n  toggleEvents(eventNames, enabled) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n          if (enabled) {\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  // Private Methods\n\n  /* Callback util */\n  // formats map state and invokes callback function\n  updateViewport(newControllerState, extraProps = {}, interactionState = {}) {\n    const viewState = Object.assign({}, newControllerState.getViewportProps(), extraProps);\n\n    // TODO - to restore diffing, we need to include interactionState\n    const changed = this.controllerState !== newControllerState;\n    // const oldViewState = this.controllerState.getViewportProps();\n    // const changed = Object.keys(viewState).some(key => oldViewState[key] !== viewState[key]);\n\n    this._state = newControllerState.getState();\n    this._setInteractionState(interactionState);\n\n    if (changed) {\n      const oldViewState = this.controllerState ? this.controllerState.getViewportProps() : null;\n      if (this.onViewStateChange) {\n        this.onViewStateChange({viewState, interactionState: this._interactionState, oldViewState});\n      }\n    }\n  }\n\n  _onTransition(params) {\n    if (this.onViewStateChange) {\n      params.interactionState = this._interactionState;\n      this.onViewStateChange(params);\n    }\n  }\n\n  _setInteractionState(newStates) {\n    Object.assign(this._interactionState, newStates);\n    if (this.onStateChange) {\n      this.onStateChange(this._interactionState);\n    }\n  }\n\n  /* Event handlers */\n  // Default handler for the `panstart` event.\n  _onPanStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    let alternateMode = this.isFunctionKeyPressed(event) || event.rightButton;\n    if (this.invertPan || this.dragMode === 'pan') {\n      // invertPan is replaced by props.dragMode, keeping for backward compatibility\n      alternateMode = !alternateMode;\n    }\n    const newControllerState = this.controllerState[alternateMode ? 'panStart' : 'rotateStart']({\n      pos\n    });\n    this._panMove = alternateMode;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `panmove` and `panend` event.\n  _onPan(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panMove ? this._onPanMove(event) : this._onPanRotate(event);\n  }\n\n  _onPanEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panMove ? this._onPanMoveEnd(event) : this._onPanRotateEnd(event);\n  }\n\n  // Default handler for panning to move.\n  // Called by `_onPan` when panning without function key pressed.\n  _onPanMove(event) {\n    if (!this.dragPan) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.pan({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: true\n    });\n    return true;\n  }\n\n  _onPanMoveEnd(event) {\n    const {inertia} = this;\n    if (this.dragPan && inertia && event.velocity) {\n      const pos = this.getCenter(event);\n      const endPos = [\n        pos[0] + (event.velocityX * inertia) / 2,\n        pos[1] + (event.velocityY * inertia) / 2\n      ];\n      const newControllerState = this.controllerState.pan({pos: endPos}).panEnd();\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isPanning: true\n        }\n      );\n    } else {\n      const newControllerState = this.controllerState.panEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for panning to rotate.\n  // Called by `_onPan` when panning with function key pressed.\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.rotate({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  _onPanRotateEnd(event) {\n    const {inertia} = this;\n    if (this.dragRotate && inertia && event.velocity) {\n      const pos = this.getCenter(event);\n      const endPos = [\n        pos[0] + (event.velocityX * inertia) / 2,\n        pos[1] + (event.velocityY * inertia) / 2\n      ];\n      const newControllerState = this.controllerState.rotate({pos: endPos}).rotateEnd();\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isRotating: true\n        }\n      );\n    } else {\n      const newControllerState = this.controllerState.rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for the `wheel` event.\n  _onWheel(event) {\n    if (!this.scrollZoom) {\n      return false;\n    }\n    event.preventDefault();\n\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const {speed = 0.01, smooth = false} = this.scrollZoom;\n    const {delta} = event;\n\n    // Map wheel delta to relative scale\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * speed)));\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newControllerState = this.controllerState.zoom({pos, scale});\n    this.updateViewport(\n      newControllerState,\n      {...this._getTransitionProps({around: pos}), transitionDuration: smooth ? 250 : 1},\n      {\n        isZooming: true,\n        isPanning: true\n      }\n    );\n    return true;\n  }\n\n  _onTriplePanStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    const newControllerState = this.controllerState.rotateStart({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  _onTriplePan(event) {\n    if (!this.touchRotate) {\n      return false;\n    }\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    pos[0] -= event.deltaX;\n\n    const newControllerState = this.controllerState.rotate({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  _onTriplePanEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    const {inertia} = this;\n    if (this.touchRotate && inertia && event.velocityY) {\n      const pos = this.getCenter(event);\n      const endPos = [pos[0], (pos[1] += (event.velocityY * inertia) / 2)];\n      const newControllerState = this.controllerState.rotate({pos: endPos});\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isRotating: true\n        }\n      );\n      this.blockEvents(inertia);\n    } else {\n      const newControllerState = this.controllerState.rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for the `pinchstart` event.\n  _onPinchStart(event) {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const newControllerState = this.controllerState.zoomStart({pos}).rotateStart({pos});\n    // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n    this._startPinchRotation = event.rotation;\n    this._lastPinchEvent = event;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `pinchmove` and `pinchend` events.\n  _onPinch(event) {\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    let newControllerState = this.controllerState;\n    if (this.touchZoom) {\n      const {scale} = event;\n      const pos = this.getCenter(event);\n      newControllerState = newControllerState.zoom({pos, scale});\n    }\n    if (this.touchRotate) {\n      const {rotation} = event;\n      newControllerState = newControllerState.rotate({\n        deltaAngleX: this._startPinchRotation - rotation\n      });\n    }\n\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: this.touchZoom,\n      isZooming: this.touchZoom,\n      isRotating: this.touchRotate\n    });\n    this._lastPinchEvent = event;\n    return true;\n  }\n\n  _onPinchEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    const {inertia, _lastPinchEvent} = this;\n    if (this.touchZoom && inertia && _lastPinchEvent && event.scale !== _lastPinchEvent.scale) {\n      const pos = this.getCenter(event);\n      let newControllerState = this.controllerState.rotateEnd();\n      const z = Math.log2(event.scale);\n      const velocityZ =\n        (z - Math.log2(_lastPinchEvent.scale)) / (event.deltaTime - _lastPinchEvent.deltaTime);\n      const endScale = Math.pow(2, z + (velocityZ * inertia) / 2);\n      newControllerState = newControllerState.zoom({pos, scale: endScale}).zoomEnd();\n\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps({around: pos}),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isPanning: this.touchZoom,\n          isZooming: this.touchZoom,\n          isRotating: false\n        }\n      );\n      this.blockEvents(inertia);\n    } else {\n      const newControllerState = this.controllerState.zoomEnd().rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false,\n        isZooming: false,\n        isRotating: false\n      });\n    }\n    this._startPinchRotation = null;\n    this._lastPinchEvent = null;\n    return true;\n  }\n\n  // Default handler for the `doubletap` event.\n  _onDoubleTap(event) {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const isZoomOut = this.isFunctionKeyPressed(event);\n\n    const newControllerState = this.controllerState.zoom({pos, scale: isZoomOut ? 0.5 : 2});\n    this.updateViewport(newControllerState, this._getTransitionProps({around: pos}), {\n      isZooming: true,\n      isPanning: true\n    });\n    this.blockEvents(100);\n    return true;\n  }\n\n  // Default handler for the `keydown` event\n  _onKeyDown(event) {\n    if (!this.keyboard) {\n      return false;\n    }\n    const funcKey = this.isFunctionKeyPressed(event);\n    const {zoomSpeed, moveSpeed, rotateSpeedX, rotateSpeedY} = this.keyboard;\n    const {controllerState} = this;\n    let newControllerState;\n    const interactionState = {};\n\n    switch (event.srcEvent.code) {\n      case 'Minus':\n        newControllerState = funcKey\n          ? controllerState.zoomOut(zoomSpeed).zoomOut(zoomSpeed)\n          : controllerState.zoomOut(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n      case 'Equal':\n        newControllerState = funcKey\n          ? controllerState.zoomIn(zoomSpeed).zoomIn(zoomSpeed)\n          : controllerState.zoomIn(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n      case 'ArrowLeft':\n        if (funcKey) {\n          newControllerState = controllerState.rotateLeft(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveLeft(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowRight':\n        if (funcKey) {\n          newControllerState = controllerState.rotateRight(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveRight(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowUp':\n        if (funcKey) {\n          newControllerState = controllerState.rotateUp(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveUp(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowDown':\n        if (funcKey) {\n          newControllerState = controllerState.rotateDown(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveDown(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      default:\n        return false;\n    }\n    this.updateViewport(newControllerState, this._getTransitionProps(), interactionState);\n    return true;\n  }\n\n  _getTransitionProps() {\n    // Transitions on double-tap and key-down are only supported by MapController\n    return NO_TRANSITION_PROPS;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}