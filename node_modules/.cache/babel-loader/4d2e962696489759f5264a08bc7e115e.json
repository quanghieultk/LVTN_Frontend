{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nvar BrowserFileSystem = function () {\n  function BrowserFileSystem(files) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, BrowserFileSystem);\n\n    this._fetch = options.fetch || fetch;\n    this.files = {};\n\n    for (var i = 0; i < files.length; ++i) {\n      var file = files[i];\n      this.files[file.name] = file;\n    }\n\n    this.fetch = this.fetch.bind(this);\n  }\n\n  _createClass(BrowserFileSystem, [{\n    key: \"fetch\",\n    value: function () {\n      var _fetch = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(path) {\n        var options,\n            fallbackFetch,\n            file,\n            response,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n                if (!path.includes('://')) {\n                  _context.next = 4;\n                  break;\n                }\n\n                fallbackFetch = options.fetch || this._fetch;\n                return _context.abrupt(\"return\", fallbackFetch(path, options));\n\n              case 4:\n                file = this.files[path];\n\n                if (!file) {\n                  _context.next = 9;\n                  break;\n                }\n\n                response = new Response(this.files[path]);\n                Object.defineProperty(response, 'url', {\n                  value: path\n                });\n                return _context.abrupt(\"return\", response);\n\n              case 9:\n                return _context.abrupt(\"return\", new Response(path, {\n                  status: 400,\n                  statusText: 'NOT FOUND'\n                }));\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fetch(_x) {\n        return _fetch.apply(this, arguments);\n      }\n\n      return fetch;\n    }()\n  }, {\n    key: \"readdir\",\n    value: function () {\n      var _readdir = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2() {\n        var files, path;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                files = [];\n\n                for (path in this.files) {\n                  files.push(path);\n                }\n\n                return _context2.abrupt(\"return\", files);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function readdir() {\n        return _readdir.apply(this, arguments);\n      }\n\n      return readdir;\n    }()\n  }, {\n    key: \"stat\",\n    value: function () {\n      var _stat = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(path, options) {\n        var file;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                file = this.files[path];\n\n                if (file) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                throw new Error(\"No such file: \".concat(path));\n\n              case 3:\n                return _context3.abrupt(\"return\", {\n                  size: file.size\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function stat(_x2, _x3) {\n        return _stat.apply(this, arguments);\n      }\n\n      return stat;\n    }()\n  }, {\n    key: \"unlink\",\n    value: function () {\n      var _unlink = _asyncToGenerator(_regeneratorRuntime.mark(function _callee4(pathname) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                delete this.files[pathname];\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function unlink(_x4) {\n        return _unlink.apply(this, arguments);\n      }\n\n      return unlink;\n    }()\n  }, {\n    key: \"open\",\n    value: function () {\n      var _open = _asyncToGenerator(_regeneratorRuntime.mark(function _callee5(pathname) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", this.files[pathname]);\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function open(_x5) {\n        return _open.apply(this, arguments);\n      }\n\n      return open;\n    }()\n  }, {\n    key: \"read\",\n    value: function () {\n      var _read = _asyncToGenerator(_regeneratorRuntime.mark(function _callee6(fd, _ref) {\n        var _ref$buffer, buffer, _ref$offset, offset, _ref$length, length, _ref$position, position, file, arrayBuffer;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _ref$buffer = _ref.buffer, buffer = _ref$buffer === void 0 ? null : _ref$buffer, _ref$offset = _ref.offset, offset = _ref$offset === void 0 ? 0 : _ref$offset, _ref$length = _ref.length, length = _ref$length === void 0 ? buffer.byteLength : _ref$length, _ref$position = _ref.position, position = _ref$position === void 0 ? null : _ref$position;\n                file = fd;\n                _context6.next = 4;\n                return readFileSlice(file, position, position + length);\n\n              case 4:\n                arrayBuffer = _context6.sent;\n                return _context6.abrupt(\"return\", arrayBuffer);\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function read(_x6, _x7) {\n        return _read.apply(this, arguments);\n      }\n\n      return read;\n    }()\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = _asyncToGenerator(_regeneratorRuntime.mark(function _callee7(fd) {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function close(_x8) {\n        return _close.apply(this, arguments);\n      }\n\n      return close;\n    }()\n  }]);\n\n  return BrowserFileSystem;\n}();\n\nexport { BrowserFileSystem as default };\n\nfunction readFileSlice(_x9, _x10, _x11) {\n  return _readFileSlice.apply(this, arguments);\n}\n\nfunction _readFileSlice() {\n  _readFileSlice = _asyncToGenerator(_regeneratorRuntime.mark(function _callee8(file, start, end) {\n    var slice;\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            slice = file.slice(start, end);\n            _context8.next = 3;\n            return new Promise(function (resolve, reject) {\n              var fileReader = new FileReader();\n\n              fileReader.onload = function (event) {\n                return resolve(event.target && event.target.result);\n              };\n\n              fileReader.onerror = function (error) {\n                return reject(error);\n              };\n\n              fileReader.readAsArrayBuffer(slice);\n            });\n\n          case 3:\n            return _context8.abrupt(\"return\", _context8.sent);\n\n          case 4:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n  return _readFileSlice.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../src/lib/filesystems/browser-filesystem.js"],"names":["BrowserFileSystem","options","i","files","file","path","fallbackFetch","_fetch","response","Object","value","status","statusText","size","pathname","fd","buffer","offset","length","byteLength","position","arrayBuffer","readFileSlice","slice","fileReader","resolve","event","reject"],"mappings":"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","sourcesContent":["/* global Response, fetch, FileReader */\n// import {fetchFile} from \"../fetch/fetch-file\"\n/** @typedef {import('@loaders.gl/loader-utils').IFileSystem} IFileSystem */\n\n/** @implements {IFileSystem} */\nexport default class BrowserFileSystem {\n  constructor(files, options = {}) {\n    this._fetch = options.fetch || fetch;\n    this.files = {};\n\n    for (let i = 0; i < files.length; ++i) {\n      const file = files[i];\n      this.files[file.name] = file;\n    }\n\n    this.fetch = this.fetch.bind(this);\n  }\n\n  // FETCH\n\n  async fetch(path, options = {}) {\n    if (path.includes('://')) {\n      // Falls back to handle https:/http:/data: etc fetches\n      const fallbackFetch = options.fetch || this._fetch;\n      return fallbackFetch(path, options);\n    }\n\n    // local fetches are served from the list of files\n    const file = this.files[path];\n    if (file) {\n      // return makeResponse()\n      const response = new Response(this.files[path]);\n      Object.defineProperty(response, 'url', {value: path});\n      return response;\n    }\n    return new Response(path, {status: 400, statusText: 'NOT FOUND'});\n  }\n\n  // FS\n\n  async readdir() {\n    const files = [];\n    for (const path in this.files) {\n      files.push(path);\n    }\n    return files;\n  }\n\n  async stat(path, options) {\n    const file = this.files[path];\n    if (!file) {\n      throw new Error(`No such file: ${path}`);\n    }\n    return {size: file.size};\n  }\n\n  // Just removes the file from the list\n  async unlink(pathname) {\n    delete this.files[pathname];\n  }\n\n  // RANDOM ACCESS\n  async open(pathname) {\n    return this.files[pathname];\n  }\n\n  // buffer is the buffer that the data (read from the fd) will be written to.\n  // offset is the offset in the buffer to start writing at.\n  // length is an integer specifying the number of bytes to read.\n  // position is an argument specifying where to begin reading from in the file. If position is null, data will be read from the current file position, and the file position will be updated. If position is an integer, the file position will remain unchanged.\n  async read(fd, {buffer = null, offset = 0, length = buffer.byteLength, position = null}) {\n    const file = fd;\n    const arrayBuffer = await readFileSlice(file, position, position + length);\n    return arrayBuffer;\n  }\n\n  async close(fd) {\n    // NO OP\n  }\n}\n\n// The trick when reading File objects is to read successive \"slices\" of the File\n// Per spec https://w3c.github.io/FileAPI/, slicing a File should only update the start and end fields\n// Actually reading from file should happen in `readAsArrayBuffer` (and as far we can tell it does)\nasync function readFileSlice(file, start, end) {\n  const slice = file.slice(start, end);\n  return await new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = event => resolve(event.target && event.target.result);\n    fileReader.onerror = error => reject(error);\n    fileReader.readAsArrayBuffer(slice);\n  });\n}\n"]},"metadata":{},"sourceType":"module"}