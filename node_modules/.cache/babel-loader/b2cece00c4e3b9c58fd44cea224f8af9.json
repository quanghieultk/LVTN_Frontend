{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { getCompositeGLType } from '../webgl-utils/attribute-utils';\nexport function getDebugTableForProgramConfiguration(config) {\n  var table = {};\n  var header = \"Accessors for \".concat(config.id);\n\n  var _iterator = _createForOfIteratorHelper(config.attributeInfos),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var attributeInfo = _step.value;\n\n      if (attributeInfo) {\n        var glslDeclaration = getGLSLDeclaration(attributeInfo);\n        table[\"in \".concat(glslDeclaration)] = _defineProperty({}, header, JSON.stringify(attributeInfo.accessor));\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var _iterator2 = _createForOfIteratorHelper(config.varyingInfos),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var varyingInfo = _step2.value;\n\n      if (varyingInfo) {\n        var _glslDeclaration = getGLSLDeclaration(varyingInfo);\n\n        table[\"out \".concat(_glslDeclaration)] = _defineProperty({}, header, JSON.stringify(varyingInfo.accessor));\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return table;\n}\n\nfunction getGLSLDeclaration(attributeInfo) {\n  var _attributeInfo$access = attributeInfo.accessor,\n      type = _attributeInfo$access.type,\n      size = _attributeInfo$access.size;\n  var typeAndName = getCompositeGLType(type, size);\n\n  if (typeAndName) {\n    return \"\".concat(typeAndName.name, \" \").concat(attributeInfo.name);\n  }\n\n  return attributeInfo.name;\n}","map":{"version":3,"sources":["../../../src/debug/debug-program-configuration.js"],"names":["table","header","config","attributeInfo","glslDeclaration","getGLSLDeclaration","JSON","varyingInfo","type","size","typeAndName","getCompositeGLType"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,kBAAA,QAAA,gCAAA;AAEA,OAAO,SAAA,oCAAA,CAAA,MAAA,EAAsD;AAC3D,MAAMA,KAAK,GAAX,EAAA;AAEA,MAAMC,MAAM,GAAA,iBAAA,MAAA,CAAoBC,MAAM,CAAtC,EAAY,CAAZ;;AAH2D,MAAA,SAAA,GAAA,0BAAA,CAK/BA,MAAM,CALyB,cAAA,CAAA;AAAA,MAAA,KAAA;;AAAA,MAAA;AAK3D,SAAA,SAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAAmD;AAAA,UAAxCC,aAAwC,GAAA,KAAA,CAAA,KAAA;;AACjD,UAAA,aAAA,EAAmB;AACjB,YAAMC,eAAe,GAAGC,kBAAkB,CAA1C,aAA0C,CAA1C;AACAL,QAAAA,KAAK,CAAA,MAAA,MAAA,CAALA,eAAK,CAAA,CAALA,GAAAA,eAAAA,CAAAA,EAAAA,EAAAA,MAAAA,EAA4CM,IAAI,CAAJA,SAAAA,CAAeH,aAAa,CAAxEH,QAA4CM,CAA5CN,CAAAA;AACD;AACF;AAV0D,GAAA,CAAA,OAAA,GAAA,EAAA;AAAA,IAAA,SAAA,CAAA,CAAA,CAAA,GAAA;AAAA,GAAA,SAAA;AAAA,IAAA,SAAA,CAAA,CAAA;AAAA;;AAAA,MAAA,UAAA,GAAA,0BAAA,CAYjCE,MAAM,CAZ2B,YAAA,CAAA;AAAA,MAAA,MAAA;;AAAA,MAAA;AAY3D,SAAA,UAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,MAAA,GAAA,UAAA,CAAA,CAAA,EAAA,EAAA,IAAA,GAA+C;AAAA,UAApCK,WAAoC,GAAA,MAAA,CAAA,KAAA;;AAC7C,UAAA,WAAA,EAAiB;AACf,YAAMH,gBAAe,GAAGC,kBAAkB,CAA1C,WAA0C,CAA1C;;AACAL,QAAAA,KAAK,CAAA,OAAA,MAAA,CAALA,gBAAK,CAAA,CAALA,GAAAA,eAAAA,CAAAA,EAAAA,EAAAA,MAAAA,EAA6CM,IAAI,CAAJA,SAAAA,CAAeC,WAAW,CAAvEP,QAA6CM,CAA7CN,CAAAA;AACD;AACF;AAjB0D,GAAA,CAAA,OAAA,GAAA,EAAA;AAAA,IAAA,UAAA,CAAA,CAAA,CAAA,GAAA;AAAA,GAAA,SAAA;AAAA,IAAA,UAAA,CAAA,CAAA;AAAA;;AAmB3D,SAAA,KAAA;AACD;;AAED,SAAA,kBAAA,CAAA,aAAA,EAA2C;AAAA,MAAA,qBAAA,GACpBG,aAAa,CADO,QAAA;AAAA,MAClCK,IADkC,GAAA,qBAAA,CAAA,IAAA;AAAA,MAC5BC,IAD4B,GAAA,qBAAA,CAAA,IAAA;AAEzC,MAAMC,WAAW,GAAGC,kBAAkB,CAAA,IAAA,EAAtC,IAAsC,CAAtC;;AACA,MAAA,WAAA,EAAiB;AACf,WAAA,GAAA,MAAA,CAAUD,WAAW,CAArB,IAAA,EAAA,GAAA,EAAA,MAAA,CAA8BP,aAAa,CAA3C,IAAA,CAAA;AACD;;AACD,SAAOA,aAAa,CAApB,IAAA;AACD","sourcesContent":["import {getCompositeGLType} from '../webgl-utils/attribute-utils';\n\nexport function getDebugTableForProgramConfiguration(config) {\n  const table = {};\n\n  const header = `Accessors for ${config.id}`;\n\n  for (const attributeInfo of config.attributeInfos) {\n    if (attributeInfo) {\n      const glslDeclaration = getGLSLDeclaration(attributeInfo);\n      table[`in ${glslDeclaration}`] = {[header]: JSON.stringify(attributeInfo.accessor)};\n    }\n  }\n\n  for (const varyingInfo of config.varyingInfos) {\n    if (varyingInfo) {\n      const glslDeclaration = getGLSLDeclaration(varyingInfo);\n      table[`out ${glslDeclaration}`] = {[header]: JSON.stringify(varyingInfo.accessor)};\n    }\n  }\n\n  return table;\n}\n\nfunction getGLSLDeclaration(attributeInfo) {\n  const {type, size} = attributeInfo.accessor;\n  const typeAndName = getCompositeGLType(type, size);\n  if (typeAndName) {\n    return `${typeAndName.name} ${attributeInfo.name}`;\n  }\n  return attributeInfo.name;\n}\n"]},"metadata":{},"sourceType":"module"}