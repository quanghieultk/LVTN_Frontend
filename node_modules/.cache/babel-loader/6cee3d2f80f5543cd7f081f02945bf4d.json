{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport Resource from './resource';\nimport { FEATURES, hasFeatures } from '../features';\nimport { isWebGL2 } from '@luma.gl/gltools';\nimport { assert } from '../utils';\nvar GL_QUERY_RESULT = 0x8866;\nvar GL_QUERY_RESULT_AVAILABLE = 0x8867;\nvar GL_TIME_ELAPSED_EXT = 0x88bf;\nvar GL_GPU_DISJOINT_EXT = 0x8fbb;\nvar GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8c88;\nvar GL_ANY_SAMPLES_PASSED = 0x8c2f;\nvar GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8d6a;\n\nvar Query = function (_Resource) {\n  _inherits(Query, _Resource);\n\n  var _super = _createSuper(Query);\n\n  _createClass(Query, null, [{\n    key: \"isSupported\",\n    value: function isSupported(gl) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var webgl2 = isWebGL2(gl);\n      var hasTimerQuery = hasFeatures(gl, FEATURES.TIMER_QUERY);\n      var supported = webgl2 || hasTimerQuery;\n\n      var _iterator = _createForOfIteratorHelper(opts),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var key = _step.value;\n\n          switch (key) {\n            case 'queries':\n              supported = supported && webgl2;\n              break;\n\n            case 'timers':\n              supported = supported && hasTimerQuery;\n              break;\n\n            default:\n              assert(false);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return supported;\n    }\n  }]);\n\n  function Query(gl) {\n    var _this;\n\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Query);\n\n    _this = _super.call(this, gl, opts);\n    _this.target = null;\n    _this._queryPending = false;\n    _this._pollingPromise = null;\n    Object.seal(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Query, [{\n    key: \"beginTimeElapsedQuery\",\n    value: function beginTimeElapsedQuery() {\n      return this.begin(GL_TIME_ELAPSED_EXT);\n    }\n  }, {\n    key: \"beginOcclusionQuery\",\n    value: function beginOcclusionQuery() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref$conservative = _ref.conservative,\n          conservative = _ref$conservative === void 0 ? false : _ref$conservative;\n\n      return this.begin(conservative ? GL_ANY_SAMPLES_PASSED_CONSERVATIVE : GL_ANY_SAMPLES_PASSED);\n    }\n  }, {\n    key: \"beginTransformFeedbackQuery\",\n    value: function beginTransformFeedbackQuery() {\n      return this.begin(GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN);\n    }\n  }, {\n    key: \"begin\",\n    value: function begin(target) {\n      if (this._queryPending) {\n        return this;\n      }\n\n      this.target = target;\n      this.gl2.beginQuery(this.target, this.handle);\n      return this;\n    }\n  }, {\n    key: \"end\",\n    value: function end() {\n      if (this._queryPending) {\n        return this;\n      }\n\n      if (this.target) {\n        this.gl2.endQuery(this.target);\n        this.target = null;\n        this._queryPending = true;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"isResultAvailable\",\n    value: function isResultAvailable() {\n      if (!this._queryPending) {\n        return false;\n      }\n\n      var resultAvailable = this.gl2.getQueryParameter(this.handle, GL_QUERY_RESULT_AVAILABLE);\n\n      if (resultAvailable) {\n        this._queryPending = false;\n      }\n\n      return resultAvailable;\n    }\n  }, {\n    key: \"isTimerDisjoint\",\n    value: function isTimerDisjoint() {\n      return this.gl2.getParameter(GL_GPU_DISJOINT_EXT);\n    }\n  }, {\n    key: \"getResult\",\n    value: function getResult() {\n      return this.gl2.getQueryParameter(this.handle, GL_QUERY_RESULT);\n    }\n  }, {\n    key: \"getTimerMilliseconds\",\n    value: function getTimerMilliseconds() {\n      return this.getResult() / 1e6;\n    }\n  }, {\n    key: \"createPoll\",\n    value: function createPoll() {\n      var _this2 = this;\n\n      var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Number.POSITIVE_INFINITY;\n\n      if (this._pollingPromise) {\n        return this._pollingPromise;\n      }\n\n      var counter = 0;\n      this._pollingPromise = new Promise(function (resolve, reject) {\n        var poll = function poll() {\n          if (_this2.isResultAvailable()) {\n            resolve(_this2.getResult());\n            _this2._pollingPromise = null;\n          } else if (counter++ > limit) {\n            reject('Timed out');\n            _this2._pollingPromise = null;\n          } else {\n            requestAnimationFrame(poll);\n          }\n        };\n\n        requestAnimationFrame(poll);\n      });\n      return this._pollingPromise;\n    }\n  }, {\n    key: \"_createHandle\",\n    value: function _createHandle() {\n      return Query.isSupported(this.gl) ? this.gl2.createQuery() : null;\n    }\n  }, {\n    key: \"_deleteHandle\",\n    value: function _deleteHandle() {\n      this.gl2.deleteQuery(this.handle);\n    }\n  }]);\n\n  return Query;\n}(Resource);\n\nexport { Query as default };","map":{"version":3,"sources":["../../../src/classes/query.js"],"names":["GL_QUERY_RESULT","GL_QUERY_RESULT_AVAILABLE","GL_TIME_ELAPSED_EXT","GL_GPU_DISJOINT_EXT","GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN","GL_ANY_SAMPLES_PASSED","GL_ANY_SAMPLES_PASSED_CONSERVATIVE","Query","Resource","gl","opts","webgl2","isWebGL2","hasTimerQuery","hasFeatures","FEATURES","supported","key","assert","Object","conservative","target","resultAvailable","limit","Number","POSITIVE_INFINITY","counter","poll","resolve","reject","requestAnimationFrame"],"mappings":"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","sourcesContent":["// WebGL2 Query (also handles disjoint timer extensions)\nimport Resource from './resource';\nimport {FEATURES, hasFeatures} from '../features';\nimport {isWebGL2} from '@luma.gl/gltools';\nimport {assert} from '../utils';\n\nconst GL_QUERY_RESULT = 0x8866; // Returns a GLuint containing the query result.\nconst GL_QUERY_RESULT_AVAILABLE = 0x8867; // whether query result is available.\n\nconst GL_TIME_ELAPSED_EXT = 0x88bf; // Elapsed time (in nanoseconds).\nconst GL_GPU_DISJOINT_EXT = 0x8fbb; // Whether GPU performed any disjoint operation.\n\nconst GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8c88; // #primitives written to feedback buffers\nconst GL_ANY_SAMPLES_PASSED = 0x8c2f; // Occlusion query (if drawing passed depth test)\nconst GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8d6a; // Occlusion query less accurate/faster version\n\nexport default class Query extends Resource {\n  // Returns true if Query is supported by the WebGL implementation\n  // Can also check whether timestamp queries are available.\n  static isSupported(gl, opts = []) {\n    const webgl2 = isWebGL2(gl);\n\n    // Initial value\n    const hasTimerQuery = hasFeatures(gl, FEATURES.TIMER_QUERY);\n    let supported = webgl2 || hasTimerQuery;\n\n    for (const key of opts) {\n      switch (key) {\n        case 'queries':\n          supported = supported && webgl2;\n          break;\n        case 'timers':\n          supported = supported && hasTimerQuery;\n          break;\n        default:\n          assert(false);\n      }\n    }\n\n    return supported;\n  }\n\n  // Create a query class\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    this.target = null;\n    this._queryPending = false;\n    this._pollingPromise = null;\n\n    Object.seal(this);\n  }\n\n  // Shortcut for timer query (dependent on extension in both WebGL1 and 2)\n  // Measures GPU time delta between this call and a matching `end` call in the\n  // GPU instruction stream.\n  beginTimeElapsedQuery() {\n    return this.begin(GL_TIME_ELAPSED_EXT);\n  }\n\n  // Shortcut for occlusion queries\n  beginOcclusionQuery({conservative = false} = {}) {\n    return this.begin(conservative ? GL_ANY_SAMPLES_PASSED_CONSERVATIVE : GL_ANY_SAMPLES_PASSED);\n  }\n\n  // Shortcut for transformFeedbackQuery\n  beginTransformFeedbackQuery() {\n    return this.begin(GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN);\n  }\n\n  // Due to OpenGL API limitations, after calling `begin()` on one Query\n  // instance, `end()` must be called on that same instance before\n  // calling `begin()` on another query. While there can be multiple\n  // outstanding queries representing disjoint `begin()`/`end()` intervals.\n  // It is not possible to interleave or overlap `begin` and `end` calls.\n  begin(target) {\n    // Don't start a new query if one is already active.\n    if (this._queryPending) {\n      return this;\n    }\n\n    this.target = target;\n    this.gl2.beginQuery(this.target, this.handle);\n\n    return this;\n  }\n\n  // ends the current query\n  end() {\n    // Can't end a new query if the last one hasn't been resolved.\n    if (this._queryPending) {\n      return this;\n    }\n\n    if (this.target) {\n      this.gl2.endQuery(this.target);\n      this.target = null;\n      this._queryPending = true;\n    }\n    return this;\n  }\n\n  // Returns true if the query result is available\n  isResultAvailable() {\n    if (!this._queryPending) {\n      return false;\n    }\n\n    const resultAvailable = this.gl2.getQueryParameter(this.handle, GL_QUERY_RESULT_AVAILABLE);\n    if (resultAvailable) {\n      this._queryPending = false;\n    }\n    return resultAvailable;\n  }\n\n  // Timing query is disjoint, i.e. results are invalid\n  isTimerDisjoint() {\n    return this.gl2.getParameter(GL_GPU_DISJOINT_EXT);\n  }\n\n  // Returns query result.\n  getResult() {\n    return this.gl2.getQueryParameter(this.handle, GL_QUERY_RESULT);\n  }\n\n  // Returns the query result, converted to milliseconds to match JavaScript conventions.\n  getTimerMilliseconds() {\n    return this.getResult() / 1e6;\n  }\n\n  // Polls the query\n  createPoll(limit = Number.POSITIVE_INFINITY) {\n    if (this._pollingPromise) {\n      return this._pollingPromise;\n    }\n\n    let counter = 0;\n\n    this._pollingPromise = new Promise((resolve, reject) => {\n      const poll = () => {\n        if (this.isResultAvailable()) {\n          resolve(this.getResult());\n          this._pollingPromise = null;\n        } else if (counter++ > limit) {\n          reject('Timed out');\n          this._pollingPromise = null;\n        } else {\n          requestAnimationFrame(poll);\n        }\n      };\n\n      requestAnimationFrame(poll);\n    });\n\n    return this._pollingPromise;\n  }\n\n  _createHandle() {\n    return Query.isSupported(this.gl) ? this.gl2.createQuery() : null;\n  }\n\n  _deleteHandle() {\n    this.gl2.deleteQuery(this.handle);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}