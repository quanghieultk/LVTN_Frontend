{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { clamp } from 'math.gl';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport { normalizeViewportProps } from '@math.gl/web-mercator';\nimport assert from '../utils/assert';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport { TRANSITION_EVENTS } from './transition-manager';\nvar PITCH_MOUSE_THRESHOLD = 5;\nvar PITCH_ACCEL = 1.2;\nvar LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: function transitionEasing(t) {\n    return t;\n  },\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\nvar DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5,\n  minZoom: 0,\n  maxZoom: 20,\n  minPitch: 0,\n  maxPitch: 60\n};\nexport var MapState = function (_ViewState) {\n  _inherits(MapState, _ViewState);\n\n  var _super = _createSuper(MapState);\n\n  function MapState() {\n    var _this;\n\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        makeViewport = _ref.makeViewport,\n        width = _ref.width,\n        height = _ref.height,\n        latitude = _ref.latitude,\n        longitude = _ref.longitude,\n        zoom = _ref.zoom,\n        _ref$bearing = _ref.bearing,\n        bearing = _ref$bearing === void 0 ? DEFAULT_STATE.bearing : _ref$bearing,\n        _ref$pitch = _ref.pitch,\n        pitch = _ref$pitch === void 0 ? DEFAULT_STATE.pitch : _ref$pitch,\n        _ref$altitude = _ref.altitude,\n        altitude = _ref$altitude === void 0 ? DEFAULT_STATE.altitude : _ref$altitude,\n        _ref$maxZoom = _ref.maxZoom,\n        maxZoom = _ref$maxZoom === void 0 ? DEFAULT_STATE.maxZoom : _ref$maxZoom,\n        _ref$minZoom = _ref.minZoom,\n        minZoom = _ref$minZoom === void 0 ? DEFAULT_STATE.minZoom : _ref$minZoom,\n        _ref$maxPitch = _ref.maxPitch,\n        maxPitch = _ref$maxPitch === void 0 ? DEFAULT_STATE.maxPitch : _ref$maxPitch,\n        _ref$minPitch = _ref.minPitch,\n        minPitch = _ref$minPitch === void 0 ? DEFAULT_STATE.minPitch : _ref$minPitch,\n        startPanLngLat = _ref.startPanLngLat,\n        startZoomLngLat = _ref.startZoomLngLat,\n        startRotatePos = _ref.startRotatePos,\n        startBearing = _ref.startBearing,\n        startPitch = _ref.startPitch,\n        startZoom = _ref.startZoom;\n\n    _classCallCheck(this, MapState);\n\n    assert(Number.isFinite(longitude), '`longitude` must be supplied');\n    assert(Number.isFinite(latitude), '`latitude` must be supplied');\n    assert(Number.isFinite(zoom), '`zoom` must be supplied');\n    _this = _super.call(this, {\n      width: width,\n      height: height,\n      latitude: latitude,\n      longitude: longitude,\n      zoom: zoom,\n      bearing: bearing,\n      pitch: pitch,\n      altitude: altitude,\n      maxZoom: maxZoom,\n      minZoom: minZoom,\n      maxPitch: maxPitch,\n      minPitch: minPitch\n    });\n    _this._state = {\n      startPanLngLat: startPanLngLat,\n      startZoomLngLat: startZoomLngLat,\n      startRotatePos: startRotatePos,\n      startBearing: startBearing,\n      startPitch: startPitch,\n      startZoom: startZoom\n    };\n    _this.makeViewport = makeViewport;\n    return _this;\n  }\n\n  _createClass(MapState, [{\n    key: \"panStart\",\n    value: function panStart(_ref2) {\n      var pos = _ref2.pos;\n      return this._getUpdatedState({\n        startPanLngLat: this._unproject(pos)\n      });\n    }\n  }, {\n    key: \"pan\",\n    value: function pan(_ref3) {\n      var pos = _ref3.pos,\n          startPos = _ref3.startPos;\n\n      var startPanLngLat = this._state.startPanLngLat || this._unproject(startPos);\n\n      if (!startPanLngLat) {\n        return this;\n      }\n\n      var _this$_calculateNewLn = this._calculateNewLngLat({\n        startPanLngLat: startPanLngLat,\n        pos: pos\n      }),\n          _this$_calculateNewLn2 = _slicedToArray(_this$_calculateNewLn, 2),\n          longitude = _this$_calculateNewLn2[0],\n          latitude = _this$_calculateNewLn2[1];\n\n      return this._getUpdatedState({\n        longitude: longitude,\n        latitude: latitude\n      });\n    }\n  }, {\n    key: \"panEnd\",\n    value: function panEnd() {\n      return this._getUpdatedState({\n        startPanLngLat: null\n      });\n    }\n  }, {\n    key: \"rotateStart\",\n    value: function rotateStart(_ref4) {\n      var pos = _ref4.pos;\n      return this._getUpdatedState({\n        startRotatePos: pos,\n        startBearing: this._viewportProps.bearing,\n        startPitch: this._viewportProps.pitch\n      });\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(_ref5) {\n      var pos = _ref5.pos,\n          _ref5$deltaAngleX = _ref5.deltaAngleX,\n          deltaAngleX = _ref5$deltaAngleX === void 0 ? 0 : _ref5$deltaAngleX,\n          _ref5$deltaAngleY = _ref5.deltaAngleY,\n          deltaAngleY = _ref5$deltaAngleY === void 0 ? 0 : _ref5$deltaAngleY;\n      var _this$_state = this._state,\n          startRotatePos = _this$_state.startRotatePos,\n          startBearing = _this$_state.startBearing,\n          startPitch = _this$_state.startPitch;\n\n      if (!startRotatePos || !Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n        return this;\n      }\n\n      var newRotation;\n\n      if (pos) {\n        newRotation = this._calculateNewPitchAndBearing(_objectSpread(_objectSpread({}, this._getRotationParams(pos, startRotatePos)), {}, {\n          startBearing: startBearing,\n          startPitch: startPitch\n        }));\n      } else {\n        newRotation = {\n          bearing: startBearing + deltaAngleX,\n          pitch: startPitch + deltaAngleY\n        };\n      }\n\n      return this._getUpdatedState(newRotation);\n    }\n  }, {\n    key: \"rotateEnd\",\n    value: function rotateEnd() {\n      return this._getUpdatedState({\n        startBearing: null,\n        startPitch: null\n      });\n    }\n  }, {\n    key: \"zoomStart\",\n    value: function zoomStart(_ref6) {\n      var pos = _ref6.pos;\n      return this._getUpdatedState({\n        startZoomLngLat: this._unproject(pos),\n        startZoom: this._viewportProps.zoom\n      });\n    }\n  }, {\n    key: \"zoom\",\n    value: function zoom(_ref7) {\n      var pos = _ref7.pos,\n          startPos = _ref7.startPos,\n          scale = _ref7.scale;\n      var _this$_state2 = this._state,\n          startZoom = _this$_state2.startZoom,\n          startZoomLngLat = _this$_state2.startZoomLngLat;\n\n      if (!Number.isFinite(startZoom)) {\n        startZoom = this._viewportProps.zoom;\n        startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n      }\n\n      var zoom = this._calculateNewZoom({\n        scale: scale,\n        startZoom: startZoom\n      });\n\n      var zoomedViewport = this.makeViewport(_objectSpread(_objectSpread({}, this._viewportProps), {}, {\n        zoom: zoom\n      }));\n\n      var _zoomedViewport$getMa = zoomedViewport.getMapCenterByLngLatPosition({\n        lngLat: startZoomLngLat,\n        pos: pos\n      }),\n          _zoomedViewport$getMa2 = _slicedToArray(_zoomedViewport$getMa, 2),\n          longitude = _zoomedViewport$getMa2[0],\n          latitude = _zoomedViewport$getMa2[1];\n\n      return this._getUpdatedState({\n        zoom: zoom,\n        longitude: longitude,\n        latitude: latitude\n      });\n    }\n  }, {\n    key: \"zoomEnd\",\n    value: function zoomEnd() {\n      return this._getUpdatedState({\n        startZoomLngLat: null,\n        startZoom: null\n      });\n    }\n  }, {\n    key: \"zoomIn\",\n    value: function zoomIn() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n      return this._zoomFromCenter(speed);\n    }\n  }, {\n    key: \"zoomOut\",\n    value: function zoomOut() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n      return this._zoomFromCenter(1 / speed);\n    }\n  }, {\n    key: \"moveLeft\",\n    value: function moveLeft() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n      return this._panFromCenter([speed, 0]);\n    }\n  }, {\n    key: \"moveRight\",\n    value: function moveRight() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n      return this._panFromCenter([-speed, 0]);\n    }\n  }, {\n    key: \"moveUp\",\n    value: function moveUp() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n      return this._panFromCenter([0, speed]);\n    }\n  }, {\n    key: \"moveDown\",\n    value: function moveDown() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n      return this._panFromCenter([0, -speed]);\n    }\n  }, {\n    key: \"rotateLeft\",\n    value: function rotateLeft() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n      return this._getUpdatedState({\n        bearing: this._viewportProps.bearing - speed\n      });\n    }\n  }, {\n    key: \"rotateRight\",\n    value: function rotateRight() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n      return this._getUpdatedState({\n        bearing: this._viewportProps.bearing + speed\n      });\n    }\n  }, {\n    key: \"rotateUp\",\n    value: function rotateUp() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      return this._getUpdatedState({\n        pitch: this._viewportProps.pitch + speed\n      });\n    }\n  }, {\n    key: \"rotateDown\",\n    value: function rotateDown() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      return this._getUpdatedState({\n        pitch: this._viewportProps.pitch - speed\n      });\n    }\n  }, {\n    key: \"shortestPathFrom\",\n    value: function shortestPathFrom(viewState) {\n      var fromProps = viewState.getViewportProps();\n      var props = Object.assign({}, this._viewportProps);\n      var bearing = props.bearing,\n          longitude = props.longitude;\n\n      if (Math.abs(bearing - fromProps.bearing) > 180) {\n        props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n      }\n\n      if (Math.abs(longitude - fromProps.longitude) > 180) {\n        props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n      }\n\n      return props;\n    }\n  }, {\n    key: \"_zoomFromCenter\",\n    value: function _zoomFromCenter(scale) {\n      var _this$_viewportProps = this._viewportProps,\n          width = _this$_viewportProps.width,\n          height = _this$_viewportProps.height;\n      return this.zoom({\n        pos: [width / 2, height / 2],\n        scale: scale\n      });\n    }\n  }, {\n    key: \"_panFromCenter\",\n    value: function _panFromCenter(offset) {\n      var _this$_viewportProps2 = this._viewportProps,\n          width = _this$_viewportProps2.width,\n          height = _this$_viewportProps2.height;\n      return this.pan({\n        startPos: [width / 2, height / 2],\n        pos: [width / 2 + offset[0], height / 2 + offset[1]]\n      });\n    }\n  }, {\n    key: \"_getUpdatedState\",\n    value: function _getUpdatedState(newProps) {\n      return new this.constructor(_objectSpread(_objectSpread(_objectSpread({\n        makeViewport: this.makeViewport\n      }, this._viewportProps), this._state), newProps));\n    }\n  }, {\n    key: \"_applyConstraints\",\n    value: function _applyConstraints(props) {\n      var maxZoom = props.maxZoom,\n          minZoom = props.minZoom,\n          zoom = props.zoom;\n      props.zoom = clamp(zoom, minZoom, maxZoom);\n      var maxPitch = props.maxPitch,\n          minPitch = props.minPitch,\n          pitch = props.pitch;\n      props.pitch = clamp(pitch, minPitch, maxPitch);\n      Object.assign(props, normalizeViewportProps(props));\n      return props;\n    }\n  }, {\n    key: \"_unproject\",\n    value: function _unproject(pos) {\n      var viewport = this.makeViewport(this._viewportProps);\n      return pos && viewport.unproject(pos);\n    }\n  }, {\n    key: \"_calculateNewLngLat\",\n    value: function _calculateNewLngLat(_ref8) {\n      var startPanLngLat = _ref8.startPanLngLat,\n          pos = _ref8.pos;\n      var viewport = this.makeViewport(this._viewportProps);\n      return viewport.getMapCenterByLngLatPosition({\n        lngLat: startPanLngLat,\n        pos: pos\n      });\n    }\n  }, {\n    key: \"_calculateNewZoom\",\n    value: function _calculateNewZoom(_ref9) {\n      var scale = _ref9.scale,\n          startZoom = _ref9.startZoom;\n      var _this$_viewportProps3 = this._viewportProps,\n          maxZoom = _this$_viewportProps3.maxZoom,\n          minZoom = _this$_viewportProps3.minZoom;\n      var zoom = startZoom + Math.log2(scale);\n      return clamp(zoom, minZoom, maxZoom);\n    }\n  }, {\n    key: \"_calculateNewPitchAndBearing\",\n    value: function _calculateNewPitchAndBearing(_ref10) {\n      var deltaScaleX = _ref10.deltaScaleX,\n          deltaScaleY = _ref10.deltaScaleY,\n          startBearing = _ref10.startBearing,\n          startPitch = _ref10.startPitch;\n      deltaScaleY = clamp(deltaScaleY, -1, 1);\n      var _this$_viewportProps4 = this._viewportProps,\n          minPitch = _this$_viewportProps4.minPitch,\n          maxPitch = _this$_viewportProps4.maxPitch;\n      var bearing = startBearing + 180 * deltaScaleX;\n      var pitch = startPitch;\n\n      if (deltaScaleY > 0) {\n        pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n      } else if (deltaScaleY < 0) {\n        pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n      }\n\n      return {\n        pitch: pitch,\n        bearing: bearing\n      };\n    }\n  }, {\n    key: \"_getRotationParams\",\n    value: function _getRotationParams(pos, startPos) {\n      var deltaX = pos[0] - startPos[0];\n      var deltaY = pos[1] - startPos[1];\n      var centerY = pos[1];\n      var startY = startPos[1];\n      var _this$_viewportProps5 = this._viewportProps,\n          width = _this$_viewportProps5.width,\n          height = _this$_viewportProps5.height;\n      var deltaScaleX = deltaX / width;\n      var deltaScaleY = 0;\n\n      if (deltaY > 0) {\n        if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n          deltaScaleY = deltaY / (startY - height) * PITCH_ACCEL;\n        }\n      } else if (deltaY < 0) {\n        if (startY > PITCH_MOUSE_THRESHOLD) {\n          deltaScaleY = 1 - centerY / startY;\n        }\n      }\n\n      deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n      return {\n        deltaScaleX: deltaScaleX,\n        deltaScaleY: deltaScaleY\n      };\n    }\n  }]);\n\n  return MapState;\n}(ViewState);\n\nvar MapController = function (_Controller) {\n  _inherits(MapController, _Controller);\n\n  var _super2 = _createSuper(MapController);\n\n  function MapController(props) {\n    _classCallCheck(this, MapController);\n\n    props.dragMode = props.dragMode || 'pan';\n    return _super2.call(this, MapState, props);\n  }\n\n  _createClass(MapController, [{\n    key: \"_getTransitionProps\",\n    value: function _getTransitionProps(opts) {\n      return opts ? _objectSpread(_objectSpread({}, LINEAR_TRANSITION_PROPS), {}, {\n        transitionInterpolator: new LinearInterpolator(_objectSpread(_objectSpread({}, opts), {}, {\n          makeViewport: this.controllerState.makeViewport\n        }))\n      }) : LINEAR_TRANSITION_PROPS;\n    }\n  }]);\n\n  return MapController;\n}(Controller);\n\nexport { MapController as default };","map":{"version":3,"sources":["../../../src/controllers/map-controller.js"],"names":["PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","LINEAR_TRANSITION_PROPS","transitionDuration","transitionEasing","transitionInterpolator","transitionInterruption","TRANSITION_EVENTS","BREAK","DEFAULT_STATE","pitch","bearing","altitude","minZoom","maxZoom","minPitch","maxPitch","MapState","makeViewport","width","height","latitude","longitude","zoom","startPanLngLat","startZoomLngLat","startRotatePos","startBearing","startPitch","startZoom","assert","Number","pos","startPos","deltaAngleX","deltaAngleY","newRotation","scale","zoomedViewport","lngLat","speed","fromProps","viewState","props","Object","Math","offset","clamp","normalizeViewportProps","viewport","deltaScaleX","deltaScaleY","deltaX","deltaY","centerY","startY","MapController","Controller","opts"],"mappings":"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","sourcesContent":["import {clamp} from 'math.gl';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport {normalizeViewportProps} from '@math.gl/web-mercator';\nimport assert from '../utils/assert';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport {TRANSITION_EVENTS} from './transition-manager';\n\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\n\nconst LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\nconst DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5,\n  minZoom: 0,\n  maxZoom: 20,\n  minPitch: 0,\n  maxPitch: 60\n};\n\n/* Utils */\n\nexport class MapState extends ViewState {\n  constructor({\n    makeViewport,\n\n    /** Mapbox viewport properties */\n    /** The width of the viewport */\n    width,\n    /** The height of the viewport */\n    height,\n    /** The latitude at the center of the viewport */\n    latitude,\n    /** The longitude at the center of the viewport */\n    longitude,\n    /** The tile zoom level of the map. */\n    zoom,\n    /** The bearing of the viewport in degrees */\n    bearing = DEFAULT_STATE.bearing,\n    /** The pitch of the viewport in degrees */\n    pitch = DEFAULT_STATE.pitch,\n    /**\n     * Specify the altitude of the viewport camera\n     * Unit: map heights, default 1.5\n     * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n     */\n    altitude = DEFAULT_STATE.altitude,\n\n    /** Viewport constraints */\n    maxZoom = DEFAULT_STATE.maxZoom,\n    minZoom = DEFAULT_STATE.minZoom,\n    maxPitch = DEFAULT_STATE.maxPitch,\n    minPitch = DEFAULT_STATE.minPitch,\n\n    /** Interaction states, required to calculate change during transform */\n    /* The point on map being grabbed when the operation first started */\n    startPanLngLat,\n    /* Center of the zoom when the operation first started */\n    startZoomLngLat,\n    /* Pointer position when rotation started */\n    startRotatePos,\n    /** Bearing when current perspective rotate operation started */\n    startBearing,\n    /** Pitch when current perspective rotate operation started */\n    startPitch,\n    /** Zoom when current zoom operation started */\n    startZoom\n  } = {}) {\n    assert(Number.isFinite(longitude), '`longitude` must be supplied');\n    assert(Number.isFinite(latitude), '`latitude` must be supplied');\n    assert(Number.isFinite(zoom), '`zoom` must be supplied');\n\n    super({\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch\n    });\n\n    this._state = {\n      startPanLngLat,\n      startZoomLngLat,\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoom\n    };\n\n    this.makeViewport = makeViewport;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    return this._getUpdatedState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   * @param {[Number, Number], optional} startPos - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({pos, startPos}) {\n    const startPanLngLat = this._state.startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const [longitude, latitude] = this._calculateNewLngLat({startPanLngLat, pos});\n\n    return this._getUpdatedState({\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanLngLat: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotate({pos, deltaAngleX = 0, deltaAngleY = 0}) {\n    const {startRotatePos, startBearing, startPitch} = this._state;\n\n    if (!startRotatePos || !Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n    let newRotation;\n    if (pos) {\n      newRotation = this._calculateNewPitchAndBearing({\n        ...this._getRotationParams(pos, startRotatePos),\n        startBearing,\n        startPitch\n      });\n    } else {\n      newRotation = {\n        bearing: startBearing + deltaAngleX,\n        pitch: startPitch + deltaAngleY\n      };\n    }\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    // Make sure we zoom around the current mouse position rather than map center\n    let {startZoom, startZoomLngLat} = this._state;\n\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this._viewportProps.zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    const zoom = this._calculateNewZoom({scale, startZoom});\n\n    const zoomedViewport = this.makeViewport({...this._viewportProps, zoom});\n    const [longitude, latitude] = zoomedViewport.getMapCenterByLngLatPosition({\n      lngLat: startZoomLngLat,\n      pos\n    });\n\n    return this._getUpdatedState({\n      zoom,\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn(speed = 2) {\n    return this._zoomFromCenter(speed);\n  }\n\n  zoomOut(speed = 2) {\n    return this._zoomFromCenter(1 / speed);\n  }\n\n  moveLeft(speed = 100) {\n    return this._panFromCenter([speed, 0]);\n  }\n\n  moveRight(speed = 100) {\n    return this._panFromCenter([-speed, 0]);\n  }\n\n  moveUp(speed = 100) {\n    return this._panFromCenter([0, speed]);\n  }\n\n  moveDown(speed = 100) {\n    return this._panFromCenter([0, -speed]);\n  }\n\n  rotateLeft(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing - speed\n    });\n  }\n\n  rotateRight(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this._viewportProps.bearing + speed\n    });\n  }\n\n  rotateUp(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch + speed\n    });\n  }\n\n  rotateDown(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this._viewportProps.pitch - speed\n    });\n  }\n\n  shortestPathFrom(viewState) {\n    // const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n    const fromProps = viewState.getViewportProps();\n    const props = Object.assign({}, this._viewportProps);\n    const {bearing, longitude} = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n\n  /* Private methods */\n\n  _zoomFromCenter(scale) {\n    const {width, height} = this._viewportProps;\n    return this.zoom({\n      pos: [width / 2, height / 2],\n      scale\n    });\n  }\n\n  _panFromCenter(offset) {\n    const {width, height} = this._viewportProps;\n    return this.pan({\n      startPos: [width / 2, height / 2],\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new this.constructor({\n      makeViewport: this.makeViewport,\n      ...this._viewportProps,\n      ...this._state,\n      ...newProps\n    });\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    // Ensure pitch is within specified range\n    const {maxPitch, minPitch, pitch} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    Object.assign(props, normalizeViewportProps(props));\n\n    return props;\n  }\n\n  _unproject(pos) {\n    const viewport = this.makeViewport(this._viewportProps);\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculate a new lnglat based on pixel dragging position\n  _calculateNewLngLat({startPanLngLat, pos}) {\n    const viewport = this.makeViewport(this._viewportProps);\n    return viewport.getMapCenterByLngLatPosition({lngLat: startPanLngLat, pos});\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  // Calculates a new pitch and bearing from a position (coming from an event)\n  _calculateNewPitchAndBearing({deltaScaleX, deltaScaleY, startBearing, startPitch}) {\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n\n    const {minPitch, maxPitch} = this._viewportProps;\n\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n\n  _getRotationParams(pos, startPos) {\n    const deltaX = pos[0] - startPos[0];\n    const deltaY = pos[1] - startPos[1];\n    const centerY = pos[1];\n    const startY = startPos[1];\n    const {width, height} = this._viewportProps;\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = (deltaY / (startY - height)) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n    return {deltaScaleX, deltaScaleY};\n  }\n}\n\nexport default class MapController extends Controller {\n  constructor(props) {\n    props.dragMode = props.dragMode || 'pan';\n    super(MapState, props);\n  }\n\n  _getTransitionProps(opts) {\n    // Enables Transitions on double-tap and key-down events.\n    return opts\n      ? {\n          ...LINEAR_TRANSITION_PROPS,\n          transitionInterpolator: new LinearInterpolator({\n            ...opts,\n            makeViewport: this.controllerState.makeViewport\n          })\n        }\n      : LINEAR_TRANSITION_PROPS;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}