{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport debug from '../debug';\nimport DrawLayersPass from '../passes/draw-layers-pass';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport { Framebuffer } from '@luma.gl/core';\nvar TRACE_RENDER_LAYERS = 'deckRenderer.renderLayers';\n\nvar DeckRenderer = function () {\n  function DeckRenderer(gl) {\n    _classCallCheck(this, DeckRenderer);\n\n    this.gl = gl;\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n    this.drawLayersPass = new DrawLayersPass(gl);\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.renderCount = 0;\n    this._needsRedraw = 'Initial render';\n    this.renderBuffers = [];\n    this.lastPostProcessEffect = null;\n    this._onError = null;\n  }\n\n  _createClass(DeckRenderer, [{\n    key: \"setProps\",\n    value: function setProps(props) {\n      if ('layerFilter' in props && this.layerFilter !== props.layerFilter) {\n        this.layerFilter = props.layerFilter;\n        this._needsRedraw = 'layerFilter changed';\n      }\n\n      if ('drawPickingColors' in props && this.drawPickingColors !== props.drawPickingColors) {\n        this.drawPickingColors = props.drawPickingColors;\n        this._needsRedraw = 'drawPickingColors changed';\n      }\n\n      if ('onError' in props) {\n        this._onError = props.onError;\n      }\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers(opts) {\n      var layerPass = this.drawPickingColors ? this.pickLayersPass : this.drawLayersPass;\n      opts.layerFilter = this.layerFilter;\n      opts.onError = this._onError;\n      opts.effects = opts.effects || [];\n      opts.target = opts.target || Framebuffer.getDefaultFramebuffer(this.gl);\n\n      this._preRender(opts.effects, opts);\n\n      var outputBuffer = this.lastPostProcessEffect ? this.renderBuffers[0] : opts.target;\n      var renderStats = layerPass.render(_objectSpread(_objectSpread({}, opts), {}, {\n        target: outputBuffer\n      }));\n\n      this._postRender(opts.effects, opts);\n\n      this.renderCount++;\n      debug(TRACE_RENDER_LAYERS, this, renderStats, opts);\n    }\n  }, {\n    key: \"needsRedraw\",\n    value: function needsRedraw() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        clearRedrawFlags: false\n      };\n      var redraw = this._needsRedraw;\n\n      if (opts.clearRedrawFlags) {\n        this._needsRedraw = false;\n      }\n\n      return redraw;\n    }\n  }, {\n    key: \"finalize\",\n    value: function finalize() {\n      var renderBuffers = this.renderBuffers;\n\n      var _iterator = _createForOfIteratorHelper(renderBuffers),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var buffer = _step.value;\n          buffer[\"delete\"]();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      renderBuffers.length = 0;\n    }\n  }, {\n    key: \"_preRender\",\n    value: function _preRender(effects, opts) {\n      var lastPostProcessEffect = null;\n\n      var _iterator2 = _createForOfIteratorHelper(effects),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var effect = _step2.value;\n          effect.preRender(this.gl, opts);\n\n          if (effect.postRender) {\n            lastPostProcessEffect = effect;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      if (lastPostProcessEffect) {\n        this._resizeRenderBuffers();\n      }\n\n      this.lastPostProcessEffect = lastPostProcessEffect;\n    }\n  }, {\n    key: \"_resizeRenderBuffers\",\n    value: function _resizeRenderBuffers() {\n      var renderBuffers = this.renderBuffers;\n\n      if (renderBuffers.length === 0) {\n        renderBuffers.push(new Framebuffer(this.gl), new Framebuffer(this.gl));\n      }\n\n      var _iterator3 = _createForOfIteratorHelper(renderBuffers),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var buffer = _step3.value;\n          buffer.resize();\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"_postRender\",\n    value: function _postRender(effects, opts) {\n      var renderBuffers = this.renderBuffers;\n      var params = {\n        inputBuffer: renderBuffers[0],\n        swapBuffer: renderBuffers[1],\n        target: null\n      };\n\n      var _iterator4 = _createForOfIteratorHelper(effects),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var effect = _step4.value;\n\n          if (effect.postRender) {\n            if (effect === this.lastPostProcessEffect) {\n              params.target = opts.target;\n              effect.postRender(this.gl, params);\n              break;\n            }\n\n            var buffer = effect.postRender(this.gl, params);\n            params.inputBuffer = buffer;\n            params.swapBuffer = buffer === renderBuffers[0] ? renderBuffers[1] : renderBuffers[0];\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }]);\n\n  return DeckRenderer;\n}();\n\nexport { DeckRenderer as default };","map":{"version":3,"sources":["../../../src/lib/deck-renderer.js"],"names":["TRACE_RENDER_LAYERS","DeckRenderer","props","opts","layerPass","Framebuffer","outputBuffer","renderStats","target","debug","clearRedrawFlags","redraw","renderBuffers","buffer","effects","lastPostProcessEffect","effect","params","inputBuffer","swapBuffer"],"mappings":"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","sourcesContent":["import debug from '../debug';\nimport DrawLayersPass from '../passes/draw-layers-pass';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport {Framebuffer} from '@luma.gl/core';\n\nconst TRACE_RENDER_LAYERS = 'deckRenderer.renderLayers';\n\nexport default class DeckRenderer {\n  constructor(gl) {\n    this.gl = gl;\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n    this.drawLayersPass = new DrawLayersPass(gl);\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.renderCount = 0;\n    this._needsRedraw = 'Initial render';\n    this.renderBuffers = [];\n    this.lastPostProcessEffect = null;\n    this._onError = null;\n  }\n\n  setProps(props) {\n    if ('layerFilter' in props && this.layerFilter !== props.layerFilter) {\n      this.layerFilter = props.layerFilter;\n      this._needsRedraw = 'layerFilter changed';\n    }\n\n    if ('drawPickingColors' in props && this.drawPickingColors !== props.drawPickingColors) {\n      this.drawPickingColors = props.drawPickingColors;\n      this._needsRedraw = 'drawPickingColors changed';\n    }\n\n    if ('onError' in props) {\n      this._onError = props.onError;\n    }\n  }\n\n  /*\n    target,\n    layers,\n    viewports,\n    onViewportActive,\n    views,\n    redrawReason,\n    clearCanvas,\n    effects,\n    pass,\n    stats\n  */\n  renderLayers(opts) {\n    const layerPass = this.drawPickingColors ? this.pickLayersPass : this.drawLayersPass;\n\n    opts.layerFilter = this.layerFilter;\n    opts.onError = this._onError;\n    opts.effects = opts.effects || [];\n    opts.target = opts.target || Framebuffer.getDefaultFramebuffer(this.gl);\n\n    this._preRender(opts.effects, opts);\n\n    const outputBuffer = this.lastPostProcessEffect ? this.renderBuffers[0] : opts.target;\n    const renderStats = layerPass.render({...opts, target: outputBuffer});\n\n    this._postRender(opts.effects, opts);\n\n    this.renderCount++;\n\n    debug(TRACE_RENDER_LAYERS, this, renderStats, opts);\n  }\n\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  finalize() {\n    const {renderBuffers} = this;\n    for (const buffer of renderBuffers) {\n      buffer.delete();\n    }\n    renderBuffers.length = 0;\n  }\n\n  // Private\n  _preRender(effects, opts) {\n    let lastPostProcessEffect = null;\n\n    for (const effect of effects) {\n      effect.preRender(this.gl, opts);\n      if (effect.postRender) {\n        lastPostProcessEffect = effect;\n      }\n    }\n\n    if (lastPostProcessEffect) {\n      this._resizeRenderBuffers();\n    }\n    this.lastPostProcessEffect = lastPostProcessEffect;\n  }\n\n  _resizeRenderBuffers() {\n    const {renderBuffers} = this;\n    if (renderBuffers.length === 0) {\n      renderBuffers.push(new Framebuffer(this.gl), new Framebuffer(this.gl));\n    }\n    for (const buffer of renderBuffers) {\n      buffer.resize();\n    }\n  }\n\n  _postRender(effects, opts) {\n    const {renderBuffers} = this;\n    const params = {\n      inputBuffer: renderBuffers[0],\n      swapBuffer: renderBuffers[1],\n      target: null\n    };\n    for (const effect of effects) {\n      if (effect.postRender) {\n        if (effect === this.lastPostProcessEffect) {\n          params.target = opts.target;\n          effect.postRender(this.gl, params);\n          break;\n        }\n        const buffer = effect.postRender(this.gl, params);\n        params.inputBuffer = buffer;\n        params.swapBuffer = buffer === renderBuffers[0] ? renderBuffers[1] : renderBuffers[0];\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}