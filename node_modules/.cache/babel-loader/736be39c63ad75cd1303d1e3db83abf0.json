{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { global } from '@loaders.gl/loader-utils';\nimport { isPureObject, isObject } from '../../javascript-utils/is-type';\nimport { fetchFile } from '../fetch/fetch-file';\nimport { NullLog, ConsoleLog } from './loggers';\nvar DEFAULT_LOADER_OPTIONS = {\n  baseUri: '',\n  fetch: null,\n  CDN: 'https://unpkg.com/@loaders.gl',\n  worker: true,\n  log: new ConsoleLog(),\n  metadata: false,\n  transforms: [],\n  reuseWorkers: true\n};\nvar DEPRECATED_LOADER_OPTIONS = {\n  dataType: '(no longer used)',\n  method: 'fetch.method',\n  headers: 'fetch.headers',\n  body: 'fetch.body',\n  mode: 'fetch.mode',\n  credentials: 'fetch.credentials',\n  cache: 'fetch.cache',\n  redirect: 'fetch.redirect',\n  referrer: 'fetch.referrer',\n  referrerPolicy: 'fetch.referrerPolicy',\n  integrity: 'fetch.integrity',\n  keepalive: 'fetch.keepalive',\n  signal: 'fetch.signal'\n};\nexport var getGlobalLoaderState = function getGlobalLoaderState() {\n  global.loaders = global.loaders || {};\n  var loaders = global.loaders;\n  loaders._state = loaders._state || {};\n  return loaders._state;\n};\n\nvar getGlobalLoaderOptions = function getGlobalLoaderOptions() {\n  var state = getGlobalLoaderState();\n  state.globalOptions = state.globalOptions || _objectSpread({}, DEFAULT_LOADER_OPTIONS);\n  return state.globalOptions;\n};\n\nexport function setGlobalOptions(options) {\n  var state = getGlobalLoaderState();\n  var globalOptions = getGlobalLoaderOptions();\n  state.globalOptions = normalizeOptionsInternal(globalOptions, options);\n}\nexport function normalizeOptions(options, loader, loaders, url) {\n  loaders = loaders || [];\n  loaders = Array.isArray(loaders) ? loaders : [loaders];\n  validateOptions(options, loaders);\n  return normalizeOptionsInternal(loader, options, url);\n}\nexport function getFetchFunction(options, context) {\n  var globalOptions = getGlobalLoaderOptions();\n  var fetch = options.fetch || globalOptions.fetch;\n\n  if (typeof fetch === 'function') {\n    return fetch;\n  }\n\n  if (isObject(fetch)) {\n    return function (url) {\n      return fetchFile(url, fetch);\n    };\n  }\n\n  if (context && context.fetch) {\n    return context.fetch;\n  }\n\n  return function (url) {\n    return fetchFile(url, options);\n  };\n}\n\nfunction validateOptions(options, loaders) {\n  var log = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : console;\n  validateOptionsObject(options, null, log, DEFAULT_LOADER_OPTIONS, DEPRECATED_LOADER_OPTIONS, loaders);\n\n  var _iterator = _createForOfIteratorHelper(loaders),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var loader = _step.value;\n      var idOptions = options && options[loader.id] || {};\n      var loaderOptions = loader.options && loader.options[loader.id] || {};\n      var deprecatedOptions = loader.defaultOptions && loader.defaultOptions[loader.id] || {};\n      validateOptionsObject(idOptions, loader.id, log, loaderOptions, deprecatedOptions, loaders);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n\nfunction validateOptionsObject(options, id, log, defaultOptions, deprecatedOptions, loaders) {\n  var loaderName = id || 'Top level';\n  var prefix = id ? \"\".concat(id, \".\") : '';\n\n  for (var key in options) {\n    var isSubOptions = !id && isObject(options[key]);\n\n    if (!(key in defaultOptions)) {\n      if (key in deprecatedOptions) {\n        log.warn(\"\".concat(loaderName, \" loader option '\").concat(prefix).concat(key, \"' deprecated, use '\").concat(deprecatedOptions[key], \"'\"));\n      } else if (!isSubOptions) {\n        var suggestion = findSimilarOption(key, loaders);\n        log.warn(\"\".concat(loaderName, \" loader option '\").concat(prefix).concat(key, \"' not recognized. \").concat(suggestion));\n      }\n    }\n  }\n}\n\nfunction findSimilarOption(optionKey, loaders) {\n  var lowerCaseOptionKey = optionKey.toLowerCase();\n  var bestSuggestion = '';\n\n  var _iterator2 = _createForOfIteratorHelper(loaders),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var loader = _step2.value;\n\n      for (var key in loader.options) {\n        if (optionKey === key) {\n          return \"Did you mean '\".concat(loader.id, \".\").concat(key, \"'?\");\n        }\n\n        var lowerCaseKey = key.toLowerCase();\n        var isPartialMatch = lowerCaseOptionKey.startsWith(lowerCaseKey) || lowerCaseKey.startsWith(lowerCaseOptionKey);\n\n        if (isPartialMatch) {\n          bestSuggestion = bestSuggestion || \"Did you mean '\".concat(loader.id, \".\").concat(key, \"'?\");\n        }\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return bestSuggestion;\n}\n\nfunction normalizeOptionsInternal(loader, options, url) {\n  var loaderDefaultOptions = loader.options || {};\n\n  var mergedOptions = _objectSpread({}, loaderDefaultOptions);\n\n  if (mergedOptions.log === null) {\n    mergedOptions.log = new NullLog();\n  }\n\n  mergeNestedFields(mergedOptions, getGlobalLoaderOptions());\n  mergeNestedFields(mergedOptions, options);\n  addUrlOptions(mergedOptions, url);\n  return mergedOptions;\n}\n\nfunction mergeNestedFields(mergedOptions, options) {\n  for (var key in options) {\n    if (key in options) {\n      var value = options[key];\n\n      if (isPureObject(value) && isPureObject(mergedOptions[key])) {\n        mergedOptions[key] = _objectSpread(_objectSpread({}, mergedOptions[key]), options[key]);\n      } else {\n        mergedOptions[key] = options[key];\n      }\n    }\n  }\n}\n\nfunction addUrlOptions(options, url) {\n  if (url && !options.baseUri) {\n    options.baseUri = url;\n  }\n}","map":{"version":3,"sources":["../../../../src/lib/loader-utils/option-utils.js"],"names":["DEFAULT_LOADER_OPTIONS","baseUri","fetch","CDN","worker","log","metadata","transforms","reuseWorkers","DEPRECATED_LOADER_OPTIONS","dataType","method","headers","body","mode","credentials","cache","redirect","referrer","referrerPolicy","integrity","keepalive","signal","getGlobalLoaderState","global","loaders","getGlobalLoaderOptions","state","globalOptions","normalizeOptionsInternal","Array","validateOptions","options","isObject","fetchFile","context","console","validateOptionsObject","loader","idOptions","loaderOptions","deprecatedOptions","loaderName","id","prefix","isSubOptions","key","suggestion","findSimilarOption","lowerCaseOptionKey","optionKey","bestSuggestion","lowerCaseKey","isPartialMatch","loaderDefaultOptions","mergedOptions","mergeNestedFields","addUrlOptions","value","isPureObject","url"],"mappings":"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","sourcesContent":["import {global} from '@loaders.gl/loader-utils';\nimport {isPureObject, isObject} from '../../javascript-utils/is-type';\nimport {fetchFile} from '../fetch/fetch-file';\nimport {NullLog, ConsoleLog} from './loggers';\n\nconst DEFAULT_LOADER_OPTIONS = {\n  baseUri: '',\n  fetch: null,\n  CDN: 'https://unpkg.com/@loaders.gl',\n  worker: true, // By default, use worker if provided by loader\n  log: new ConsoleLog(), // A probe.gl compatible (`log.log()()` syntax) that just logs to console\n  metadata: false, // TODO - currently only implemented for parseInBatches, adds initial metadata batch,\n  transforms: [],\n  reuseWorkers: true // By default reuse workers\n};\n\nconst DEPRECATED_LOADER_OPTIONS = {\n  dataType: '(no longer used)',\n  // Warn if fetch options are used on top-level\n  method: 'fetch.method',\n  headers: 'fetch.headers',\n  body: 'fetch.body',\n  mode: 'fetch.mode',\n  credentials: 'fetch.credentials',\n  cache: 'fetch.cache',\n  redirect: 'fetch.redirect',\n  referrer: 'fetch.referrer',\n  referrerPolicy: 'fetch.referrerPolicy',\n  integrity: 'fetch.integrity',\n  keepalive: 'fetch.keepalive',\n  signal: 'fetch.signal'\n};\n\n// Helper to reliably get global loader state\n// Wraps initialization of global variable in function to defeat overly agressive tree-shakers\nexport const getGlobalLoaderState = () => {\n  // @ts-ignore\n  global.loaders = global.loaders || {};\n  // @ts-ignore\n  const {loaders} = global;\n\n  // Add _state object to keep separate from modules added to global.loaders\n  loaders._state = loaders._state || {};\n  return loaders._state;\n};\n\n// Store global loader options on the global object to increase chances of cross loaders-version interoperability\n// NOTE: This use case is not reliable but can help when testing new versions of loaders.gl with existing frameworks\nconst getGlobalLoaderOptions = () => {\n  const state = getGlobalLoaderState();\n  // Ensure all default loader options from this library are mentioned\n  state.globalOptions = state.globalOptions || {...DEFAULT_LOADER_OPTIONS};\n  return state.globalOptions;\n};\n\n// Set global loader options\nexport function setGlobalOptions(options) {\n  const state = getGlobalLoaderState();\n  const globalOptions = getGlobalLoaderOptions();\n  state.globalOptions = normalizeOptionsInternal(globalOptions, options);\n}\n\n// Merges options with global opts and loader defaults, also injects baseUri\n// Merges options with global opts and loader defaults, also injects baseUri\nexport function normalizeOptions(options, loader, loaders, url) {\n  loaders = loaders || [];\n  loaders = Array.isArray(loaders) ? loaders : [loaders];\n\n  validateOptions(options, loaders);\n  return normalizeOptionsInternal(loader, options, url);\n}\n\nexport function getFetchFunction(options, context) {\n  const globalOptions = getGlobalLoaderOptions();\n\n  const fetch = options.fetch || globalOptions.fetch;\n\n  // options.fetch can be a function\n  if (typeof fetch === 'function') {\n    return fetch;\n  }\n\n  // options.fetch can be an options object\n  if (isObject(fetch)) {\n    return url => fetchFile(url, fetch);\n  }\n\n  // else refer to context (from parent loader) if available\n  if (context && context.fetch) {\n    return context.fetch;\n  }\n\n  // else return the default fetch function\n\n  // TODO DEPRECATED, support for root level fetch options will be removed in 3.0\n  return url => fetchFile(url, options);\n\n  // return fetchFile;\n}\n\n// VALIDATE OPTIONS\n\n/**\n * Warn for unsupported options\n * @param {object} options\n * @param {*} loaders\n * @param {*} log\n */\nfunction validateOptions(\n  options,\n  loaders,\n  // eslint-disable-next-line\n  log = console\n) {\n  // Check top level options\n  validateOptionsObject(\n    options,\n    null,\n    log,\n    DEFAULT_LOADER_OPTIONS,\n    DEPRECATED_LOADER_OPTIONS,\n    loaders\n  );\n  for (const loader of loaders) {\n    // Get the scoped, loader specific options from the user supplied options\n    const idOptions = (options && options[loader.id]) || {};\n\n    // Get scoped, loader specific default and deprecated options from the selected loader\n    const loaderOptions = (loader.options && loader.options[loader.id]) || {};\n    const deprecatedOptions = (loader.defaultOptions && loader.defaultOptions[loader.id]) || {};\n\n    // Validate loader specific options\n    validateOptionsObject(idOptions, loader.id, log, loaderOptions, deprecatedOptions, loaders);\n  }\n}\n\n// eslint-disable-next-line max-params\nfunction validateOptionsObject(options, id, log, defaultOptions, deprecatedOptions, loaders) {\n  const loaderName = id || 'Top level';\n  const prefix = id ? `${id}.` : '';\n\n  for (const key in options) {\n    // If top level option value is an object it could options for a loader, so ignore\n    const isSubOptions = !id && isObject(options[key]);\n    if (!(key in defaultOptions)) {\n      // Issue deprecation warnings\n      if (key in deprecatedOptions) {\n        log.warn(\n          `${loaderName} loader option \\'${prefix}${key}\\' deprecated, use \\'${\n            deprecatedOptions[key]\n          }\\'`\n        );\n      } else if (!isSubOptions) {\n        const suggestion = findSimilarOption(key, loaders);\n        log.warn(`${loaderName} loader option \\'${prefix}${key}\\' not recognized. ${suggestion}`);\n      }\n    }\n  }\n}\n\nfunction findSimilarOption(optionKey, loaders) {\n  const lowerCaseOptionKey = optionKey.toLowerCase();\n  let bestSuggestion = '';\n  for (const loader of loaders) {\n    for (const key in loader.options) {\n      if (optionKey === key) {\n        return `Did you mean \\'${loader.id}.${key}\\'?`;\n      }\n      const lowerCaseKey = key.toLowerCase();\n      const isPartialMatch =\n        lowerCaseOptionKey.startsWith(lowerCaseKey) || lowerCaseKey.startsWith(lowerCaseOptionKey);\n      if (isPartialMatch) {\n        bestSuggestion = bestSuggestion || `Did you mean \\'${loader.id}.${key}\\'?`;\n      }\n    }\n  }\n  return bestSuggestion;\n}\n\nfunction normalizeOptionsInternal(loader, options, url) {\n  const loaderDefaultOptions = loader.options || {};\n\n  const mergedOptions = {...loaderDefaultOptions};\n\n  // LOGGING: options.log can be set to `null` to defeat logging\n  if (mergedOptions.log === null) {\n    mergedOptions.log = new NullLog();\n  }\n\n  mergeNestedFields(mergedOptions, getGlobalLoaderOptions());\n  mergeNestedFields(mergedOptions, options);\n\n  addUrlOptions(mergedOptions, url);\n\n  return mergedOptions;\n}\n\n// Merge nested options objects\nfunction mergeNestedFields(mergedOptions, options) {\n  for (const key in options) {\n    // Check for nested options\n    // object in options => either no key in defaultOptions or object in defaultOptions\n    if (key in options) {\n      const value = options[key];\n      if (isPureObject(value) && isPureObject(mergedOptions[key])) {\n        mergedOptions[key] = {\n          ...mergedOptions[key],\n          ...options[key]\n        };\n      } else {\n        mergedOptions[key] = options[key];\n      }\n    }\n    // else: No need to merge nested opts, and the initial merge already copied over the nested options\n  }\n}\n\n// Harvest information from the url\n// TODO - baseUri should be a directory, i.e. remove file component from baseUri\n// TODO - extract extension?\n// TODO - extract query parameters?\n// TODO - should these be injected on context instead of options?\nfunction addUrlOptions(options, url) {\n  if (url && !options.baseUri) {\n    options.baseUri = url;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}