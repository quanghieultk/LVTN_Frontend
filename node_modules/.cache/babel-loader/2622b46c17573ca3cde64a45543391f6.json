{"ast":null,"code":"var _jsxFileName = \"D:\\\\LVTN\\\\LVTN\\\\cuisine-net\\\\src\\\\services\\\\gmap.js\";\nimport React from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nGeocode.setApiKey(\"AIzaSyDGe5vjL8wBmilLzoJ0jNIwe9SAuH2xS_0\");\nGeocode.enableDebug();\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getCity = addressArray => {\n      let city = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n          city = addressArray[i].long_name;\n          return city;\n        }\n      }\n    };\n\n    this.getArea = addressArray => {\n      let area = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0]) {\n          for (let j = 0; j < addressArray[i].types.length; j++) {\n            if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n              area = addressArray[i].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    };\n\n    this.getState = addressArray => {\n      let state = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        for (let i = 0; i < addressArray.length; i++) {\n          if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n            state = addressArray[i].long_name;\n            return state;\n          }\n        }\n      }\n    };\n\n    this.onChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.onInfoWindowClose = event => {};\n\n    this.state = {\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    };\n  }\n  /**\r\n    * Get the current address from the default map position and set those values in the state\r\n    */\n\n\n  componentDidMount() {\n    Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(response => {\n      const address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray);\n      console.log('city', city, area, state);\n      this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : ''\n      });\n    }, error => {\n      console.error(error);\n    });\n  }\n\n  /**\r\n    * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\r\n    *\r\n    * @param nextProps\r\n    * @param nextState\r\n    * @return {boolean}\r\n    */\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.markerPosition.lat !== this.props.center.lat || this.state.address !== nextState.address || this.state.city !== nextState.city || this.state.area !== nextState.area || this.state.state !== nextState.state) {\n      return true;\n    } else if (this.props.center.lat === nextProps.center.lat) {\n      return false;\n    }\n  }\n  /**\r\n    * Get the city and set the city input value to the one selected\r\n    *\r\n    * @param addressArray\r\n    * @return {string}\r\n    */\n\n\n  render() {\n    const AsyncMap = withScriptjs(withGoogleMap(props => /*#__PURE__*/_jsxDEV(GoogleMap, {\n      google: this.props.google,\n      defaultZoom: this.props.zoom,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 6\n    }, this)));\n    let map;\n\n    if (this.props.center.lat !== undefined) {\n      map = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"\",\n              children: \"City\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"city\",\n              className: \"form-control\",\n              onChange: this.onChange,\n              readOnly: \"readOnly\",\n              value: this.state.city\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"\",\n              children: \"Area\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"area\",\n              className: \"form-control\",\n              onChange: this.onChange,\n              readOnly: \"readOnly\",\n              value: this.state.area\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"\",\n              children: \"State\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"state\",\n              className: \"form-control\",\n              onChange: this.onChange,\n              readOnly: \"readOnly\",\n              value: this.state.state\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"\",\n              children: \"Address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"address\",\n              className: \"form-control\",\n              onChange: this.onChange,\n              readOnly: \"readOnly\",\n              value: this.state.address\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(AsyncMap, {\n          googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyDGe5vjL8wBmilLzoJ0jNIwe9SAuH2xS_0&libraries=places\",\n          loadingElement: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              height: `100%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 8\n          }, this),\n          containerElement: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              height: this.props.height\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 8\n          }, this),\n          mapElement: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              height: `100%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 10\n      }, this);\n    } else {\n      map = /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: this.props.height\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 10\n      }, this);\n    }\n\n    return map;\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["D:/LVTN/LVTN/cuisine-net/src/services/gmap.js"],"names":["React","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Geocode","setApiKey","enableDebug","Map","Component","constructor","props","getCity","addressArray","city","i","length","types","long_name","getArea","area","j","getState","state","onChange","event","setState","target","name","value","onInfoWindowClose","address","mapPosition","lat","center","lng","markerPosition","componentDidMount","fromLatLng","then","response","results","formatted_address","address_components","console","log","error","shouldComponentUpdate","nextProps","nextState","render","AsyncMap","google","zoom","map","undefined","height"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\r\nimport Geocode from \"react-geocode\";\r\nGeocode.setApiKey(\"AIzaSyDGe5vjL8wBmilLzoJ0jNIwe9SAuH2xS_0\");\r\nGeocode.enableDebug();\r\nclass Map extends React.Component{\r\nconstructor( props ){\r\n  super( props );\r\n  this.state = {\r\n   address: '',\r\n   city: '',\r\n   area: '',\r\n   state: '',\r\n   mapPosition: {\r\n    lat: this.props.center.lat,\r\n    lng: this.props.center.lng\r\n   },\r\n   markerPosition: {\r\n    lat: this.props.center.lat,\r\n    lng: this.props.center.lng\r\n}\r\n  }\r\n }\r\n/**\r\n  * Get the current address from the default map position and set those values in the state\r\n  */\r\n componentDidMount() {\r\n  Geocode.fromLatLng( this.state.mapPosition.lat , this.state.mapPosition.lng ).then(\r\n   response => {\r\n    const address = response.results[0].formatted_address,\r\n     addressArray =  response.results[0].address_components,\r\n     city = this.getCity( addressArray ),\r\n     area = this.getArea( addressArray ),\r\n     state = this.getState( addressArray );\r\n  \r\n    console.log( 'city', city, area, state );\r\n  \r\n    this.setState( {\r\n     address: ( address ) ? address : '',\r\n     area: ( area ) ? area : '',\r\n     city: ( city ) ? city : '',\r\n     state: ( state ) ? state : '',\r\n    } )\r\n   },\r\n   error => {\r\n    console.error(error);\r\n   }\r\n  );\r\n };\r\n/**\r\n  * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\r\n  *\r\n  * @param nextProps\r\n  * @param nextState\r\n  * @return {boolean}\r\n  */\r\n shouldComponentUpdate( nextProps, nextState ){\r\n  if (\r\n   this.state.markerPosition.lat !== this.props.center.lat ||\r\n   this.state.address !== nextState.address ||\r\n   this.state.city !== nextState.city ||\r\n   this.state.area !== nextState.area ||\r\n   this.state.state !== nextState.state\r\n  ) {\r\n   return true\r\n  } else if ( this.props.center.lat === nextProps.center.lat ){\r\n   return false\r\n  }\r\n }\r\n/**\r\n  * Get the city and set the city input value to the one selected\r\n  *\r\n  * @param addressArray\r\n  * @return {string}\r\n  */\r\n getCity = ( addressArray ) => {\r\n  let city = '';\r\n  for( let i = 0; i < addressArray.length; i++ ) {\r\n   if ( addressArray[ i ].types[0] && 'administrative_area_level_2' === addressArray[ i ].types[0] ) {\r\n    city = addressArray[ i ].long_name;\r\n    return city;\r\n   }\r\n  }\r\n };\r\n/**\r\n  * Get the area and set the area input value to the one selected\r\n  *\r\n  * @param addressArray\r\n  * @return {string}\r\n  */\r\n getArea = ( addressArray ) => {\r\n  let area = '';\r\n  for( let i = 0; i < addressArray.length; i++ ) {\r\n   if ( addressArray[ i ].types[0]  ) {\r\n    for ( let j = 0; j < addressArray[ i ].types.length; j++ ) {\r\n     if ( 'sublocality_level_1' === addressArray[ i ].types[j] || 'locality' === addressArray[ i ].types[j] ) {\r\n      area = addressArray[ i ].long_name;\r\n      return area;\r\n     }\r\n    }\r\n   }\r\n  }\r\n };\r\n/**\r\n  * Get the address and set the address input value to the one selected\r\n  *\r\n  * @param addressArray\r\n  * @return {string}\r\n  */\r\n getState = ( addressArray ) => {\r\n  let state = '';\r\n  for( let i = 0; i < addressArray.length; i++ ) {\r\n   for( let i = 0; i < addressArray.length; i++ ) {\r\n    if ( addressArray[ i ].types[0] && 'administrative_area_level_1' === addressArray[ i ].types[0] ) {\r\n     state = addressArray[ i ].long_name;\r\n     return state;\r\n    }\r\n   }\r\n  }\r\n };\r\n/**\r\n  * And function for city,state and address input\r\n  * @param event\r\n  */\r\n onChange = ( event ) => {\r\n  this.setState({ [event.target.name]: event.target.value });\r\n };\r\n/**\r\n  * This Event triggers when the marker window is closed\r\n  *\r\n  * @param event\r\n  */\r\n onInfoWindowClose = ( event ) => {\r\n};\r\nrender(){\r\nconst AsyncMap = withScriptjs(\r\n   withGoogleMap(\r\n    props => (\r\n     <GoogleMap google={this.props.google}\r\n      defaultZoom={this.props.zoom}\r\n      defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\r\n     >\r\n</GoogleMap>\r\n)\r\n   )\r\n  );\r\nlet map;\r\n  if( this.props.center.lat !== undefined ) {\r\n   map = <div>\r\n     <div>\r\n      <div className=\"form-group\">\r\n       <label htmlFor=\"\">City</label>\r\n       <input type=\"text\" name=\"city\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.city }/>\r\n      </div>\r\n      <div className=\"form-group\">\r\n       <label htmlFor=\"\">Area</label>\r\n       <input type=\"text\" name=\"area\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.area }/>\r\n      </div>\r\n      <div className=\"form-group\">\r\n       <label htmlFor=\"\">State</label>\r\n       <input type=\"text\" name=\"state\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.state }/>\r\n      </div>\r\n      <div className=\"form-group\">\r\n       <label htmlFor=\"\">Address</label>\r\n       <input type=\"text\" name=\"address\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.address }/>\r\n      </div>\r\n     </div>\r\n     <AsyncMap\r\n      googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDGe5vjL8wBmilLzoJ0jNIwe9SAuH2xS_0&libraries=places\"\r\n      loadingElement={\r\n       <div style={{ height: `100%` }} />\r\n      }\r\n      containerElement={\r\n       <div style={{ height: this.props.height }} />\r\n      }\r\n      mapElement={\r\n       <div style={{ height: `100%` }} />\r\n      }\r\n     />\r\n    </div>\r\n} else {\r\n   map = <div style={{height: this.props.height}} />\r\n  }\r\n  return( map )\r\n }\r\n}\r\nexport default Map"]},"metadata":{},"sourceType":"module"}