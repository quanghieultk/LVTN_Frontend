{"ast":null,"code":"import { authHeader } from '../helpers/auth-header';\nimport axios from 'axios';\nexport const userService = {\n  login,\n  logout,\n  register,\n  getAll,\n  getById,\n  update,\n  delete: _delete\n};\n\nfunction login(username, password) {\n  return axios({\n    method: 'post',\n    url: '/users/signin',\n    data: {\n      \"email\": username,\n      \"password\": password\n    }\n  }).then(handleResponse).then(user => {\n    localStorage.setItem('user', JSON.stringify(user));\n    return JSON.stringify(user);\n  }).catch(err => {\n    if (err.status == 401) {} else {\n      alert(err);\n    }\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('user');\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(`http://localhost:8000/users`, requestOptions).then(handleResponse);\n}\n\nfunction getById(id) {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(`http://localhost:8000/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction register(user) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`http://localhost:8000/users/signup`, requestOptions).then(handleResponse);\n}\n\nfunction update(user) {\n  const requestOptions = {\n    method: 'PUT',\n    headers: { ...authHeader(),\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`http://localhost:8000/users/${user.id}`, requestOptions).then(handleResponse);\n  ;\n} // prefixed function name with underscore because delete is a reserved word in javascript\n\n\nfunction _delete(id) {\n  const requestOptions = {\n    method: 'DELETE',\n    headers: authHeader()\n  };\n  return fetch(`http://localhost:8000/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.status === 200) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout(); // location.reload(true);\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["D:/LVTN/LVTN/cuisine-net/src/services/user.service.js"],"names":["authHeader","axios","userService","login","logout","register","getAll","getById","update","delete","_delete","username","password","method","url","data","then","handleResponse","user","localStorage","setItem","JSON","stringify","catch","err","status","alert","removeItem","requestOptions","headers","fetch","id","body","response","text","parse","error","message","statusText","Promise","reject"],"mappings":"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","sourcesContent":["import { authHeader } from '../helpers/auth-header';\r\nimport axios from 'axios';\r\nexport const userService = {\r\n    login,\r\n    logout,\r\n    register,\r\n    getAll,\r\n    getById,\r\n    update,\r\n    delete: _delete\r\n};\r\n\r\nfunction  login(username, password) {\r\n    return  axios({\r\n            method: 'post',\r\n            url: '/users/signin',\r\n            data: { \r\n                \"email\": username,\r\n                \"password\": password\r\n            }\r\n        })\r\n        .then(handleResponse)\r\n        .then((user) => {\r\n            localStorage.setItem('user', JSON.stringify(user));\r\n            return JSON.stringify(user);\r\n        }).catch((err)=>{\r\n            if(err.status==401){\r\n\r\n            }else{\r\n                alert(err);\r\n            }\r\n        });\r\n}\r\n\r\nfunction logout() {\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem('user');\r\n}\r\n\r\nfunction getAll() {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: authHeader()\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction getById(id) {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: authHeader()\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users/${id}`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction register(user) {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(user)\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users/signup`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction update(user) {\r\n    const requestOptions = {\r\n        method: 'PUT',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(user)\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users/${user.id}`, requestOptions).then(handleResponse);;\r\n}\r\n\r\n// prefixed function name with underscore because delete is a reserved word in javascript\r\nfunction _delete(id) {\r\n    const requestOptions = {\r\n        method: 'DELETE',\r\n        headers: authHeader()\r\n    };\r\n\r\n    return fetch(`http://localhost:8000/users/${id}`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction handleResponse(response) {\r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.status===200) {\r\n            if (response.status === 401) {\r\n                // auto logout if 401 response returned from api\r\n                logout();\r\n                // location.reload(true);\r\n            }\r\n\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}