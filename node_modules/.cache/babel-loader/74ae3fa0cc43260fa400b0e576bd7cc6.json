{"ast":null,"code":"import { userConstants } from '../constants/user.constants';\nimport { chatConstants } from '../constants/chat.constants';\nvar initialState = {\n  userInfo: {}\n};\nexport function users(state = {}, action) {\n  switch (action.type) {\n    case chatConstants.INC_MESSAGE_COUNT:\n      let messageCount = state.data != undefined ? state.data.messagesCount : 0;\n      return { ...state,\n        data: { ...state.data,\n          messagesCount: messageCount + 1\n        }\n      };\n\n    case chatConstants.RESET_MESSAGE_COUNT:\n      return { ...state,\n        data: { ...state.data,\n          messagesCount: 0\n        }\n      };\n\n    case userConstants.GETALL_REQUEST:\n      return {\n        loading: true\n      };\n\n    case userConstants.GETALL_SUCCESS:\n      return {\n        items: action.users\n      };\n\n    case userConstants.GETALL_FAILURE:\n      return {\n        error: action.error\n      };\n\n    case userConstants.DELETE_REQUEST:\n      // add 'deleting:true' property to user being deleted\n      return { ...state,\n        items: state.items.map(user => user.id === action.id ? { ...user,\n          deleting: true\n        } : user)\n      };\n\n    case userConstants.DELETE_SUCCESS:\n      // remove deleted user from state\n      return {\n        items: state.items.filter(user => user.id !== action.id)\n      };\n\n    case userConstants.DELETE_FAILURE:\n      // remove 'deleting:true' property and add 'deleteError:[error]' property to user \n      return { ...state,\n        items: state.items.map(user => {\n          if (user.id === action.id) {\n            // make copy of user without 'deleting:true' property\n            const {\n              deleting,\n              ...userCopy\n            } = user; // return copy of user with 'deleteError:[error]' property\n\n            return { ...userCopy,\n              deleteError: action.error\n            };\n          }\n\n          return user;\n        })\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["D:/LVTN/deploy_frontend/DEPLOYFRONTEND/src/reducers/users.reducer.js"],"names":["userConstants","chatConstants","initialState","userInfo","users","state","action","type","INC_MESSAGE_COUNT","messageCount","data","undefined","messagesCount","RESET_MESSAGE_COUNT","GETALL_REQUEST","loading","GETALL_SUCCESS","items","GETALL_FAILURE","error","DELETE_REQUEST","map","user","id","deleting","DELETE_SUCCESS","filter","DELETE_FAILURE","userCopy","deleteError"],"mappings":"AAAA,SAASA,aAAT,QAA8B,6BAA9B;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,IAAIC,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE;AADO,CAAnB;AAKA,OAAO,SAASC,KAAT,CAAeC,KAAK,GAAG,EAAvB,EAA2BC,MAA3B,EAAmC;AACxC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,aAAa,CAACO,iBAAnB;AACE,UAAIC,YAAY,GAAGJ,KAAK,CAACK,IAAN,IAAcC,SAAd,GAA0BN,KAAK,CAACK,IAAN,CAAWE,aAArC,GAAqD,CAAxE;AACA,aAAO,EACL,GAAGP,KADE;AAELK,QAAAA,IAAI,EAAE,EACJ,GAAGL,KAAK,CAACK,IADL;AAEJE,UAAAA,aAAa,EAAEH,YAAY,GAAG;AAF1B;AAFD,OAAP;;AAQF,SAAKR,aAAa,CAACY,mBAAnB;AACE,aAAO,EACL,GAAGR,KADE;AAELK,QAAAA,IAAI,EAAE,EACJ,GAAGL,KAAK,CAACK,IADL;AAEJE,UAAAA,aAAa,EAAE;AAFX;AAFD,OAAP;;AAQF,SAAKZ,aAAa,CAACc,cAAnB;AACE,aAAO;AACLC,QAAAA,OAAO,EAAE;AADJ,OAAP;;AAGF,SAAKf,aAAa,CAACgB,cAAnB;AACE,aAAO;AACLC,QAAAA,KAAK,EAAEX,MAAM,CAACF;AADT,OAAP;;AAGF,SAAKJ,aAAa,CAACkB,cAAnB;AACE,aAAO;AACLC,QAAAA,KAAK,EAAEb,MAAM,CAACa;AADT,OAAP;;AAGF,SAAKnB,aAAa,CAACoB,cAAnB;AACE;AACA,aAAO,EACL,GAAGf,KADE;AAELY,QAAAA,KAAK,EAAEZ,KAAK,CAACY,KAAN,CAAYI,GAAZ,CAAgBC,IAAI,IACzBA,IAAI,CAACC,EAAL,KAAYjB,MAAM,CAACiB,EAAnB,GACI,EAAE,GAAGD,IAAL;AAAWE,UAAAA,QAAQ,EAAE;AAArB,SADJ,GAEIF,IAHC;AAFF,OAAP;;AAQF,SAAKtB,aAAa,CAACyB,cAAnB;AACE;AACA,aAAO;AACLR,QAAAA,KAAK,EAAEZ,KAAK,CAACY,KAAN,CAAYS,MAAZ,CAAmBJ,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYjB,MAAM,CAACiB,EAA9C;AADF,OAAP;;AAGF,SAAKvB,aAAa,CAAC2B,cAAnB;AACE;AACA,aAAO,EACL,GAAGtB,KADE;AAELY,QAAAA,KAAK,EAAEZ,KAAK,CAACY,KAAN,CAAYI,GAAZ,CAAgBC,IAAI,IAAI;AAC7B,cAAIA,IAAI,CAACC,EAAL,KAAYjB,MAAM,CAACiB,EAAvB,EAA2B;AACzB;AACA,kBAAM;AAAEC,cAAAA,QAAF;AAAY,iBAAGI;AAAf,gBAA4BN,IAAlC,CAFyB,CAGzB;;AACA,mBAAO,EAAE,GAAGM,QAAL;AAAeC,cAAAA,WAAW,EAAEvB,MAAM,CAACa;AAAnC,aAAP;AACD;;AAED,iBAAOG,IAAP;AACD,SATM;AAFF,OAAP;;AAaF;AACE,aAAOjB,KAAP;AA/DJ;AAiED","sourcesContent":["import { userConstants } from '../constants/user.constants';\r\nimport { chatConstants } from '../constants/chat.constants';\r\nvar initialState = {\r\n  userInfo: {\r\n\r\n  }\r\n}\r\nexport function users(state = {}, action) {\r\n  switch (action.type) {\r\n    case chatConstants.INC_MESSAGE_COUNT:\r\n      let messageCount = state.data != undefined ? state.data.messagesCount : 0;\r\n      return {\r\n        ...state,\r\n        data: {\r\n          ...state.data,\r\n          messagesCount: messageCount + 1,\r\n        },\r\n      };\r\n\r\n    case chatConstants.RESET_MESSAGE_COUNT:\r\n      return {\r\n        ...state,\r\n        data: {\r\n          ...state.data,\r\n          messagesCount: 0,\r\n        },\r\n      };\r\n\r\n    case userConstants.GETALL_REQUEST:\r\n      return {\r\n        loading: true\r\n      };\r\n    case userConstants.GETALL_SUCCESS:\r\n      return {\r\n        items: action.users\r\n      };\r\n    case userConstants.GETALL_FAILURE:\r\n      return {\r\n        error: action.error\r\n      };\r\n    case userConstants.DELETE_REQUEST:\r\n      // add 'deleting:true' property to user being deleted\r\n      return {\r\n        ...state,\r\n        items: state.items.map(user =>\r\n          user.id === action.id\r\n            ? { ...user, deleting: true }\r\n            : user\r\n        )\r\n      };\r\n    case userConstants.DELETE_SUCCESS:\r\n      // remove deleted user from state\r\n      return {\r\n        items: state.items.filter(user => user.id !== action.id)\r\n      };\r\n    case userConstants.DELETE_FAILURE:\r\n      // remove 'deleting:true' property and add 'deleteError:[error]' property to user \r\n      return {\r\n        ...state,\r\n        items: state.items.map(user => {\r\n          if (user.id === action.id) {\r\n            // make copy of user without 'deleting:true' property\r\n            const { deleting, ...userCopy } = user;\r\n            // return copy of user with 'deleteError:[error]' property\r\n            return { ...userCopy, deleteError: action.error };\r\n          }\r\n\r\n          return user;\r\n        })\r\n      };\r\n    default:\r\n      return state\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}