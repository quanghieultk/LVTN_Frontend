{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = _regeneratorRuntime.mark(makeAttributeIterator);\n\nexport function makeAttributeIterator(_ref) {\n  var values, size, ArrayType, element, i, j;\n  return _regeneratorRuntime.wrap(function makeAttributeIterator$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          values = _ref.values, size = _ref.size;\n          ArrayType = values.constructor;\n          element = new ArrayType(size);\n          i = 0;\n\n        case 4:\n          if (!(i < values.length)) {\n            _context.next = 11;\n            break;\n          }\n\n          for (j = 0; j < size; j++) {\n            element[j] = element[i + j];\n          }\n\n          _context.next = 8;\n          return element;\n\n        case 8:\n          i += size;\n          _context.next = 4;\n          break;\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"sources":["../../../../src/geometry/iterators/attribute-iterator.js"],"names":["makeAttributeIterator","values","size","ArrayType","element","i","j"],"mappings":";;uCAGiBA,qB;;AAAjB,OAAO,SAAA,qBAAA,CAAA,IAAA,EAAA;AAAA,MAAA,MAAA,EAAA,IAAA,EAAA,SAAA,EAAA,OAAA,EAAA,CAAA,EAAA,CAAA;AAAA,SAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,sBAAA,CAAA,QAAA,EAAA;AAAA,WAAA,CAAA,EAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,aAAA,CAAA;AAAiCC,UAAAA,MAAjC,GAAA,IAAA,CAAA,MAAiCA,EAAQC,IAAzC,GAAA,IAAA,CAAA,IAAiCD;AAChCE,UAAAA,SADD,GACaF,MAAM,CADnB,WACCE;AACAC,UAAAA,OAFD,GAEW,IAAA,SAAA,CAFX,IAEW,CAAVA;AACGC,UAAAA,CAHJ,GAAA,CAGIA;;AAHJ,aAAA,CAAA;AAAA,cAAA,EAGWA,CAAC,GAAGJ,MAAM,CAHrB,MAAA,CAAA,EAAA;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAAA;AAAA;;AAIH,eAASK,CAAT,GAAA,CAAA,EAAgBA,CAAC,GAAjB,IAAA,EAA0BA,CAA1B,EAAA,EAA+B;AAC7BF,YAAAA,OAAO,CAAPA,CAAO,CAAPA,GAAaA,OAAO,CAACC,CAAC,GAAtBD,CAAoB,CAApBA;AACD;;AANE,UAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAOH,iBAAA,OAAA;;AAPG,aAAA,CAAA;AAG8BC,UAAAA,CAAC,IAH/B,IAG8BA;AAH9B,UAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA;;AAAA,aAAA,EAAA;AAAA,aAAA,KAAA;AAAA,iBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,GAAA,EAAA,OAAA,CAAA;AAAA","sourcesContent":["/** @typedef {import('./attribute-iterator')} types */\n\n/** @type {types['makeAttributeIterator']} */\nexport function* makeAttributeIterator({values, size}) {\n  const ArrayType = values.constructor;\n  const element = new ArrayType(size);\n  for (let i = 0; i < values.length; i += size) {\n    for (let j = 0; j < size; j++) {\n      element[j] = element[i + j];\n    }\n    yield element;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}